{
  "address": "0xCC19B661B1741A8269aD98840Da2A954AB85EAc7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAlchemist",
          "name": "_alchemist",
          "type": "address"
        },
        {
          "internalType": "contract ITransmuter",
          "name": "_transmuter",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_keeperRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "alchemist",
      "outputs": [
        {
          "internalType": "contract IAlchemist",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "checkData",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeperDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeperRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum AlKeeper.TASK",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "lastCallForTask",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTask",
      "outputs": [
        {
          "internalType": "enum AlKeeper.TASK",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "recoverFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAlchemist",
          "name": "newAlchemist",
          "type": "address"
        }
      ],
      "name": "setAlchemist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newKeeperDelay",
          "type": "uint256"
        }
      ],
      "name": "setKeeperDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperRegistry",
          "type": "address"
        }
      ],
      "name": "setKeeperRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITransmuter",
          "name": "newTransmuter",
          "type": "address"
        }
      ],
      "name": "setTransmuter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transmuter",
      "outputs": [
        {
          "internalType": "contract ITransmuter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeee9dd8e00ade69c6df27eca21d2998e1d4ef07934b47d2da75314e809fe07e2",
  "receipt": {
    "to": null,
    "from": "0xBd2274e8640764a57595C7adf2f91E4eaFDa60e6",
    "contractAddress": "0xCC19B661B1741A8269aD98840Da2A954AB85EAc7",
    "transactionIndex": 79,
    "gasUsed": "1667959",
    "logsBloom": "0x
    "blockHash": "0xeea4b008dc642f53a3c33c8733d314edda3f8e672a95c0f107eebf770ce3abe8",
    "transactionHash": "0xeee9dd8e00ade69c6df27eca21d2998e1d4ef07934b47d2da75314e809fe07e2",
    "logs": [
      {
        "transactionIndex": 79,
        "blockNumber": 13276178,
        "transactionHash": "0xeee9dd8e00ade69c6df27eca21d2998e1d4ef07934b47d2da75314e809fe07e2",
        "address": "0xCC19B661B1741A8269aD98840Da2A954AB85EAc7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bd2274e8640764a57595c7adf2f91e4eafda60e6"
        ],
        "data": "0x",
        "logIndex": 206,
        "blockHash": "0xeea4b008dc642f53a3c33c8733d314edda3f8e672a95c0f107eebf770ce3abe8"
      }
    ],
    "blockNumber": 13276178,
    "cumulativeGasUsed": "8562066",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc21D353FF4ee73C572425697f4F5aaD2109fe35b",
    "0xeE69BD81Bd056339368c97c4B2837B4Dc4b796E7",
    "0x6B175474E89094C44Da98b954EedeAC495271d0F",
    "0x7b3EC232b08BD7b4b3305BE0C044D907B2DF960B"
  ],
  "solcInputHash": "a1b295dd8f9590428ca79e83a25d60e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAlchemist\",\"name\":\"_alchemist\",\"type\":\"address\"},{\"internalType\":\"contract ITransmuter\",\"name\":\"_transmuter\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeperRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"alchemist\",\"outputs\":[{\"internalType\":\"contract IAlchemist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum AlKeeper.TASK\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lastCallForTask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTask\",\"outputs\":[{\"internalType\":\"enum AlKeeper.TASK\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAlchemist\",\"name\":\"newAlchemist\",\"type\":\"address\"}],\"name\":\"setAlchemist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newKeeperDelay\",\"type\":\"uint256\"}],\"name\":\"setKeeperDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperRegistry\",\"type\":\"address\"}],\"name\":\"setKeeperRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITransmuter\",\"name\":\"newTransmuter\",\"type\":\"address\"}],\"name\":\"setTransmuter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmuter\",\"outputs\":[{\"internalType\":\"contract ITransmuter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"check if the nextTask needs to be performed Returns FALSE if 1 day has not passed since last call Returns FALSE if certain economic criteria are not met\",\"params\":{\"checkData\":\"input data to check (not used)\"},\"returns\":{\"performData\":\"the task to perform\",\"upkeepNeeded\":\"if upkeep is needed\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"performUpkeep(bytes)\":{\"details\":\"perform a task that needs upkeep\",\"params\":{\"performData\":\"the task to be performed\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AlKeeper.sol\":\"AlKeeper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/AlKeeper.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\nimport {IKeeperCompatibleInterface} from \\\"./IKeeperCompatibleInterface.sol\\\";\\nimport {IAlchemist} from \\\"./IAlchemist.sol\\\";\\nimport {ITransmuter} from \\\"./ITransmuter.sol\\\";\\nimport {IVaultAdaptor} from \\\"./IVaultAdaptor.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract AlKeeper is IKeeperCompatibleInterface, Ownable {\\n    using SafeMath for uint256;\\n    \\n    enum TASK {\\n        HARVEST_TRANSMUTER,\\n        HARVEST_ALCHEMIST,\\n        FLUSH_ALCHEMIST\\n    }\\n\\n    IAlchemist public alchemist;\\n    ITransmuter public transmuter;\\n    IERC20 public underlying;\\n    address public keeperRegistry;\\n\\n    TASK public nextTask;\\n    mapping(TASK => uint256) public lastCallForTask;\\n\\n    bool public paused;\\n\\n    uint256 public keeperDelay;\\n\\n    constructor(IAlchemist _alchemist, ITransmuter _transmuter, IERC20 _underlying, address _keeperRegistry) {\\n        alchemist = _alchemist;\\n        transmuter = _transmuter;\\n        underlying = _underlying;\\n        keeperRegistry = _keeperRegistry;\\n        nextTask = TASK.HARVEST_TRANSMUTER;\\n        keeperDelay = 1 days;\\n    }\\n\\n    modifier onlyKeeperRegistry() {\\n        require(msg.sender == keeperRegistry, \\\"caller not keeper registry\\\");\\n        _;\\n    }\\n\\n    function setAlchemist(IAlchemist newAlchemist) external onlyOwner() {\\n        alchemist = newAlchemist;\\n    }\\n\\n    function setTransmuter(ITransmuter newTransmuter) external onlyOwner() {\\n        transmuter = newTransmuter;\\n    }\\n\\n    function setPause(bool pauseState) external onlyOwner() {\\n        paused = pauseState;\\n    }\\n\\n    function setKeeperDelay(uint256 newKeeperDelay) external onlyOwner() {\\n        keeperDelay = newKeeperDelay;\\n    }\\n\\n    function setKeeperRegistry(address _keeperRegistry) external onlyOwner() {\\n        keeperRegistry = _keeperRegistry;\\n    }\\n\\n    function recoverFunds(IERC20 token) external onlyOwner() {\\n        token.transfer(msg.sender, token.balanceOf(address(this)));\\n    }\\n\\n    /// @dev check if the nextTask needs to be performed\\n    ///\\n    /// Returns FALSE if 1 day has not passed since last call\\n    /// Returns FALSE if certain economic criteria are not met\\n    ///\\n    /// @param checkData input data to check (not used)\\n    ///\\n    /// @return upkeepNeeded if upkeep is needed\\n    /// @return performData the task to perform\\n    function checkUpkeep(bytes calldata checkData) external view override returns (\\n        bool upkeepNeeded,\\n        bytes memory performData\\n    ) {\\n        if (!paused && block.timestamp.sub(lastCallForTask[nextTask]) >= keeperDelay) {\\n            return (true, abi.encode(nextTask));\\n        } else {\\n            return (false, abi.encode(0x0));\\n        }\\n    }\\n\\n    /// @dev perform a task that needs upkeep\\n    ///\\n    /// @param performData the task to be performed\\n    function performUpkeep(bytes calldata performData) external override onlyKeeperRegistry() {\\n        TASK task;\\n        (task) = abi.decode(performData, (TASK));\\n        if (!paused && block.timestamp.sub(lastCallForTask[task]) >= keeperDelay) {\\n            if (task == TASK.HARVEST_TRANSMUTER) {\\n                harvestTransmuter();\\n            } else if (task == TASK.HARVEST_ALCHEMIST) {\\n                harvestAlchemist();\\n            } else if (task == TASK.FLUSH_ALCHEMIST) {\\n                flushAlchemist();\\n            }\\n        }\\n    }\\n\\n    function harvestTransmuter() internal {\\n        if (!transmuter.pause()) {\\n            uint256 vaultId = transmuter.vaultCount() - 1;\\n            address vaultAdaptor = transmuter.getVaultAdapter(vaultId);\\n            uint256 vaultTotalDep = transmuter.getVaultTotalDeposited(vaultId);\\n            uint256 totalValue = IVaultAdaptor(vaultAdaptor).totalValue();\\n            if (totalValue > vaultTotalDep) {\\n                transmuter.harvest(vaultId);\\n            }\\n        }\\n        nextTask = TASK.HARVEST_ALCHEMIST;\\n        lastCallForTask[TASK.HARVEST_TRANSMUTER] = block.timestamp;\\n    }\\n\\n    function harvestAlchemist() internal {\\n        if (!alchemist.emergencyExit()) {\\n            uint256 vaultId = alchemist.vaultCount() - 1;\\n            address vaultAdaptor = alchemist.getVaultAdapter(vaultId);\\n            uint256 vaultTotalDep = alchemist.getVaultTotalDeposited(vaultId);\\n            uint256 totalValue = IVaultAdaptor(vaultAdaptor).totalValue();\\n            if (totalValue > vaultTotalDep) {\\n                alchemist.harvest(vaultId);\\n            }\\n        }\\n        nextTask = TASK.FLUSH_ALCHEMIST;\\n        lastCallForTask[TASK.HARVEST_ALCHEMIST] = block.timestamp;\\n    }\\n\\n    function flushAlchemist() internal {\\n        if (!alchemist.emergencyExit() && underlying.balanceOf(address(alchemist)) > 0) {\\n            alchemist.flush();\\n        }\\n        nextTask = TASK.HARVEST_TRANSMUTER;\\n        lastCallForTask[TASK.FLUSH_ALCHEMIST] = block.timestamp;\\n    }\\n}\",\"keccak256\":\"0xcf77bdf4e73ab543f8bf85100733d15525c0d1e7ec5bd4481b0d4228e6466260\"},\"contracts/IAlchemist.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\nimport {IVaultHolder} from \\\"./IVaultHolder.sol\\\";\\n\\ninterface IAlchemist is IVaultHolder {\\n    function flush() external;\\n    function emergencyExit() external view returns (bool);\\n}\",\"keccak256\":\"0xd7c9917c57d283c5652529167278191a8d2465fa485c85cdf9a9ed42a95d88e0\"},\"contracts/IKeeperCompatibleInterface.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\ninterface IKeeperCompatibleInterface {\\n    function checkUpkeep(bytes calldata checkData) external\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory performData\\n        );\\n\\n    function performUpkeep(\\n        bytes calldata performData\\n    ) external;\\n}\",\"keccak256\":\"0x7f0ec125fc356259b85cdddcddf2ed52dd087a4c4d15eb704e82359f7b6365e8\"},\"contracts/ITransmuter.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\nimport {IVaultHolder} from \\\"./IVaultHolder.sol\\\";\\n\\ninterface ITransmuter is IVaultHolder {\\n    function pause() external view returns (bool);\\n    function setKeepers(address[] calldata _keepers, bool[] calldata _states) external;\\n}\",\"keccak256\":\"0x5082a42e74d9c0fa6496ecf877535ccbddadc8f7af9e17eb1e452d7928ee520f\"},\"contracts/IVaultAdaptor.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVaultAdaptor {\\n    function underlying() external view returns (IERC20);\\n    function totalValue() external view returns (uint256);\\n    function totalDeposited() external view returns (uint256);\\n    function harvest(address rewards) external;\\n    function deposit(uint256 _amount) external;\\n}\",\"keccak256\":\"0x1f050d942a0a333698c07b54d8661f01d47fc2679ea78d1d16506f3bfa65841e\"},\"contracts/IVaultHolder.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\ninterface IVaultHolder {\\n    function harvest(uint256 vaultId) external;\\n    function vaultCount() external view returns (uint256);\\n    function getVaultAdapter(uint256 vaultId) external view returns (address);\\n    function getVaultTotalDeposited(uint256 vaultId) external view returns (uint256);\\n}\",\"keccak256\":\"0xa5cf139bb3cea64654b3170ce1186906db5f986b9a0c7b4271c6f86e9bd87527\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001c5c38038062001c5c8339810160408190526200003491620000f1565b6200003f33620000a1565b600180546001600160a01b03199081166001600160a01b0396871617909155600280548216948616949094179093556003805490931691841691909117909155600480546001600160a81b031916919092161790556201518060075562000171565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000806080858703121562000107578384fd5b8451620001148162000158565b6020860151909450620001278162000158565b60408601519093506200013a8162000158565b60608601519092506200014d8162000158565b939692955090935050565b6001600160a01b03811681146200016e57600080fd5b50565b611adb80620001816000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c80638da5cb5b116100cd578063bedb86fb11610081578063f1af775f11610066578063f1af775f1461032e578063f2fde38b14610341578063f4b1ea561461035457600080fd5b8063bedb86fb14610308578063e72f6e301461031b57600080fd5b8063a128c4d2116100b2578063a128c4d2146102c2578063a2cfd176146102d5578063adb4a9ad146102f557600080fd5b80638da5cb5b146102845780638de925f6146102a257600080fd5b80636e04ff0d11610124578063715018a611610109578063715018a61461023c5780637239d2b91461024457806383e227741461026457600080fd5b80636e04ff0d146101d65780636f307dc3146101f757600080fd5b80631606d21014610156578063375188dc146101725780634585e33b146101a45780635c975abb146101b9575b600080fd5b61015f60075481565b6040519081526020015b60405180910390f35b6004546101979074010000000000000000000000000000000000000000900460ff1681565b60405161016991906119f8565b6101b76101b23660046118c1565b610367565b005b6006546101c69060ff1681565b6040519015158152602001610169565b6101e96101e43660046118c1565b61058d565b60405161016992919061197d565b6003546102179073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610169565b6101b7610650565b6002546102179073ffffffffffffffffffffffffffffffffffffffff1681565b6004546102179073ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff16610217565b6001546102179073ffffffffffffffffffffffffffffffffffffffff1681565b6101b76102d0366004611851565b6106dd565b61015f6102e336600461192e565b60056020526000908152604090205481565b6101b7610303366004611851565b6107a5565b6101b7610316366004611889565b61086d565b6101b7610329366004611851565b61091f565b6101b761033c366004611851565b610aee565b6101b761034f366004611851565b610bb6565b6101b761036236600461194d565b610ce6565b60045473ffffffffffffffffffffffffffffffffffffffff1633146103ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f63616c6c6572206e6f74206b656570657220726567697374727900000000000060448201526064015b60405180910390fd5b60006103fb8284018461192e565b60065490915060ff161580156104a857506007546104a56005600084600281111561044f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811115610487577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020019081526020016000205442610d6c90919063ffffffff16565b10155b156104f65760008160028111156104e8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156104fb576104f6610d7f565b505050565b6001816002811115610536577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610544576104f66111c8565b600281600281111561057f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156104f6576104f66115cc565b60065460009060609060ff161580156105f657506007546105f360056000600460149054906101000a900460ff16600281111561044f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b10155b15610635576001600460149054906101000a900460ff1660405160200161061d91906119f8565b60405160208183030381529060405291509150610649565b60408051600060208201819052910161061d565b9250929050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e4565b6106db60006117dc565b565b60005473ffffffffffffffffffffffffffffffffffffffff16331461075e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e4565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e4565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e4565b600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e4565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff82169063a9059cbb90339083906370a082319060240160206040518083038186803b158015610a0f57600080fd5b505afa158015610a23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a479190611965565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b158015610ab257600080fd5b505af1158015610ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aea91906118a5565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e4565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e4565b73ffffffffffffffffffffffffffffffffffffffff8116610cda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103e4565b610ce3816117dc565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610d67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e4565b600755565b6000610d788284611a39565b9392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638456cb596040518163ffffffff1660e01b815260040160206040518083038186803b158015610de757600080fd5b505afa158015610dfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1f91906118a5565b6111375760006001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a7c6a1006040518163ffffffff1660e01b815260040160206040518083038186803b158015610e8f57600080fd5b505afa158015610ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec79190611965565b610ed19190611a39565b6002546040517f2670fdd80000000000000000000000000000000000000000000000000000000081526004810183905291925060009173ffffffffffffffffffffffffffffffffffffffff90911690632670fdd89060240160206040518083038186803b158015610f4157600080fd5b505afa158015610f55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f79919061186d565b6002546040517faaf166600000000000000000000000000000000000000000000000000000000081526004810185905291925060009173ffffffffffffffffffffffffffffffffffffffff9091169063aaf166609060240160206040518083038186803b158015610fe957600080fd5b505afa158015610ffd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110219190611965565b905060008273ffffffffffffffffffffffffffffffffffffffff1663d4c3eea06040518163ffffffff1660e01b815260040160206040518083038186803b15801561106b57600080fd5b505afa15801561107f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a39190611965565b905081811115611132576002546040517fddc632620000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff9091169063ddc6326290602401600060405180830381600087803b15801561111957600080fd5b505af115801561112d573d6000803e3d6000fd5b505050505b505050505b600480547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790554260056000805b60028111156111b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602081019190915260400160002055565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635641ec036040518163ffffffff1660e01b815260040160206040518083038186803b15801561123057600080fd5b505afa158015611244573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126891906118a5565b6115815760018054604080517fa7c6a10000000000000000000000000000000000000000000000000000000000815290516000939273ffffffffffffffffffffffffffffffffffffffff169163a7c6a100916004808301926020929190829003018186803b1580156112d957600080fd5b505afa1580156112ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113119190611965565b61131b9190611a39565b6001546040517f2670fdd80000000000000000000000000000000000000000000000000000000081526004810183905291925060009173ffffffffffffffffffffffffffffffffffffffff90911690632670fdd89060240160206040518083038186803b15801561138b57600080fd5b505afa15801561139f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c3919061186d565b6001546040517faaf166600000000000000000000000000000000000000000000000000000000081526004810185905291925060009173ffffffffffffffffffffffffffffffffffffffff9091169063aaf166609060240160206040518083038186803b15801561143357600080fd5b505afa158015611447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146b9190611965565b905060008273ffffffffffffffffffffffffffffffffffffffff1663d4c3eea06040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b557600080fd5b505afa1580156114c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ed9190611965565b90508181111561157c576001546040517fddc632620000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff9091169063ddc6326290602401600060405180830381600087803b15801561156357600080fd5b505af1158015611577573d6000803e3d6000fd5b505050505b505050505b600480547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740200000000000000000000000000000000000000001790554260056000600161117d565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635641ec036040518163ffffffff1660e01b815260040160206040518083038186803b15801561163457600080fd5b505afa158015611648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166c91906118a5565b15801561172057506003546001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015260009291909116906370a082319060240160206040518083038186803b1580156116e657600080fd5b505afa1580156116fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171e9190611965565b115b156117a857600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636b9f96ea6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561178f57600080fd5b505af11580156117a3573d6000803e3d6000fd5b505050505b600480547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690554260056000600261117d565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215611862578081fd5b8135610d7881611a75565b60006020828403121561187e578081fd5b8151610d7881611a75565b60006020828403121561189a578081fd5b8135610d7881611a97565b6000602082840312156118b6578081fd5b8151610d7881611a97565b600080602083850312156118d3578081fd5b823567ffffffffffffffff808211156118ea578283fd5b818501915085601f8301126118fd578283fd5b81358181111561190b578384fd5b86602082850101111561191c578384fd5b60209290920196919550909350505050565b60006020828403121561193f578081fd5b813560038110610d78578182fd5b60006020828403121561195e578081fd5b5035919050565b600060208284031215611976578081fd5b5051919050565b8215158152600060206040818401528351806040850152825b818110156119b257858101830151858201606001528201611996565b818111156119c35783606083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201606001949350505050565b6020810160038310611a33577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600082821015611a70577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b500390565b73ffffffffffffffffffffffffffffffffffffffff81168114610ce357600080fd5b8015158114610ce357600080fdfea26469706673582212206bddc4bd42426fe12c4a1ada2f7ea4d7535541960bd25f366233f3aa2d3925ab64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c80638da5cb5b116100cd578063bedb86fb11610081578063f1af775f11610066578063f1af775f1461032e578063f2fde38b14610341578063f4b1ea561461035457600080fd5b8063bedb86fb14610308578063e72f6e301461031b57600080fd5b8063a128c4d2116100b2578063a128c4d2146102c2578063a2cfd176146102d5578063adb4a9ad146102f557600080fd5b80638da5cb5b146102845780638de925f6146102a257600080fd5b80636e04ff0d11610124578063715018a611610109578063715018a61461023c5780637239d2b91461024457806383e227741461026457600080fd5b80636e04ff0d146101d65780636f307dc3146101f757600080fd5b80631606d21014610156578063375188dc146101725780634585e33b146101a45780635c975abb146101b9575b600080fd5b61015f60075481565b6040519081526020015b60405180910390f35b6004546101979074010000000000000000000000000000000000000000900460ff1681565b60405161016991906119f8565b6101b76101b23660046118c1565b610367565b005b6006546101c69060ff1681565b6040519015158152602001610169565b6101e96101e43660046118c1565b61058d565b60405161016992919061197d565b6003546102179073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610169565b6101b7610650565b6002546102179073ffffffffffffffffffffffffffffffffffffffff1681565b6004546102179073ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff16610217565b6001546102179073ffffffffffffffffffffffffffffffffffffffff1681565b6101b76102d0366004611851565b6106dd565b61015f6102e336600461192e565b60056020526000908152604090205481565b6101b7610303366004611851565b6107a5565b6101b7610316366004611889565b61086d565b6101b7610329366004611851565b61091f565b6101b761033c366004611851565b610aee565b6101b761034f366004611851565b610bb6565b6101b761036236600461194d565b610ce6565b60045473ffffffffffffffffffffffffffffffffffffffff1633146103ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f63616c6c6572206e6f74206b656570657220726567697374727900000000000060448201526064015b60405180910390fd5b60006103fb8284018461192e565b60065490915060ff161580156104a857506007546104a56005600084600281111561044f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811115610487577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020019081526020016000205442610d6c90919063ffffffff16565b10155b156104f65760008160028111156104e8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156104fb576104f6610d7f565b505050565b6001816002811115610536577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610544576104f66111c8565b600281600281111561057f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156104f6576104f66115cc565b60065460009060609060ff161580156105f657506007546105f360056000600460149054906101000a900460ff16600281111561044f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b10155b15610635576001600460149054906101000a900460ff1660405160200161061d91906119f8565b60405160208183030381529060405291509150610649565b60408051600060208201819052910161061d565b9250929050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e4565b6106db60006117dc565b565b60005473ffffffffffffffffffffffffffffffffffffffff16331461075e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e4565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e4565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e4565b600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e4565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff82169063a9059cbb90339083906370a082319060240160206040518083038186803b158015610a0f57600080fd5b505afa158015610a23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a479190611965565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b158015610ab257600080fd5b505af1158015610ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aea91906118a5565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e4565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e4565b73ffffffffffffffffffffffffffffffffffffffff8116610cda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103e4565b610ce3816117dc565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610d67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e4565b600755565b6000610d788284611a39565b9392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638456cb596040518163ffffffff1660e01b815260040160206040518083038186803b158015610de757600080fd5b505afa158015610dfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1f91906118a5565b6111375760006001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a7c6a1006040518163ffffffff1660e01b815260040160206040518083038186803b158015610e8f57600080fd5b505afa158015610ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec79190611965565b610ed19190611a39565b6002546040517f2670fdd80000000000000000000000000000000000000000000000000000000081526004810183905291925060009173ffffffffffffffffffffffffffffffffffffffff90911690632670fdd89060240160206040518083038186803b158015610f4157600080fd5b505afa158015610f55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f79919061186d565b6002546040517faaf166600000000000000000000000000000000000000000000000000000000081526004810185905291925060009173ffffffffffffffffffffffffffffffffffffffff9091169063aaf166609060240160206040518083038186803b158015610fe957600080fd5b505afa158015610ffd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110219190611965565b905060008273ffffffffffffffffffffffffffffffffffffffff1663d4c3eea06040518163ffffffff1660e01b815260040160206040518083038186803b15801561106b57600080fd5b505afa15801561107f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a39190611965565b905081811115611132576002546040517fddc632620000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff9091169063ddc6326290602401600060405180830381600087803b15801561111957600080fd5b505af115801561112d573d6000803e3d6000fd5b505050505b505050505b600480547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790554260056000805b60028111156111b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602081019190915260400160002055565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635641ec036040518163ffffffff1660e01b815260040160206040518083038186803b15801561123057600080fd5b505afa158015611244573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126891906118a5565b6115815760018054604080517fa7c6a10000000000000000000000000000000000000000000000000000000000815290516000939273ffffffffffffffffffffffffffffffffffffffff169163a7c6a100916004808301926020929190829003018186803b1580156112d957600080fd5b505afa1580156112ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113119190611965565b61131b9190611a39565b6001546040517f2670fdd80000000000000000000000000000000000000000000000000000000081526004810183905291925060009173ffffffffffffffffffffffffffffffffffffffff90911690632670fdd89060240160206040518083038186803b15801561138b57600080fd5b505afa15801561139f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c3919061186d565b6001546040517faaf166600000000000000000000000000000000000000000000000000000000081526004810185905291925060009173ffffffffffffffffffffffffffffffffffffffff9091169063aaf166609060240160206040518083038186803b15801561143357600080fd5b505afa158015611447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146b9190611965565b905060008273ffffffffffffffffffffffffffffffffffffffff1663d4c3eea06040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b557600080fd5b505afa1580156114c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ed9190611965565b90508181111561157c576001546040517fddc632620000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff9091169063ddc6326290602401600060405180830381600087803b15801561156357600080fd5b505af1158015611577573d6000803e3d6000fd5b505050505b505050505b600480547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740200000000000000000000000000000000000000001790554260056000600161117d565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635641ec036040518163ffffffff1660e01b815260040160206040518083038186803b15801561163457600080fd5b505afa158015611648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166c91906118a5565b15801561172057506003546001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015260009291909116906370a082319060240160206040518083038186803b1580156116e657600080fd5b505afa1580156116fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171e9190611965565b115b156117a857600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636b9f96ea6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561178f57600080fd5b505af11580156117a3573d6000803e3d6000fd5b505050505b600480547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690554260056000600261117d565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215611862578081fd5b8135610d7881611a75565b60006020828403121561187e578081fd5b8151610d7881611a75565b60006020828403121561189a578081fd5b8135610d7881611a97565b6000602082840312156118b6578081fd5b8151610d7881611a97565b600080602083850312156118d3578081fd5b823567ffffffffffffffff808211156118ea578283fd5b818501915085601f8301126118fd578283fd5b81358181111561190b578384fd5b86602082850101111561191c578384fd5b60209290920196919550909350505050565b60006020828403121561193f578081fd5b813560038110610d78578182fd5b60006020828403121561195e578081fd5b5035919050565b600060208284031215611976578081fd5b5051919050565b8215158152600060206040818401528351806040850152825b818110156119b257858101830151858201606001528201611996565b818111156119c35783606083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201606001949350505050565b6020810160038310611a33577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600082821015611a70577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b500390565b73ffffffffffffffffffffffffffffffffffffffff81168114610ce357600080fd5b8015158114610ce357600080fdfea26469706673582212206bddc4bd42426fe12c4a1ada2f7ea4d7535541960bd25f366233f3aa2d3925ab64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "check if the nextTask needs to be performed Returns FALSE if 1 day has not passed since last call Returns FALSE if certain economic criteria are not met",
        "params": {
          "checkData": "input data to check (not used)"
        },
        "returns": {
          "performData": "the task to perform",
          "upkeepNeeded": "if upkeep is needed"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "performUpkeep(bytes)": {
        "details": "perform a task that needs upkeep",
        "params": {
          "performData": "the task to be performed"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AlKeeper.sol:AlKeeper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1634,
        "contract": "contracts/AlKeeper.sol:AlKeeper",
        "label": "alchemist",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IAlchemist)2079"
      },
      {
        "astId": 1637,
        "contract": "contracts/AlKeeper.sol:AlKeeper",
        "label": "transmuter",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ITransmuter)2117"
      },
      {
        "astId": 1640,
        "contract": "contracts/AlKeeper.sol:AlKeeper",
        "label": "underlying",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)727"
      },
      {
        "astId": 1642,
        "contract": "contracts/AlKeeper.sol:AlKeeper",
        "label": "keeperRegistry",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1645,
        "contract": "contracts/AlKeeper.sol:AlKeeper",
        "label": "nextTask",
        "offset": 20,
        "slot": "4",
        "type": "t_enum(TASK)1631"
      },
      {
        "astId": 1650,
        "contract": "contracts/AlKeeper.sol:AlKeeper",
        "label": "lastCallForTask",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_enum(TASK)1631,t_uint256)"
      },
      {
        "astId": 1652,
        "contract": "contracts/AlKeeper.sol:AlKeeper",
        "label": "paused",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 1654,
        "contract": "contracts/AlKeeper.sol:AlKeeper",
        "label": "keeperDelay",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAlchemist)2079": {
        "encoding": "inplace",
        "label": "contract IAlchemist",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)727": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ITransmuter)2117": {
        "encoding": "inplace",
        "label": "contract ITransmuter",
        "numberOfBytes": "20"
      },
      "t_enum(TASK)1631": {
        "encoding": "inplace",
        "label": "enum AlKeeper.TASK",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(TASK)1631,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(TASK)1631",
        "label": "mapping(enum AlKeeper.TASK => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}