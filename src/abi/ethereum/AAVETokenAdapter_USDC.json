{
  "address": "0xb7D9356b0D5b2367E730b583A2b140269A647b55",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "alchemist",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingToken",
              "type": "address"
            }
          ],
          "internalType": "struct InitializationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ERC20CallFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "IllegalState",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "alchemist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "unwrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "wrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2a791a7d4f07ab8172f111b62477b5f034c18e20543b872e806a02ed1acd45b9",
  "receipt": {
    "to": null,
    "from": "0x526D542FFBAe26D510cD610b8050438586fd203C",
    "contractAddress": "0xb7D9356b0D5b2367E730b583A2b140269A647b55",
    "transactionIndex": 0,
    "gasUsed": "786396",
    "logsBloom": "0x
    "blockHash": "0xf23a1284dea34652e16a4c3d50004ba9605515ad1ccc3b5c7cf2963f58f874cd",
    "transactionHash": "0x2a791a7d4f07ab8172f111b62477b5f034c18e20543b872e806a02ed1acd45b9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 15151525,
        "transactionHash": "0x2a791a7d4f07ab8172f111b62477b5f034c18e20543b872e806a02ed1acd45b9",
        "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b7d9356b0d5b2367e730b583a2b140269a647b55",
          "0x000000000000000000000000f591d878608e2e5c7d4f1e499330f4ab9bbae37a"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0xf23a1284dea34652e16a4c3d50004ba9605515ad1ccc3b5c7cf2963f58f874cd"
      }
    ],
    "blockNumber": 15151525,
    "cumulativeGasUsed": "786396",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "alchemist": "0x5C6374a2ac4EBC38DeA0Fc1F8716e5Ea1AdD94dd",
      "token": "0xf591D878608e2e5c7D4f1E499330f4AB9BbaE37a",
      "underlyingToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
    }
  ],
  "solcInputHash": "f644976d12a037ef3d1ff000e5989323",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"alchemist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"internalType\":\"struct InitializationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ERC20CallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"IllegalState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"alchemist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"params\":{\"data\":\"The resulting data from the call. This is error data when the call was not a success. Otherwise,                this is malformed data when the call was a success.\",\"success\":\"If the call to the token was a success.\",\"target\":\"The target address.\"}}],\"IllegalState(string)\":[{\"params\":{\"message\":\"The error message.\"}}],\"Unauthorized(string)\":[{\"params\":{\"message\":\"The error message.\"}}]},\"kind\":\"dev\",\"methods\":{\"price()\":{\"returns\":{\"_0\":\"The price.\"}},\"unwrap(uint256,address)\":{\"params\":{\"amount\":\"The amount of yield-tokens to redeem.\",\"recipient\":\"The recipient of the resulting underlying-tokens.\"},\"returns\":{\"_0\":\"The amount of underlying tokens unwrapped to `recipient`.\"}},\"wrap(uint256,address)\":{\"params\":{\"amount\":\"The amount of the underlying token to wrap.\",\"recipient\":\"The address which will receive the yield tokens.\"},\"returns\":{\"_0\":\"The amount of yield tokens minted to `recipient`.\"}}},\"stateVariables\":{\"token\":{\"return\":\"The address of the yield token.\",\"returns\":{\"_0\":\"The address of the yield token.\"}},\"underlyingToken\":{\"return\":\"The address of the underlying token.\",\"returns\":{\"_0\":\"The address of the underlying token.\"}},\"version\":{\"return\":\"The version.\",\"returns\":{\"_0\":\"The version.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"notice\":\"An error used to indicate that a call to an ERC20 contract failed.\"}],\"IllegalState(string)\":[{\"notice\":\"An error used to indicate that a function has encountered an unrecoverable state.\"}],\"Unauthorized(string)\":[{\"notice\":\"An error used to indicate that a message sender tried to execute a privileged function.\"}]},\"kind\":\"user\",\"methods\":{\"price()\":{\"notice\":\"Gets the number of underlying tokens that a single whole yield token is redeemable         for.\"},\"token()\":{\"notice\":\"Gets the address of the yield token that this adapter supports.\"},\"underlyingToken()\":{\"notice\":\"Gets the address of the underlying token that the yield token wraps.\"},\"unwrap(uint256,address)\":{\"notice\":\"Unwraps `amount` yield tokens into the underlying token.\"},\"version()\":{\"notice\":\"Gets the current version.\"},\"wrap(uint256,address)\":{\"notice\":\"Wraps `amount` underlying tokens into the yield token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"submodules/v2-foundry/src/adapters/aave/AAVETokenAdapter.sol\":\"AAVETokenAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0-rc.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9933eb67311e9b552e97c8f6efba871271e0b16387248ddf634796d4614653c9\",\"license\":\"MIT\"},\"submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"submodules/v2-foundry/src/adapters/aave/AAVETokenAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.13;\\n\\nimport {IllegalState, Unauthorized} from \\\"../../base/ErrorMessages.sol\\\";\\nimport {MutexLock} from \\\"../../base/MutexLock.sol\\\";\\nimport {IERC20Metadata} from \\\"../../interfaces/IERC20Metadata.sol\\\";\\nimport {ITokenAdapter} from \\\"../../interfaces/ITokenAdapter.sol\\\";\\nimport {IStaticAToken} from \\\"../../interfaces/external/aave/IStaticAToken.sol\\\";\\n\\nimport {TokenUtils} from \\\"../../libraries/TokenUtils.sol\\\";\\n\\nstruct InitializationParams {\\n    address alchemist;\\n    address token;\\n    address underlyingToken;\\n}\\n\\ncontract AAVETokenAdapter is ITokenAdapter, MutexLock {\\n    string public constant override version = \\\"1.0.0\\\";\\n    address public alchemist;\\n    address public override token;\\n    address public override underlyingToken;\\n    uint8 public tokenDecimals;\\n\\n    constructor(InitializationParams memory params) {\\n        alchemist = params.alchemist;\\n        token = params.token;\\n        underlyingToken = params.underlyingToken;\\n        TokenUtils.safeApprove(underlyingToken, token, type(uint256).max);\\n        tokenDecimals = TokenUtils.expectDecimals(token);\\n    }\\n\\n    /// @dev Checks that the message sender is the alchemist that the adapter is bound to.\\n    modifier onlyAlchemist() {\\n        if (msg.sender != alchemist) {\\n            revert Unauthorized(\\\"Not alchemist\\\");\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function price() external view override returns (uint256) {\\n        return IStaticAToken(token).staticToDynamicAmount(10**tokenDecimals);\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function wrap(uint256 amount, address recipient) external lock onlyAlchemist override returns (uint256) {\\n        TokenUtils.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\\n        // 0 - referral code (deprecated).\\n        // true - \\\"from underlying\\\", we are depositing the underlying token, not the aToken.\\n        return IStaticAToken(token).deposit(recipient, amount, 0, true);\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function unwrap(uint256 amount, address recipient) external lock onlyAlchemist override returns (uint256) {\\n        TokenUtils.safeTransferFrom(token, msg.sender, address(this), amount);\\n        // true - \\\"to underlying\\\", we are withdrawing the underlying token, not the aToken.\\n        (uint256 amountBurnt, uint256 amountWithdrawn) = IStaticAToken(token).withdraw(recipient, amount, true);\\n        if (amountBurnt != amount) {\\n           revert IllegalState(\\\"Amount burnt mismatch\\\");\\n        }\\n        return amountWithdrawn;\\n    }\\n} \",\"keccak256\":\"0x5392baa4d23c49eef549f2a30d1929861fd80ede51a428e79f5eb42f2c9e6781\",\"license\":\"GPL-3.0-or-later\"},\"submodules/v2-foundry/src/base/ErrorMessages.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\n/// @notice An error used to indicate that an argument passed to a function is illegal or\\n///         inappropriate.\\n///\\n/// @param message The error message.\\nerror IllegalArgument(string message);\\n\\n/// @notice An error used to indicate that a function has encountered an unrecoverable state.\\n///\\n/// @param message The error message.\\nerror IllegalState(string message);\\n\\n/// @notice An error used to indicate that an operation is unsupported.\\n///\\n/// @param message The error message.\\nerror UnsupportedOperation(string message);\\n\\n/// @notice An error used to indicate that a message sender tried to execute a privileged function.\\n///\\n/// @param message The error message.\\nerror Unauthorized(string message);\",\"keccak256\":\"0x302087c36048c360cbd3192e41344d8705d7a50fdb97c8b77d45a5ff503dd264\",\"license\":\"UNLICENSED\"},\"submodules/v2-foundry/src/base/MutexLock.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.13;\\n\\nimport {IllegalState} from \\\"./ErrorMessages.sol\\\";\\n\\n/// @title  Mutex\\n/// @author Alchemix Finance\\n///\\n/// @notice Provides a mutual exclusion lock for implementing contracts.\\nabstract contract MutexLock {\\n    enum State {\\n        RESERVED,\\n        UNLOCKED,\\n        LOCKED\\n    }\\n\\n    /// @notice The lock state.\\n    State private _lockState = State.UNLOCKED;\\n\\n    /// @dev A modifier which acquires the mutex.\\n    modifier lock() {\\n        _claimLock();\\n\\n        _;\\n\\n        _freeLock();\\n    }\\n\\n    /// @dev Gets if the mutex is locked.\\n    ///\\n    /// @return if the mutex is locked.\\n    function _isLocked() internal view returns (bool) {\\n        return _lockState == State.LOCKED;\\n    }\\n\\n    /// @dev Claims the lock. If the lock is already claimed, then this will revert.\\n    function _claimLock() internal {\\n        // Check that the lock has not been claimed yet.\\n        if (_lockState != State.UNLOCKED) {\\n            revert IllegalState(\\\"Lock already claimed\\\");\\n        }\\n\\n        // Claim the lock.\\n        _lockState = State.LOCKED;\\n    }\\n\\n    /// @dev Frees the lock.\\n    function _freeLock() internal {\\n        _lockState = State.UNLOCKED;\\n    }\\n}\",\"keccak256\":\"0xe3aab21deaf0ce1c795f164630a6e495649779342e0f1f480efac4ff53bb0619\",\"license\":\"GPL-2.0-or-later\"},\"submodules/v2-foundry/src/interfaces/IERC20Burnable.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title  IERC20Burnable\\n/// @author Alchemix Finance\\ninterface IERC20Burnable is IERC20 {\\n    /// @notice Burns `amount` tokens from the balance of `msg.sender`.\\n    ///\\n    /// @param amount The amount of tokens to burn.\\n    ///\\n    /// @return If burning the tokens was successful.\\n    function burn(uint256 amount) external returns (bool);\\n\\n    /// @notice Burns `amount` tokens from `owner`'s balance.\\n    ///\\n    /// @param owner  The address to burn tokens from.\\n    /// @param amount The amount of tokens to burn.\\n    ///\\n    /// @return If burning the tokens was successful.\\n    function burnFrom(address owner, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0x1ef68b8211ae0387d53a98d9ed818fed3991c029f58a4730467baa1cf6b22e58\"},\"submodules/v2-foundry/src/interfaces/IERC20Metadata.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  IERC20Metadata\\n/// @author Alchemix Finance\\ninterface IERC20Metadata {\\n    /// @notice Gets the name of the token.\\n    ///\\n    /// @return The name.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Gets the symbol of the token.\\n    ///\\n    /// @return The symbol.\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice Gets the number of decimals that the token has.\\n    ///\\n    /// @return The number of decimals.\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x2d5429bdf25a43d40c7e23f3e27dd595585f33b1aaed4aabe8e76e681e15702b\"},\"submodules/v2-foundry/src/interfaces/IERC20Mintable.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title  IERC20Mintable\\n/// @author Alchemix Finance\\ninterface IERC20Mintable is IERC20 {\\n    /// @notice Mints `amount` tokens to `recipient`.\\n    ///\\n    /// @param recipient The address which will receive the minted tokens.\\n    /// @param amount    The amount of tokens to mint.\\n    function mint(address recipient, uint256 amount) external;\\n}\",\"keccak256\":\"0x072e557e7eff54ba828d410d96e7782931a634813bccc817dc8988979a435aeb\"},\"submodules/v2-foundry/src/interfaces/ITokenAdapter.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  ITokenAdapter\\n/// @author Alchemix Finance\\ninterface ITokenAdapter {\\n    /// @notice Gets the current version.\\n    ///\\n    /// @return The version.\\n    function version() external view returns (string memory);\\n\\n    /// @notice Gets the address of the yield token that this adapter supports.\\n    ///\\n    /// @return The address of the yield token.\\n    function token() external view returns (address);\\n\\n    /// @notice Gets the address of the underlying token that the yield token wraps.\\n    ///\\n    /// @return The address of the underlying token.\\n    function underlyingToken() external view returns (address);\\n\\n    /// @notice Gets the number of underlying tokens that a single whole yield token is redeemable\\n    ///         for.\\n    ///\\n    /// @return The price.\\n    function price() external view returns (uint256);\\n\\n    /// @notice Wraps `amount` underlying tokens into the yield token.\\n    ///\\n    /// @param amount    The amount of the underlying token to wrap.\\n    /// @param recipient The address which will receive the yield tokens.\\n    ///\\n    /// @return amountYieldTokens The amount of yield tokens minted to `recipient`.\\n    function wrap(uint256 amount, address recipient)\\n        external\\n        returns (uint256 amountYieldTokens);\\n\\n    /// @notice Unwraps `amount` yield tokens into the underlying token.\\n    ///\\n    /// @param amount    The amount of yield-tokens to redeem.\\n    /// @param recipient The recipient of the resulting underlying-tokens.\\n    ///\\n    /// @return amountUnderlyingTokens The amount of underlying tokens unwrapped to `recipient`.\\n    function unwrap(uint256 amount, address recipient)\\n        external\\n        returns (uint256 amountUnderlyingTokens);\\n}\",\"keccak256\":\"0x98a839c3d1673e410d674c0fd05ff6d64203f9818224d4c3258e21d91b96460a\"},\"submodules/v2-foundry/src/interfaces/external/aave/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.0;\\n\\n// @dev Refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\nstruct ReserveData {\\n  // Stores the reserve configuration.\\n  ReserveConfigurationMap configuration;\\n  // The liquidity index. Expressed in ray.\\n  uint128 liquidityIndex;\\n  // Variable borrow index. Expressed in ray.\\n  uint128 variableBorrowIndex;\\n  // The current supply rate. Expressed in ray.\\n  uint128 currentLiquidityRate;\\n  // The current variable borrow rate. Expressed in ray.\\n  uint128 currentVariableBorrowRate;\\n  // The current stable borrow rate. Expressed in ray.\\n  uint128 currentStableBorrowRate;\\n  uint40 lastUpdateTimestamp;\\n  // Tokens addresses.\\n  address aTokenAddress;\\n  address stableDebtTokenAddress;\\n  address variableDebtTokenAddress;\\n  // Address of the interest rate strategy.\\n  address interestRateStrategyAddress;\\n  // The id of the reserve. Represents the position in the list of the active reserves.\\n  uint8 id;\\n}\\n\\nstruct ReserveConfigurationMap {\\n  //bit 0-15: LTV\\n  //bit 16-31: Liq. threshold\\n  //bit 32-47: Liq. bonus\\n  //bit 48-55: Decimals\\n  //bit 56: Reserve is active\\n  //bit 57: reserve is frozen\\n  //bit 58: borrowing is enabled\\n  //bit 59: stable rate borrowing enabled\\n  //bit 60-63: reserved\\n  //bit 64-79: reserve factor\\n  uint256 data;\\n}\\n\\nstruct UserConfigurationMap {\\n  uint256 data;\\n}\\n\\nenum InterestRateMode {\\n  NONE,\\n  STABLE,\\n  VARIABLE\\n}\",\"keccak256\":\"0x63e3c6a3663d616b5cbb9d6a0b9d5f10465bc39715ff88d29cb57275bfb651b1\",\"license\":\"agpl-3.0\"},\"submodules/v2-foundry/src/interfaces/external/aave/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.0;\\n\\nimport {IERC20} from \\\"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\nimport {IInitializableAToken} from './IInitializableAToken.sol';\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\n\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param from The address performing the mint\\n   * @param value The amount being\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Mint(address indexed from, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Mints `amount` aTokens to `user`\\n   * @param user The address receiving the minted tokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function mint(\\n    address user,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted after aTokens are burned\\n   * @param from The owner of the aTokens, getting them burned\\n   * @param target The address that will receive the underlying\\n   * @param value The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param from The user whose tokens are being transferred\\n   * @param to The recipient\\n   * @param value The amount being transferred\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @param user The owner of the aTokens, getting them burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  function burn(\\n    address user,\\n    address receiverOfUnderlying,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Mints aTokens to the reserve treasury\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   */\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n   * @param from The address getting liquidated, current owner of the aTokens\\n   * @param to The recipient\\n   * @param value The amount of tokens getting transferred\\n   **/\\n  function transferOnLiquidation(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external;\\n\\n  /**\\n   * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n   * assets in borrow(), withdraw() and flashLoan()\\n   * @param user The recipient of the underlying\\n   * @param amount The amount getting transferred\\n   * @return The amount transferred\\n   **/\\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n  /**\\n   * @dev Invoked to execute actions on the aToken side after a repayment.\\n   * @param user The user executing the repayment\\n   * @param amount The amount getting repaid\\n   **/\\n  function handleRepayment(address user, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the address of the incentives controller contract\\n   **/\\n  function getIncentivesController() external view returns (IAaveIncentivesController);\\n\\n  /**\\n   * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\",\"keccak256\":\"0x6241a8de6ea9ca116842a8e54b525f3372beb60ff0e8a066d2406f9e5a91848e\",\"license\":\"agpl-3.0\"},\"submodules/v2-foundry/src/interfaces/external/aave/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n  event RewardsAccrued(address indexed user, uint256 amount);\\n\\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed to,\\n    address indexed claimer,\\n    uint256 amount\\n  );\\n\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /*\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function getAssetData(address asset)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   **/\\n  function handleAction(\\n    address asset,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @param asset The asset to incentivize\\n   * @return the user index for the asset\\n   */\\n  function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function REWARD_TOKEN() external view returns (address);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function PRECISION() external view returns (uint8);\\n}\",\"keccak256\":\"0x36f7001948d174c5c6546737ca44c1b99f93162d47e8b146b769483de0e3db91\",\"license\":\"agpl-3.0\"},\"submodules/v2-foundry/src/interfaces/external/aave/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.0;\\n\\nimport {ILendingPool} from './ILendingPool.sol';\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\n\\n/**\\n * @title IInitializableAToken\\n * @notice Interface for the initialize function on AToken\\n * @author Aave\\n **/\\ninterface IInitializableAToken {\\n  /**\\n   * @dev Emitted when an aToken is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated lending pool\\n   * @param treasury The address of the treasury\\n   * @param incentivesController The address of the incentives controller for this aToken\\n   * @param aTokenDecimals the decimals of the underlying\\n   * @param aTokenName the name of the aToken\\n   * @param aTokenSymbol the symbol of the aToken\\n   * @param params A set of encoded parameters for additional initialization\\n   **/\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address treasury,\\n    address incentivesController,\\n    uint8 aTokenDecimals,\\n    string aTokenName,\\n    string aTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @dev Initializes the aToken\\n   * @param pool The address of the lending pool where this aToken will be used\\n   * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @param incentivesController The smart contract managing potential incentives distribution\\n   * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n   * @param aTokenName The name of the aToken\\n   * @param aTokenSymbol The symbol of the aToken\\n   */\\n  function initialize(\\n    ILendingPool pool,\\n    address treasury,\\n    address underlyingAsset,\\n    IAaveIncentivesController incentivesController,\\n    uint8 aTokenDecimals,\\n    string calldata aTokenName,\\n    string calldata aTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\",\"keccak256\":\"0xab946c6d2e403d07ab0caa699f0861ac74561d3c5f8ee101448e6c2a9ea12c35\",\"license\":\"agpl-3.0\"},\"submodules/v2-foundry/src/interfaces/external/aave/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.0;\\n\\nimport * as DataTypes from \\\"./DataTypes.sol\\\";\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\n\\ninterface ILendingPool {\\n  /// @dev Emitted on `deposit`.\\n  ///\\n  /// @param reserve    The address of the underlying asset of the reserve.\\n  /// @param user       The address initiating the deposit.\\n  /// @param onBehalfOf The beneficiary of the deposit, receiving the aTokens.\\n  /// @param amount     The amount deposited.\\n  /// @param referral   The referral code used.\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /// @dev Emitted on `withdraw`.\\n  ///\\n  /// @param reserve The address of the underlying asset being withdrawn.\\n  /// @param user    The address initiating the withdrawal, owner of aTokens.\\n  /// @param to      Address that will receive the underlying.\\n  /// @param amount  The amount to be withdrawn.\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n  \\n  /// @dev Emitted on `borrow` and `flashLoan` when debt needs to be opened.\\n  ///\\n  /// @param reserve        The address of the underlying asset being borrowed.\\n  /// @param user           The address of the user initiating the `borrow`, receiving the funds on `borrow` or just\\n  ///                       initiator of the transaction on `flashLoan`.\\n  /// @param onBehalfOf     The address that will be getting the debt.\\n  /// @param amount         The amount borrowed out.\\n  /// @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable.\\n  /// @param borrowRate     The numeric rate at which the user has borrowed.\\n  /// @param referral       The referral code used.\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /// @dev Emitted on `repay`.\\n  ///\\n  /// @param reserve The address of the underlying asset of the reserve.\\n  /// @param user    The beneficiary of the repayment, getting his debt reduced.\\n  /// @param repayer The address of the user initiating the `repay`, providing the funds.\\n  /// @param amount  The amount repaid.\\n  event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n  \\n  /// @dev Emitted on `swapBorrowRateMode`.\\n  ///\\n  /// @param reserve  The address of the underlying asset of the reserve\\n  /// @param user     The address of the user swapping his rate mode\\n  /// @param rateMode The rate mode that the user wants to swap to\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n  \\n  /// @dev Emitted on `setUserUseReserveAsCollateral`.\\n  ///\\n  /// @param reserve The address of the underlying asset of the reserve\\n  /// @param user    The address of the user enabling the usage as collateral\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /// @dev Emitted on `setUserUseReserveAsCollateral`.\\n  ///\\n  /// @param reserve The address of the underlying asset of the reserve\\n  /// @param user    The address of the user enabling the usage as collateral\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n  \\n  /// @dev Emitted on `rebalanceStableBorrowRate`.\\n  ///\\n  /// @param reserve The address of the underlying asset of the reserve\\n  /// @param user    The address of the user for which the rebalance has been executed\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /// @dev Emitted on `flashLoan`.\\n  ///\\n  /// @param target       The address of the flash loan receiver contract.\\n  /// @param initiator    The address initiating the flash loan.\\n  /// @param asset        The address of the asset being flash borrowed.\\n  /// @param amount       The amount flash borrowed.\\n  /// @param premium      The fee flash borrowed.\\n  /// @param referralCode The referral code used.\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /// @dev Emitted when the pause is triggered.\\n  event Paused();\\n\\n  /// @dev Emitted when the pause is lifted.\\n  event Unpaused();\\n\\n  /// @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via LendingPoolCollateral\\n  ///      manager using a DELEGATECALL.\\n  ///\\n  /// This allows to have the events in the generated ABI for LendingPool.\\n  ///\\n  /// @param collateralAsset            The address of the underlying asset used as collateral, to receive as result of\\n  ///                                   the liquidation.\\n  /// @param debtAsset                  The address of the underlying borrowed asset to be repaid with the liquidation.\\n  /// @param user                       The address of the borrower getting liquidated.\\n  /// @param debtToCover                The debt amount of borrowed `asset` the liquidator wants to cover.\\n  /// @param liquidatedCollateralAmount The amount of collateral received by the liquidator.\\n  /// @param liquidator                 The address of the liquidator\\n  /// @param receiveAToken              `true` if the liquidators wants to receive the collateral aTokens, `false` if\\n  ///                                   he wants to receive the underlying collateral asset directly.\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /// @dev Emitted when the state of a reserve is updated.\\n  ///\\n  /// NOTE: This event is actually declared in the ReserveLogic library and emitted in the `updateInterestRates`\\n  /// function. Since the function is internal, the event will actually be fired by the LendingPool contract. The event\\n  /// is therefore replicated here so it gets added to the LendingPool ABI.\\n  ///\\n  /// @param reserve             The address of the underlying asset of the reserve.\\n  /// @param liquidityRate       The new liquidity rate.\\n  /// @param stableBorrowRate    The new stable borrow rate.\\n  /// @param variableBorrowRate  The new variable borrow rate.\\n  /// @param liquidityIndex      The new liquidity index\\n  /// @param variableBorrowIndex The new variable borrow index\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /// @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n  ///\\n  /// - E.g. User deposits 100 USDC and gets in return 100 aUSDC.\\n  ///\\n  /// @param asset        The address of the underlying asset to deposit.\\n  /// @param amount       The amount to be deposited.\\n  /// @param onBehalfOf   The address that will receive the aTokens, same as msg.sender if the user wants to receive\\n  ///                     them on his own wallet, or a different address if the beneficiary of aTokens is a different\\n  ///                     wallet.\\n  /// @param referralCode Code used to register the integrator originating the operation, for potential rewards.0 if the\\n  ///                     action is executed directly by the user, without any middle-man\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /// @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned.\\n  ///\\n  /// E.g. User has 100 aUSDC, calls `withdraw` and receives 100 USDC, burning the 100 aUSDC.\\n  ///\\n  /// @param asset  The address of the underlying asset to withdraw\\n  /// @param amount The underlying amount to be withdrawn.\\n  /// @param to     Address that will receive the underlying, same as msg.sender if the user wants to receive it on his\\n  ///               own wallet, or a different address if the beneficiary is a different wallet.\\n  ///\\n  /// @return amountWithdrawn The final amount withdrawn\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256 amountWithdrawn);\\n\\n  /// @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n  ///     already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n  ///     corresponding debt token (StableDebtToken or VariableDebtToken).\\n  ///\\n  /// - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet and\\n  ///   100 stable/variable debt tokens, depending on the `interestRateMode`.\\n  ///\\n  /// @param asset            The address of the underlying asset to borrow.\\n  /// @param amount           The amount to be borrowed.\\n  /// @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n  /// @param referralCode     Code used to register the integrator originating the operation, for potential rewards.\\n  ///                         0 if the action is executed directly by the user, without any middle-man\\n  /// @param onBehalfOf       Address of the user who will receive the debt. Should be the address of the borrower\\n  ///                         itself calling the function if he wants to borrow against his own collateral, or the\\n  ///                         address of the credit delegator if he has been given credit delegation allowance\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /// @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned.\\n  ///\\n  /// - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address.\\n  ///\\n  /// @param asset      The address of the borrowed underlying asset previously borrowed.\\n  /// @param amount     The amount to repay.\\n  /// @param rateMode   The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n  /// @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the user\\n  ///                   calling the function if he wants to reduce/remove his own debt, or the address of any other\\n  ///                   other borrower whose debt should be removed.\\n  ///\\n  /// @return amountRepaid The final amount repaid.\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256 amountRepaid);\\n\\n  /// @dev Allows a borrower to swap his debt between stable and variable mode, or vice versa.\\n  ///\\n  /// @param asset    The address of the underlying asset borrowed.\\n  /// @param rateMode The rate mode that the user wants to swap to.\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /// @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n  ///\\n  /// - Users can be rebalanced if the following conditions are satisfied:\\n  ///   1. Usage ratio is above 95%\\n  ///   2. the current deposit APY is below REBALANCE_UP_THRESHOLD  maxVariableBorrowRate, which means that too much\\n  ///      has been borrowed at a stable rate and depositors are not earning enough.\\n  ///\\n  /// @param asset The address of the underlying asset borrowed.\\n  /// @param user The address of the user to be rebalanced.\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /// @dev Allows depositors to enable/disable a specific deposited asset as collateral.\\n  ///\\n  /// @param asset            The address of the underlying asset deposited.\\n  /// @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise.\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n  \\n  /// @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1.\\n  ///\\n  /// - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives a\\n  ///   proportionally amount of the `collateralAsset` plus a bonus to cover market risk.\\n  ///\\n  /// @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the\\n  ///                        liquidation.\\n  /// @param debtAsset       The address of the underlying borrowed asset to be repaid with the liquidation.\\n  /// @param user            The address of the borrower getting liquidated.\\n  /// @param debtToCover     The debt amount of borrowed `asset` the liquidator wants to cover.\\n  /// @param receiveAToken   `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants to\\n  ///                        receive the underlying collateral asset directly\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /// @dev Allows smart contracts to access the liquidity of the pool within one transaction, as long as the amount\\n  ///      taken plus a fee is returned.\\n  ///\\n  /// IMPORTANT There are security concerns for developers of flash loan receiver contracts that must be kept into\\n  /// consideration.\\n  ///\\n  /// For further details please visit https://developers.aave.com.\\n  ///\\n  /// @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver\\n  ///                        interface.\\n  /// @param assets          The addresses of the assets being flash-borrowed.\\n  /// @param amounts         The amounts amounts being flash-borrowed.\\n  /// @param modes           Types of the debt to open if the flash loan is not returned.\\n  /// @param onBehalfOf      The address  that will receive the debt in the case of using on `modes` 1 or 2.\\n  /// @param params          Variadic packed params to pass to the receiver as extra information.\\n  /// @param referralCode    Code used to register the integrator originating the operation, for potential rewards. 0\\n  ///                        if the action is executed directly by the user, without any middle-man\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /// @dev Returns the user account data across all the reserves.\\n  ///\\n  /// @param user The address of the user.\\n  ///\\n  /// @return totalCollateralETH          The total collateral in ETH of the user.\\n  /// @return totalDebtETH                The total debt in ETH of the user.\\n  /// @return availableBorrowsETH         The borrowing power left of the user.\\n  /// @return currentLiquidationThreshold The liquidation threshold of the user.\\n  /// @return ltv                         The loan to value of the user.\\n  /// @return healthFactor                The current health factor of the user.\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /// @dev Returns the configuration of the reserve.\\n  ///\\n  /// @param asset The address of the underlying asset of the reserve.\\n  ///\\n  /// @return The configuration of the reserve.\\n  function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /// @dev Returns the configuration of the user across all the reserves.\\n  ///\\n  /// @param user The user address.\\n  ///\\n  /// @return The configuration of the user.\\n  function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n  \\n  /// @dev Returns the normalized income normalized income of the reserve.\\n  ///\\n  /// @param asset The address of the underlying asset of the reserve.\\n  ///\\n  /// @return The reserve's normalized income.\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /// @dev Returns the normalized variable debt per unit of asset.`\\n  ///\\n  /// @param asset The address of the underlying asset of the reserve.\\n  ///\\n  /// @return The reserve normalized variable debt.\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /// @dev Returns the state and configuration of the reserve.\\n  ///\\n  /// @param asset The address of the underlying asset of the reserve.\\n  ///\\n  /// @return The state of the reserve.\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3ba3e6be29f45db50776edf90fcc78187bcaa85284160fbb9558477ca641a1de\",\"license\":\"agpl-3.0\"},\"submodules/v2-foundry/src/interfaces/external/aave/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.0;\\n\\n/// @title  ILendingPoolAddressesProvider\\n/// @author Aave\\n///\\n/// @dev Main registry of addresses part of or connected to the protocol, including permissioned roles.\\n///\\n/// - Acting also as factory of proxies and admin of those, so with right to change its implementations.\\n/// - Owned by the Aave Governance.\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\",\"keccak256\":\"0x1506d7df79f8019ecdccfd2338d3e98fd7936c5a3bd9aface67b020a4080b9d6\",\"license\":\"agpl-3.0\"},\"submodules/v2-foundry/src/interfaces/external/aave/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.0;\\n\\ninterface IScaledBalanceToken {\\n  /// @dev Returns the scaled balance of the user. The scaled balance is the sum of all the updated stored balance\\n  ///      divided by the reserve's liquidity index at the moment of the update.\\n  ///\\n  /// @param user The user whose balance is calculated.\\n  ///\\n  /// @return The scaled balance of the user.\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /// @dev Returns the scaled balance of the user and the scaled total supply.\\n  ///\\n  /// @param user The address of the user.\\n  ///\\n  /// @return scaledBalance     The scaled balance of the user.\\n  /// @return scaledTotalSupply The scaled balance and the scaled total supply.\\n  function getScaledUserBalanceAndSupply(address user)\\n    external view\\n    returns (\\n      uint256 scaledBalance,\\n      uint256 scaledTotalSupply\\n    );\\n\\n  /// @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index).\\n  ///\\n  /// @return The scaled total supply.\\n  function scaledTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0bb73533d797247abd3022eb3d7641f030b05afb76bff4ad1a8da1daf9f6599c\",\"license\":\"agpl-3.0\"},\"submodules/v2-foundry/src/interfaces/external/aave/IStaticAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.0;\\n\\nimport {IERC20} from \\\"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IAToken} from \\\"./IAToken.sol\\\";\\nimport {ILendingPool} from \\\"./ILendingPool.sol\\\";\\n\\n/// @title  IStaticAToken\\n/// @author Aave\\n///\\n/// @dev Wrapper token that allows to deposit tokens on the Aave protocol and receive token which balance doesn't\\n///      increase automatically, but uses an ever-increasing exchange rate. Only supporting deposits and withdrawals.\\ninterface IStaticAToken is IERC20 {\\n  struct SignatureParams {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n\\n  function LENDING_POOL() external returns (ILendingPool);\\n  function ATOKEN() external returns (IERC20);\\n  function ASSET() external returns (IERC20);\\n\\n  function _nonces(address owner) external returns (uint256);\\n\\n  function deposit(\\n    address recipient,\\n    uint256 amount,\\n    uint16 referralCode,\\n    bool fromUnderlying\\n  ) external returns (uint256);\\n\\n  function withdraw(\\n    address recipient,\\n    uint256 amount,\\n    bool toUnderlying\\n  ) external returns (uint256, uint256);\\n\\n  function withdrawDynamicAmount(\\n    address recipient,\\n    uint256 amount,\\n    bool toUnderlying\\n  ) external returns (uint256, uint256);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s,\\n    uint256 chainId\\n  ) external;\\n\\n  function metaDeposit(\\n    address depositor,\\n    address recipient,\\n    uint256 value,\\n    uint16 referralCode,\\n    bool fromUnderlying,\\n    uint256 deadline,\\n    SignatureParams calldata sigParams,\\n    uint256 chainId\\n  ) external returns (uint256);\\n\\n  function metaWithdraw(\\n    address owner,\\n    address recipient,\\n    uint256 staticAmount,\\n    uint256 dynamicAmount,\\n    bool toUnderlying,\\n    uint256 deadline,\\n    SignatureParams calldata sigParams,\\n    uint256 chainId\\n  ) external returns (uint256, uint256);\\n\\n  function dynamicBalanceOf(address account) external view returns (uint256);\\n\\n  /// @dev Converts a static amount (scaled balance on aToken) to the aToken/underlying value, using the current\\n  ///      liquidity index on Aave.\\n  ///\\n  /// @param amount The amount to convert from.\\n  ///\\n  /// @return dynamicAmount The dynamic amount.\\n  function staticToDynamicAmount(uint256 amount) external view returns (uint256 dynamicAmount);\\n\\n  /// @dev Converts an aToken or underlying amount to the what it is denominated on the aToken as scaled balance,\\n  ///      function of the principal and the liquidity index.\\n  ///\\n  /// @param amount The amount to convert from.\\n  ///\\n  /// @return staticAmount The static (scaled) amount.\\n  function dynamicToStaticAmount(uint256 amount) external view returns (uint256 staticAmount);\\n\\n  /// @dev Returns the Aave liquidity index of the underlying aToken, denominated rate here as it can be considered as\\n  ///      an ever-increasing exchange rate.\\n  ///\\n  /// @return The rate.\\n  function rate() external view returns (uint256);\\n\\n  /// @dev Function to return a dynamic domain separator, in order to be compatible with forks changing chainId.\\n  ///\\n  /// @param chainId The chain id.\\n  ///\\n  /// @return The domain separator.\\n  function getDomainSeparator(uint256 chainId) external returns (bytes32);\\n}\",\"keccak256\":\"0x9694ac7d67ba607c8a2240d2dec8da571ebc3285f23ab4bb7517897dca41b609\",\"license\":\"agpl-3.0\"},\"submodules/v2-foundry/src/libraries/TokenUtils.sol\":{\"content\":\"pragma solidity ^0.8.13;\\n\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IERC20Burnable.sol\\\";\\nimport \\\"../interfaces/IERC20Mintable.sol\\\";\\n\\n/// @title  TokenUtils\\n/// @author Alchemix Finance\\nlibrary TokenUtils {\\n    /// @notice An error used to indicate that a call to an ERC20 contract failed.\\n    ///\\n    /// @param target  The target address.\\n    /// @param success If the call to the token was a success.\\n    /// @param data    The resulting data from the call. This is error data when the call was not a success. Otherwise,\\n    ///                this is malformed data when the call was a success.\\n    error ERC20CallFailed(address target, bool success, bytes data);\\n\\n    /// @dev A safe function to get the decimals of an ERC20 token.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\\n    ///\\n    /// @param token The target token.\\n    ///\\n    /// @return The amount of decimals of the token.\\n    function expectDecimals(address token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n\\n        if (token.code.length == 0 || !success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    /// @dev Gets the balance of tokens held by an account.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\\n    ///\\n    /// @param token   The token to check the balance of.\\n    /// @param account The address of the token holder.\\n    ///\\n    /// @return The balance of the tokens held by an account.\\n    function safeBalanceOf(address token, address account) internal view returns (uint256) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20.balanceOf.selector, account)\\n        );\\n\\n        if (token.code.length == 0 || !success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Transfers tokens to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer failed or returns an unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransfer(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, recipient, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Approves tokens for the smart contract.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the approval fails or returns an unexpected value.\\n    ///\\n    /// @param token   The token to approve.\\n    /// @param spender The contract to spend the tokens.\\n    /// @param value   The amount of tokens to approve.\\n    function safeApprove(address token, address spender, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.approve.selector, spender, value)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Transfer tokens from one address to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer fails or returns an unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param owner     The address of the owner.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransferFrom(address token, address owner, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, owner, recipient, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Mints tokens to an address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the mint fails or returns an unexpected value.\\n    ///\\n    /// @param token     The token to mint.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to mint.\\n    function safeMint(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Mintable.mint.selector, recipient, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Burns tokens.\\n    ///\\n    /// Reverts with a `CallFailed` error if execution of the burn fails or returns an unexpected value.\\n    ///\\n    /// @param token  The token to burn.\\n    /// @param amount The amount of tokens to burn.\\n    function safeBurn(address token, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Burnable.burn.selector, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Burns tokens from its total supply.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the burn fails or returns an unexpected value.\\n    ///\\n    /// @param token  The token to burn.\\n    /// @param owner  The owner of the tokens.\\n    /// @param amount The amount of tokens to burn.\\n    function safeBurnFrom(address token, address owner, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Burnable.burnFrom.selector, owner, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n}\",\"keccak256\":\"0xc5baa0feb362479be13700eafb1bc8eee1ab10cac51bc9b317b721b5d2dd228c\"}},\"version\":1}",
  "bytecode": "0x60806040526000805460ff191660011790553480156200001e57600080fd5b5060405162000f7f38038062000f7f83398101604081905262000041916200032a565b805160008054610100600160a81b0319166101006001600160a01b0393841602179055602080830151600180546001600160a01b031990811692851692831790915560408501516002805490921694169384179055620000af929160001990620000f3811b6200046517901c565b600154620000d2906001600160a01b031662000214602090811b6200057117901c565b600260146101000a81548160ff021916908360ff1602179055505062000499565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691620001519190620003de565b6000604051808303816000865af19150503d806000811462000190576040519150601f19603f3d011682016040523d82523d6000602084013e62000195565b606091505b5091509150846001600160a01b03163b60001480620001b2575081155b80620001dd5750805115801590620001dd575080806020019051810190620001db9190620003fc565b155b156200020d5784828260405163e7e40b5b60e01b8152600401620002049392919062000427565b60405180910390fd5b5050505050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b038616916200025c9190620003de565b600060405180830381855afa9150503d806000811462000299576040519150601f19603f3d011682016040523d82523d6000602084013e6200029e565b606091505b5091509150836001600160a01b03163b60001480620002bb575081155b80620002c8575060208151105b15620002ef5783828260405163e7e40b5b60e01b8152600401620002049392919062000427565b8080602001905181019062000305919062000474565b949350505050565b80516001600160a01b03811681146200032557600080fd5b919050565b6000606082840312156200033d57600080fd5b604051606081016001600160401b03811182821017156200036e57634e487b7160e01b600052604160045260246000fd5b6040526200037c836200030d565b81526200038c602084016200030d565b60208201526200039f604084016200030d565b60408201529392505050565b60005b83811015620003c8578181015183820152602001620003ae565b83811115620003d8576000848401525b50505050565b60008251620003f2818460208701620003ab565b9190910192915050565b6000602082840312156200040f57600080fd5b815180151581146200042057600080fd5b9392505050565b60018060a01b0384168152821515602082015260606040820152600082518060608401526200045e816080850160208701620003ab565b601f01601f191691909101608001949350505050565b6000602082840312156200048757600080fd5b815160ff811681146200042057600080fd5b610ad680620004a96000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80637647691d1161005b5780637647691d146101355780638de925f614610148578063a035b1fe14610160578063fc0c546a1461016857600080fd5b806313bac8201461008d5780632495a599146100b35780633b97e856146100de57806354fd4d5014610104575b600080fd5b6100a061009b3660046107fc565b61017b565b6040519081526020015b60405180910390f35b6002546100c6906001600160a01b031681565b6040516001600160a01b0390911681526020016100aa565b6002546100f290600160a01b900460ff1681565b60405160ff90911681526020016100aa565b610128604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516100aa9190610894565b6100a06101433660046107fc565b610288565b6000546100c69061010090046001600160a01b031681565b6100a06103d3565b6001546100c6906001600160a01b031681565b600061018561065f565b60005461010090046001600160a01b031633146101da5760405163973d02cb60e01b815260206004820152600d60248201526c139bdd08185b18da195b5a5cdd609a1b60448201526064015b60405180910390fd5b6002546101f2906001600160a01b03163330866106d4565b60018054604051632f2cab8760e01b81526001600160a01b03858116600483015260248201879052600060448301526064820193909352911690632f2cab87906084016020604051808303816000875af1158015610254573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027891906108ae565b90506102826107e9565b92915050565b600061029261065f565b60005461010090046001600160a01b031633146102e25760405163973d02cb60e01b815260206004820152600d60248201526c139bdd08185b18da195b5a5cdd609a1b60448201526064016101d1565b6001546102fa906001600160a01b03163330866106d4565b6001805460405163ead5d35960e01b81526001600160a01b0385811660048301526024820187905260448201939093526000928392169063ead5d3599060640160408051808303816000875af1158015610358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037c91906108c7565b915091508482146103c85760405163c50656df60e01b8152602060048201526015602482015274082dadeeadce840c4eae4dce840dad2e6dac2e8c6d605b1b60448201526064016101d1565b9150506102826107e9565b6001546002546000916001600160a01b03169063f57d0b409061040190600160a01b900460ff16600a6109e5565b6040518263ffffffff1660e01b815260040161041f91815260200190565b602060405180830381865afa15801561043c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046091906108ae565b905090565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916104c191906109f4565b6000604051808303816000865af19150503d80600081146104fe576040519150601f19603f3d011682016040523d82523d6000602084013e610503565b606091505b5091509150846001600160a01b03163b6000148061051f575081155b8061054657508051158015906105465750808060200190518101906105449190610a10565b155b1561056a5784828260405163e7e40b5b60e01b81526004016101d193929190610a32565b5050505050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b038616916105b791906109f4565b600060405180830381855afa9150503d80600081146105f2576040519150601f19603f3d011682016040523d82523d6000602084013e6105f7565b606091505b5091509150836001600160a01b03163b60001480610613575081155b8061061f575060208151105b156106435783828260405163e7e40b5b60e01b81526004016101d193929190610a32565b808060200190518101906106579190610a67565b949350505050565b600160005460ff16600281111561067857610678610a8a565b146106bd5760405163c50656df60e01b8152602060048201526014602482015273131bd8dac8185b1c9958591e4818db185a5b595960621b60448201526064016101d1565b600080546002919060ff19166001835b0217905550565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161073891906109f4565b6000604051808303816000865af19150503d8060008114610775576040519150601f19603f3d011682016040523d82523d6000602084013e61077a565b606091505b5091509150856001600160a01b03163b60001480610796575081155b806107bd57508051158015906107bd5750808060200190518101906107bb9190610a10565b155b156107e15785828260405163e7e40b5b60e01b81526004016101d193929190610a32565b505050505050565b600080546001919060ff191682806106cd565b6000806040838503121561080f57600080fd5b8235915060208301356001600160a01b038116811461082d57600080fd5b809150509250929050565b60005b8381101561085357818101518382015260200161083b565b83811115610862576000848401525b50505050565b60008151808452610880816020860160208601610838565b601f01601f19169290920160200192915050565b6020815260006108a76020830184610868565b9392505050565b6000602082840312156108c057600080fd5b5051919050565b600080604083850312156108da57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561093c578160001904821115610922576109226108eb565b8085161561092f57918102915b93841c9390800290610906565b509250929050565b60008261095357506001610282565b8161096057506000610282565b816001811461097657600281146109805761099c565b6001915050610282565b60ff841115610991576109916108eb565b50506001821b610282565b5060208310610133831016604e8410600b84101617156109bf575081810a610282565b6109c98383610901565b80600019048211156109dd576109dd6108eb565b029392505050565b60006108a760ff841683610944565b60008251610a06818460208701610838565b9190910192915050565b600060208284031215610a2257600080fd5b815180151581146108a757600080fd5b6001600160a01b03841681528215156020820152606060408201819052600090610a5e90830184610868565b95945050505050565b600060208284031215610a7957600080fd5b815160ff811681146108a757600080fd5b634e487b7160e01b600052602160045260246000fdfea264697066735822122093813da589be8a2a31843d44716c561fa89936ab15b9d9c3da345a99d2e8288864736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80637647691d1161005b5780637647691d146101355780638de925f614610148578063a035b1fe14610160578063fc0c546a1461016857600080fd5b806313bac8201461008d5780632495a599146100b35780633b97e856146100de57806354fd4d5014610104575b600080fd5b6100a061009b3660046107fc565b61017b565b6040519081526020015b60405180910390f35b6002546100c6906001600160a01b031681565b6040516001600160a01b0390911681526020016100aa565b6002546100f290600160a01b900460ff1681565b60405160ff90911681526020016100aa565b610128604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516100aa9190610894565b6100a06101433660046107fc565b610288565b6000546100c69061010090046001600160a01b031681565b6100a06103d3565b6001546100c6906001600160a01b031681565b600061018561065f565b60005461010090046001600160a01b031633146101da5760405163973d02cb60e01b815260206004820152600d60248201526c139bdd08185b18da195b5a5cdd609a1b60448201526064015b60405180910390fd5b6002546101f2906001600160a01b03163330866106d4565b60018054604051632f2cab8760e01b81526001600160a01b03858116600483015260248201879052600060448301526064820193909352911690632f2cab87906084016020604051808303816000875af1158015610254573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027891906108ae565b90506102826107e9565b92915050565b600061029261065f565b60005461010090046001600160a01b031633146102e25760405163973d02cb60e01b815260206004820152600d60248201526c139bdd08185b18da195b5a5cdd609a1b60448201526064016101d1565b6001546102fa906001600160a01b03163330866106d4565b6001805460405163ead5d35960e01b81526001600160a01b0385811660048301526024820187905260448201939093526000928392169063ead5d3599060640160408051808303816000875af1158015610358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037c91906108c7565b915091508482146103c85760405163c50656df60e01b8152602060048201526015602482015274082dadeeadce840c4eae4dce840dad2e6dac2e8c6d605b1b60448201526064016101d1565b9150506102826107e9565b6001546002546000916001600160a01b03169063f57d0b409061040190600160a01b900460ff16600a6109e5565b6040518263ffffffff1660e01b815260040161041f91815260200190565b602060405180830381865afa15801561043c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046091906108ae565b905090565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916104c191906109f4565b6000604051808303816000865af19150503d80600081146104fe576040519150601f19603f3d011682016040523d82523d6000602084013e610503565b606091505b5091509150846001600160a01b03163b6000148061051f575081155b8061054657508051158015906105465750808060200190518101906105449190610a10565b155b1561056a5784828260405163e7e40b5b60e01b81526004016101d193929190610a32565b5050505050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b038616916105b791906109f4565b600060405180830381855afa9150503d80600081146105f2576040519150601f19603f3d011682016040523d82523d6000602084013e6105f7565b606091505b5091509150836001600160a01b03163b60001480610613575081155b8061061f575060208151105b156106435783828260405163e7e40b5b60e01b81526004016101d193929190610a32565b808060200190518101906106579190610a67565b949350505050565b600160005460ff16600281111561067857610678610a8a565b146106bd5760405163c50656df60e01b8152602060048201526014602482015273131bd8dac8185b1c9958591e4818db185a5b595960621b60448201526064016101d1565b600080546002919060ff19166001835b0217905550565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161073891906109f4565b6000604051808303816000865af19150503d8060008114610775576040519150601f19603f3d011682016040523d82523d6000602084013e61077a565b606091505b5091509150856001600160a01b03163b60001480610796575081155b806107bd57508051158015906107bd5750808060200190518101906107bb9190610a10565b155b156107e15785828260405163e7e40b5b60e01b81526004016101d193929190610a32565b505050505050565b600080546001919060ff191682806106cd565b6000806040838503121561080f57600080fd5b8235915060208301356001600160a01b038116811461082d57600080fd5b809150509250929050565b60005b8381101561085357818101518382015260200161083b565b83811115610862576000848401525b50505050565b60008151808452610880816020860160208601610838565b601f01601f19169290920160200192915050565b6020815260006108a76020830184610868565b9392505050565b6000602082840312156108c057600080fd5b5051919050565b600080604083850312156108da57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561093c578160001904821115610922576109226108eb565b8085161561092f57918102915b93841c9390800290610906565b509250929050565b60008261095357506001610282565b8161096057506000610282565b816001811461097657600281146109805761099c565b6001915050610282565b60ff841115610991576109916108eb565b50506001821b610282565b5060208310610133831016604e8410600b84101617156109bf575081810a610282565b6109c98383610901565b80600019048211156109dd576109dd6108eb565b029392505050565b60006108a760ff841683610944565b60008251610a06818460208701610838565b9190910192915050565b600060208284031215610a2257600080fd5b815180151581146108a757600080fd5b6001600160a01b03841681528215156020820152606060408201819052600090610a5e90830184610868565b95945050505050565b600060208284031215610a7957600080fd5b815160ff811681146108a757600080fd5b634e487b7160e01b600052602160045260246000fdfea264697066735822122093813da589be8a2a31843d44716c561fa89936ab15b9d9c3da345a99d2e8288864736f6c634300080d0033",
  "devdoc": {
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "params": {
            "data": "The resulting data from the call. This is error data when the call was not a success. Otherwise,                this is malformed data when the call was a success.",
            "success": "If the call to the token was a success.",
            "target": "The target address."
          }
        }
      ],
      "IllegalState(string)": [
        {
          "params": {
            "message": "The error message."
          }
        }
      ],
      "Unauthorized(string)": [
        {
          "params": {
            "message": "The error message."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "price()": {
        "returns": {
          "_0": "The price."
        }
      },
      "unwrap(uint256,address)": {
        "params": {
          "amount": "The amount of yield-tokens to redeem.",
          "recipient": "The recipient of the resulting underlying-tokens."
        },
        "returns": {
          "_0": "The amount of underlying tokens unwrapped to `recipient`."
        }
      },
      "wrap(uint256,address)": {
        "params": {
          "amount": "The amount of the underlying token to wrap.",
          "recipient": "The address which will receive the yield tokens."
        },
        "returns": {
          "_0": "The amount of yield tokens minted to `recipient`."
        }
      }
    },
    "stateVariables": {
      "token": {
        "return": "The address of the yield token.",
        "returns": {
          "_0": "The address of the yield token."
        }
      },
      "underlyingToken": {
        "return": "The address of the underlying token.",
        "returns": {
          "_0": "The address of the underlying token."
        }
      },
      "version": {
        "return": "The version.",
        "returns": {
          "_0": "The version."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "notice": "An error used to indicate that a call to an ERC20 contract failed."
        }
      ],
      "IllegalState(string)": [
        {
          "notice": "An error used to indicate that a function has encountered an unrecoverable state."
        }
      ],
      "Unauthorized(string)": [
        {
          "notice": "An error used to indicate that a message sender tried to execute a privileged function."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "price()": {
        "notice": "Gets the number of underlying tokens that a single whole yield token is redeemable         for."
      },
      "token()": {
        "notice": "Gets the address of the yield token that this adapter supports."
      },
      "underlyingToken()": {
        "notice": "Gets the address of the underlying token that the yield token wraps."
      },
      "unwrap(uint256,address)": {
        "notice": "Unwraps `amount` yield tokens into the underlying token."
      },
      "version()": {
        "notice": "Gets the current version."
      },
      "wrap(uint256,address)": {
        "notice": "Wraps `amount` underlying tokens into the yield token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 35998,
        "contract": "submodules/v2-foundry/src/adapters/aave/AAVETokenAdapter.sol:AAVETokenAdapter",
        "label": "_lockState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(State)35992"
      },
      {
        "astId": 34060,
        "contract": "submodules/v2-foundry/src/adapters/aave/AAVETokenAdapter.sol:AAVETokenAdapter",
        "label": "alchemist",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 34063,
        "contract": "submodules/v2-foundry/src/adapters/aave/AAVETokenAdapter.sol:AAVETokenAdapter",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 34066,
        "contract": "submodules/v2-foundry/src/adapters/aave/AAVETokenAdapter.sol:AAVETokenAdapter",
        "label": "underlyingToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 34068,
        "contract": "submodules/v2-foundry/src/adapters/aave/AAVETokenAdapter.sol:AAVETokenAdapter",
        "label": "tokenDecimals",
        "offset": 20,
        "slot": "2",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(State)35992": {
        "encoding": "inplace",
        "label": "enum MutexLock.State",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}