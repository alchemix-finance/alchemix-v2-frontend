{
  "address": "0x80Ca99D65A8855Cb20e44A5e9B6C6AbF71E3739d",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "alchemist",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingToken",
              "type": "address"
            }
          ],
          "internalType": "struct InitializationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ERC20CallFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "IllegalState",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "UnsupportedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "alchemist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "unwrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "wrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x03a58f172c49b0467bc2512b9416a6383d316e9767bc31884ae2f113244ea1bb",
  "receipt": {
    "to": null,
    "from": "0x526D542FFBAe26D510cD610b8050438586fd203C",
    "contractAddress": "0x80Ca99D65A8855Cb20e44A5e9B6C6AbF71E3739d",
    "transactionIndex": 21,
    "gasUsed": "970220",
    "logsBloom": "0x
    "blockHash": "0x4dbc1c5ff68739806438173caf3ded81aee259ca725459f16c9bf0bc73582442",
    "transactionHash": "0x03a58f172c49b0467bc2512b9416a6383d316e9767bc31884ae2f113244ea1bb",
    "logs": [],
    "blockNumber": 15444212,
    "cumulativeGasUsed": "2804778",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "alchemist": "0x062Bf725dC4cDF947aa79Ca2aaCCD4F385b13b5c",
      "token": "0xae78736Cd615f374D3085123A210448E74Fc6393",
      "underlyingToken": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
    }
  ],
  "solcInputHash": "bdf2e0720d713e861cf1b036185e3f4e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"alchemist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"internalType\":\"struct InitializationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ERC20CallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"IllegalState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"UnsupportedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"alchemist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"params\":{\"data\":\"The resulting data from the call. This is error data when the call was not a                success. Otherwise, this is malformed data when the call was a success.\",\"success\":\"If the call to the token was a success.\",\"target\":\"The target address.\"}}],\"IllegalState(string)\":[{\"params\":{\"message\":\"The error message.\"}}],\"Unauthorized(string)\":[{\"params\":{\"message\":\"The error message.\"}}],\"UnsupportedOperation(string)\":[{\"params\":{\"message\":\"The error message.\"}}]},\"kind\":\"dev\",\"methods\":{\"price()\":{\"returns\":{\"_0\":\"The price.\"}},\"unwrap(uint256,address)\":{\"params\":{\"amount\":\"The amount of yield-tokens to redeem.\",\"recipient\":\"The recipient of the resulting underlying-tokens.\"},\"returns\":{\"_0\":\"The amount of underlying tokens unwrapped to `recipient`.\"}},\"wrap(uint256,address)\":{\"params\":{\"amount\":\"The amount of the underlying token to wrap.\",\"recipient\":\"The address which will receive the yield tokens.\"},\"returns\":{\"_0\":\"The amount of yield tokens minted to `recipient`.\"}}},\"stateVariables\":{\"token\":{\"return\":\"The address of the yield token.\",\"returns\":{\"_0\":\"The address of the yield token.\"}},\"underlyingToken\":{\"return\":\"The address of the underlying token.\",\"returns\":{\"_0\":\"The address of the underlying token.\"}},\"version\":{\"return\":\"The version.\",\"returns\":{\"_0\":\"The version.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"notice\":\"An error used to indicate that a call to an ERC20 contract failed.\"}],\"IllegalState(string)\":[{\"notice\":\"An error used to indicate that a function has encountered an unrecoverable state.\"}],\"Unauthorized(string)\":[{\"notice\":\"An error used to indicate that a message sender tried to execute a privileged function.\"}],\"UnsupportedOperation(string)\":[{\"notice\":\"An error used to indicate that an operation is unsupported.\"}]},\"kind\":\"user\",\"methods\":{\"price()\":{\"notice\":\"Gets the number of underlying tokens that a single whole yield token is redeemable         for.\"},\"token()\":{\"notice\":\"Gets the address of the yield token that this adapter supports.\"},\"underlyingToken()\":{\"notice\":\"Gets the address of the underlying token that the yield token wraps.\"},\"unwrap(uint256,address)\":{\"notice\":\"Unwraps `amount` yield tokens into the underlying token.\"},\"version()\":{\"notice\":\"Gets the current version.\"},\"wrap(uint256,address)\":{\"notice\":\"Wraps `amount` underlying tokens into the yield token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"submodules/v2-foundry/src/adapters/rocket/RETHAdapterV1.sol\":\"RETHAdapterV1\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363631393135353335373635\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"submodules/v2-foundry/src/adapters/rocket/RETHAdapterV1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport {IERC20} from \\\"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {\\n    IllegalArgument,\\n    IllegalState,\\n    Unauthorized,\\n    UnsupportedOperation\\n} from \\\"../../base/ErrorMessages.sol\\\";\\n\\nimport {MutexLock} from \\\"../../base/MutexLock.sol\\\";\\n\\nimport {SafeERC20} from \\\"../../libraries/SafeERC20.sol\\\";\\nimport {RocketPool} from \\\"../../libraries/RocketPool.sol\\\";\\n\\nimport {ITokenAdapter} from \\\"../../interfaces/ITokenAdapter.sol\\\";\\nimport {IWETH9} from \\\"../../interfaces/external/IWETH9.sol\\\";\\nimport {IRETH} from \\\"../../interfaces/external/rocket/IRETH.sol\\\";\\nimport {IRocketStorage} from \\\"../../interfaces/external/rocket/IRocketStorage.sol\\\";\\nimport {ISwapRouter} from \\\"../../interfaces/external/uniswap/ISwapRouter.sol\\\";\\n\\nstruct InitializationParams {\\n    address alchemist;\\n    address token;\\n    address underlyingToken;\\n}\\n\\ncontract RETHAdapterV1 is ITokenAdapter, MutexLock {\\n    using RocketPool for IRocketStorage;\\n\\n    address constant uniswapRouterV3 = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\\n\\n    string public override version = \\\"1.1.0\\\";\\n\\n    address public immutable alchemist;\\n    address public immutable override token;\\n    address public immutable override underlyingToken;\\n\\n    constructor(InitializationParams memory params) {\\n        alchemist       = params.alchemist;\\n        token           = params.token;\\n        underlyingToken = params.underlyingToken;\\n    }\\n\\n    /// @dev Checks that the message sender is the alchemist that the adapter is bound to.\\n    modifier onlyAlchemist() {\\n        if (msg.sender != alchemist) {\\n            revert Unauthorized(\\\"Not alchemist\\\");\\n        }\\n        _;\\n    }\\n\\n    receive() external payable {\\n        if (msg.sender != underlyingToken && msg.sender != token) {\\n            revert Unauthorized(\\\"Payments only permitted from WETH or rETH\\\");\\n        }\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function price() external view returns (uint256) {\\n        return IRETH(token).getEthValue(10**SafeERC20.expectDecimals(token));\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function wrap(\\n        uint256 amount,\\n        address recipient\\n    ) external onlyAlchemist returns (uint256) {\\n        amount; recipient; // Silence, compiler!\\n\\n        // NOTE: Wrapping is currently unsupported because the Rocket Pool requires that all\\n        //       addresses that mint rETH to wait approximately 24 hours before transferring\\n        //       tokens. In the future when the minting restriction is removed, an adapter\\n        //       that supports this operation will be written.\\n        //\\n        //       We had considered exchanging ETH for rETH here, however, the liquidity on the\\n        //       majority of the pools is too limited. Also, the landscape of those pools are very\\n        //       likely to change in the coming months. We recommend that users exchange for\\n        //       rETH on a pool of their liking or mint rETH and then deposit it at a later time.\\n        revert UnsupportedOperation(\\\"Wrapping is not supported\\\");\\n    }\\n\\n    // @inheritdoc ITokenAdapter\\n    function unwrap(\\n        uint256 amount,\\n        address recipient\\n    ) external lock onlyAlchemist returns (uint256) {\\n        // Transfer the rETH from the message sender.\\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), amount);\\n\\n        uint256 receivedEth = 0;\\n\\n        uint256 ethValue = IRETH(token).getEthValue(amount);\\n        if (IRETH(token).getTotalCollateral() >= ethValue) {\\n            // Burn the rETH to receive ETH.\\n            uint256 startingEthBalance = address(this).balance;\\n            IRETH(token).burn(amount);\\n            receivedEth = address(this).balance - startingEthBalance;\\n\\n            // Wrap the ETH that we received from the burn.\\n            IWETH9(underlyingToken).deposit{value: receivedEth}();\\n        } else {\\n            // Set up and execute uniswap exchange\\n            SafeERC20.safeApprove(token, uniswapRouterV3, amount);\\n            ISwapRouter.ExactInputSingleParams memory params =\\n                ISwapRouter.ExactInputSingleParams({\\n                    tokenIn: token,\\n                    tokenOut: underlyingToken,\\n                    fee: 3000,\\n                    recipient: address(this),\\n                    deadline: block.timestamp,\\n                    amountIn: amount,\\n                    amountOutMinimum: 0,\\n                    sqrtPriceLimitX96: 0\\n                });\\n\\n            receivedEth = ISwapRouter(uniswapRouterV3).exactInputSingle(params);\\n        }\\n\\n        // Transfer the tokens to the recipient.\\n        SafeERC20.safeTransfer(underlyingToken, recipient, receivedEth);\\n\\n        return receivedEth;\\n    }\\n}\",\"keccak256\":\"0x72c4a8e03d87e54ca895ad0cad3bc33b84a3694d2c933d44ab3e569f6d50c8cd\",\"license\":\"GPL-3.0-or-later\"},\"submodules/v2-foundry/src/base/ErrorMessages.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\n/// @notice An error used to indicate that an argument passed to a function is illegal or\\n///         inappropriate.\\n///\\n/// @param message The error message.\\nerror IllegalArgument(string message);\\n\\n/// @notice An error used to indicate that a function has encountered an unrecoverable state.\\n///\\n/// @param message The error message.\\nerror IllegalState(string message);\\n\\n/// @notice An error used to indicate that an operation is unsupported.\\n///\\n/// @param message The error message.\\nerror UnsupportedOperation(string message);\\n\\n/// @notice An error used to indicate that a message sender tried to execute a privileged function.\\n///\\n/// @param message The error message.\\nerror Unauthorized(string message);\",\"keccak256\":\"0x302087c36048c360cbd3192e41344d8705d7a50fdb97c8b77d45a5ff503dd264\",\"license\":\"UNLICENSED\"},\"submodules/v2-foundry/src/base/MutexLock.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.13;\\n\\nimport {IllegalState} from \\\"./ErrorMessages.sol\\\";\\n\\n/// @title  Mutex\\n/// @author Alchemix Finance\\n///\\n/// @notice Provides a mutual exclusion lock for implementing contracts.\\nabstract contract MutexLock {\\n    enum State {\\n        RESERVED,\\n        UNLOCKED,\\n        LOCKED\\n    }\\n\\n    /// @notice The lock state.\\n    State private _lockState = State.UNLOCKED;\\n\\n    /// @dev A modifier which acquires the mutex.\\n    modifier lock() {\\n        _claimLock();\\n\\n        _;\\n\\n        _freeLock();\\n    }\\n\\n    /// @dev Gets if the mutex is locked.\\n    ///\\n    /// @return if the mutex is locked.\\n    function _isLocked() internal view returns (bool) {\\n        return _lockState == State.LOCKED;\\n    }\\n\\n    /// @dev Claims the lock. If the lock is already claimed, then this will revert.\\n    function _claimLock() internal {\\n        // Check that the lock has not been claimed yet.\\n        if (_lockState != State.UNLOCKED) {\\n            revert IllegalState(\\\"Lock already claimed\\\");\\n        }\\n\\n        // Claim the lock.\\n        _lockState = State.LOCKED;\\n    }\\n\\n    /// @dev Frees the lock.\\n    function _freeLock() internal {\\n        _lockState = State.UNLOCKED;\\n    }\\n}\",\"keccak256\":\"0xe3aab21deaf0ce1c795f164630a6e495649779342e0f1f480efac4ff53bb0619\",\"license\":\"GPL-2.0-or-later\"},\"submodules/v2-foundry/src/interfaces/IERC20Metadata.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  IERC20Metadata\\n/// @author Alchemix Finance\\ninterface IERC20Metadata {\\n    /// @notice Gets the name of the token.\\n    ///\\n    /// @return The name.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Gets the symbol of the token.\\n    ///\\n    /// @return The symbol.\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice Gets the number of decimals that the token has.\\n    ///\\n    /// @return The number of decimals.\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x2d5429bdf25a43d40c7e23f3e27dd595585f33b1aaed4aabe8e76e681e15702b\"},\"submodules/v2-foundry/src/interfaces/ITokenAdapter.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  ITokenAdapter\\n/// @author Alchemix Finance\\ninterface ITokenAdapter {\\n    /// @notice Gets the current version.\\n    ///\\n    /// @return The version.\\n    function version() external view returns (string memory);\\n\\n    /// @notice Gets the address of the yield token that this adapter supports.\\n    ///\\n    /// @return The address of the yield token.\\n    function token() external view returns (address);\\n\\n    /// @notice Gets the address of the underlying token that the yield token wraps.\\n    ///\\n    /// @return The address of the underlying token.\\n    function underlyingToken() external view returns (address);\\n\\n    /// @notice Gets the number of underlying tokens that a single whole yield token is redeemable\\n    ///         for.\\n    ///\\n    /// @return The price.\\n    function price() external view returns (uint256);\\n\\n    /// @notice Wraps `amount` underlying tokens into the yield token.\\n    ///\\n    /// @param amount    The amount of the underlying token to wrap.\\n    /// @param recipient The address which will receive the yield tokens.\\n    ///\\n    /// @return amountYieldTokens The amount of yield tokens minted to `recipient`.\\n    function wrap(uint256 amount, address recipient)\\n        external\\n        returns (uint256 amountYieldTokens);\\n\\n    /// @notice Unwraps `amount` yield tokens into the underlying token.\\n    ///\\n    /// @param amount    The amount of yield-tokens to redeem.\\n    /// @param recipient The recipient of the resulting underlying-tokens.\\n    ///\\n    /// @return amountUnderlyingTokens The amount of underlying tokens unwrapped to `recipient`.\\n    function unwrap(uint256 amount, address recipient)\\n        external\\n        returns (uint256 amountUnderlyingTokens);\\n}\",\"keccak256\":\"0x98a839c3d1673e410d674c0fd05ff6d64203f9818224d4c3258e21d91b96460a\"},\"submodules/v2-foundry/src/interfaces/external/IWETH9.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../IERC20Metadata.sol\\\";\\n\\n/// @title IWETH9\\ninterface IWETH9 is IERC20, IERC20Metadata {\\n  /// @notice Deposits `msg.value` ethereum into the contract and mints `msg.value` tokens.\\n  function deposit() external payable;\\n\\n  /// @notice Burns `amount` tokens to retrieve `amount` ethereum from the contract.\\n  ///\\n  /// @dev This version of WETH utilizes the `transfer` function which hard codes the amount of gas\\n  ///      that is allowed to be utilized to be exactly 2300 when receiving ethereum.\\n  ///\\n  /// @param amount The amount of tokens to burn.\\n  function withdraw(uint256 amount) external;\\n}\",\"keccak256\":\"0x6df1a375b5b39f03ee997b1509f296c9ff3e66a96afbbe6c5924d5b4ac74db31\"},\"submodules/v2-foundry/src/interfaces/external/rocket/IRETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.5.0;\\n\\nimport {IERC20} from \\\"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IERC20Metadata} from \\\"../../IERC20Metadata.sol\\\";\\n\\ninterface IRETH is IERC20, IERC20Metadata {\\n    function getEthValue(uint256 amount) external view returns (uint256);\\n    function getRethValue(uint256 amount) external view returns (uint256);\\n    function getExchangeRate() external view returns (uint256);\\n    function getTotalCollateral() external view returns (uint256);\\n    function getCollateralRate() external view returns (uint256);\\n    function depositExcess() external payable;\\n    function depositExcessCollateral() external;\\n    function mint(uint256 amount, address receiver) external;\\n    function burn(uint256 amount) external;\\n}\",\"keccak256\":\"0xc1a731eda1aec6792c4af9ace2bb167c9bfd143d1051c4febeafabdbeaa7aed8\",\"license\":\"GPL-3.0-only\"},\"submodules/v2-foundry/src/interfaces/external/rocket/IRocketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.5.0;\\n\\ninterface IRocketStorage {\\n    function getDeployedStatus() external view returns (bool);\\n    function getGuardian() external view returns(address);\\n    function setGuardian(address value) external;\\n    function confirmGuardian() external;\\n\\n    function getAddress(bytes32 key) external view returns (address);\\n    function getUint(bytes32 key) external view returns (uint);\\n    function getString(bytes32 key) external view returns (string memory);\\n    function getBytes(bytes32 key) external view returns (bytes memory);\\n    function getBool(bytes32 key) external view returns (bool);\\n    function getInt(bytes32 key) external view returns (int);\\n    function getBytes32(bytes32 key) external view returns (bytes32);\\n\\n    function setAddress(bytes32 key, address value) external;\\n    function setUint(bytes32 key, uint value) external;\\n    function setString(bytes32 key, string calldata value) external;\\n    function setBytes(bytes32 key, bytes calldata value) external;\\n    function setBool(bytes32 key, bool value) external;\\n    function setInt(bytes32 key, int value) external;\\n    function setBytes32(bytes32 key, bytes32 value) external;\\n\\n    function deleteAddress(bytes32 key) external;\\n    function deleteUint(bytes32 key) external;\\n    function deleteString(bytes32 key) external;\\n    function deleteBytes(bytes32 key) external;\\n    function deleteBool(bytes32 key) external;\\n    function deleteInt(bytes32 key) external;\\n    function deleteBytes32(bytes32 key) external;\\n\\n    function addUint(bytes32 key, uint256 amount) external;\\n    function subUint(bytes32 key, uint256 amount) external;\\n\\n    function getNodeWithdrawalAddress(address nodeAddress) external view returns (address);\\n    function getNodePendingWithdrawalAddress(address nodeAddress) external view returns (address);\\n    function setWithdrawalAddress(address nodeAddress, address newWithdrawalAddress, bool confirm) external;\\n    function confirmWithdrawalAddress(address nodeAddress) external;\\n}\",\"keccak256\":\"0x0909a6c96dbf95a516135e024d071cec82299e1d7a22a25d85cddad995c63c3d\",\"license\":\"GPL-3.0-only\"},\"submodules/v2-foundry/src/interfaces/external/uniswap/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title  ISwapRouter\\n/// @author Uniswap Labs\\n///\\n/// @notice Functions for swapping tokens via Uniswap V3.\\ninterface ISwapRouter {\\n  struct ExactInputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another token.\\n  ///\\n  /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata.\\n  ///\\n  /// @return amountOut The amount of the received token\\n  function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n  struct ExactInputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n  }\\n\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path.\\n  ///\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata.\\n  ///\\n  /// @return amountOut The amount of the received token\\n  function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n  struct ExactOutputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another token.\\n  ///\\n  /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata.\\n  ///\\n  /// @return amountIn The amount of the input token.\\n  function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n  struct ExactOutputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n  }\\n\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed).\\n  ///\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata.\\n  ///\\n  /// @return amountIn The amount of the input token\\n  function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\",\"keccak256\":\"0x15701c31017206dccfa9f192df74715b24f5d4f0fcaf540abb72dcc65c44d4fe\",\"license\":\"GPL-2.0-or-later\"},\"submodules/v2-foundry/src/libraries/RocketPool.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport {IRETH} from \\\"../interfaces/external/rocket/IRETH.sol\\\";\\nimport {IRocketStorage} from \\\"../interfaces/external/rocket/IRocketStorage.sol\\\";\\n\\nlibrary RocketPool {\\n    /// @dev Gets the current rETH contract.\\n    ///\\n    /// @param self The rocket storage contract to read from.\\n    ///\\n    /// @return The current rETH contract.\\n    function getRETH(IRocketStorage self) internal view returns (IRETH) {\\n        return IRETH(self.getAddress(\\n            keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketTokenRETH\\\"))\\n        ));\\n    }\\n}\",\"keccak256\":\"0x73a35a378759b2d9442237709f7fe43ed5992d4d8c4cf8a22234958b55fcc074\"},\"submodules/v2-foundry/src/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.4;\\n\\nimport {IERC20} from \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IllegalState} from \\\"../base/ErrorMessages.sol\\\";\\n\\nimport {IERC20Metadata} from \\\"../interfaces/IERC20Metadata.sol\\\";\\n\\n/// @title  SafeERC20\\n/// @author Alchemix Finance\\nlibrary SafeERC20 {\\n    /// @notice An error used to indicate that a call to an ERC20 contract failed.\\n    ///\\n    /// @param target  The target address.\\n    /// @param success If the call to the token was a success.\\n    /// @param data    The resulting data from the call. This is error data when the call was not a\\n    ///                success. Otherwise, this is malformed data when the call was a success.\\n    error ERC20CallFailed(address target, bool success, bytes data);\\n\\n    /// @dev A safe function to get the decimals of an ERC20 token.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an\\n    ///      unexpected value.\\n    ///\\n    /// @param token The target token.\\n    ///\\n    /// @return The amount of decimals of the token.\\n    function expectDecimals(address token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n\\n        if (!success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    /// @dev Transfers tokens to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer failed or returns an\\n    ///      unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransfer(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, recipient, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Approves tokens for the smart contract.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the approval fails or returns an\\n    ///      unexpected value.\\n    ///\\n    /// @param token   The token to approve.\\n    /// @param spender The contract to spend the tokens.\\n    /// @param value   The amount of tokens to approve.\\n    function safeApprove(address token, address spender, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.approve.selector, spender, value)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Transfer tokens from one address to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer fails or returns an\\n    ///      unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param owner     The address of the owner.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransferFrom(address token, address owner, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, owner, recipient, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n}\",\"keccak256\":\"0x6e6fcaae4927a1ac7673771740ada8cd4526c940267adde36029b23a6d7d17a3\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6000805460ff19166001908117909155610120604052600560e0819052640312e312e360dc1b61010090815262000037929162000092565b503480156200004557600080fd5b506040516200125a3803806200125a833981016040819052620000689162000155565b80516001600160a01b039081166080526020820151811660a0526040909101511660c05262000212565b828054620000a090620001d6565b90600052602060002090601f016020900481019282620000c457600085556200010f565b82601f10620000df57805160ff19168380011785556200010f565b828001600101855582156200010f579182015b828111156200010f578251825591602001919060010190620000f2565b506200011d92915062000121565b5090565b5b808211156200011d576000815560010162000122565b80516001600160a01b03811681146200015057600080fd5b919050565b6000606082840312156200016857600080fd5b604051606081016001600160401b03811182821017156200019957634e487b7160e01b600052604160045260246000fd5b604052620001a78362000138565b8152620001b76020840162000138565b6020820152620001ca6040840162000138565b60408201529392505050565b600181811c90821680620001eb57607f821691505b6020821081036200020c57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051610fb1620002a96000396000818160840152818161018c0152818161060a015281816106fb015261080e01526000818160b8015281816102630152818161043f01528181610489015281816104f90152818161059601528181610687015281816106d601528181610849015261087b01526000818161021a0152818161029201526103dc0152610fb16000f3fe6080604052600436106100745760003560e01c80637647691d1161004e5780637647691d146101e85780638de925f614610208578063a035b1fe1461023c578063fc0c546a1461025157600080fd5b806313bac820146101475780632495a5991461017a57806354fd4d50146101c657600080fd5b3661014257336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906100db5750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156101405760405163973d02cb60e01b815260206004820152602960248201527f5061796d656e7473206f6e6c79207065726d69747465642066726f6d2057455460448201526809040dee440e48aa8960bb1b60648201526084015b60405180910390fd5b005b600080fd5b34801561015357600080fd5b50610167610162366004610caa565b610285565b6040519081526020015b60405180910390f35b34801561018657600080fd5b506101ae7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610171565b3480156101d257600080fd5b506101db610339565b6040516101719190610d42565b3480156101f457600080fd5b50610167610203366004610caa565b6103c7565b34801561021457600080fd5b506101ae7f000000000000000000000000000000000000000000000000000000000000000081565b34801561024857600080fd5b50610167610845565b34801561025d57600080fd5b506101ae7f000000000000000000000000000000000000000000000000000000000000000081565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102f05760405163973d02cb60e01b815260206004820152600d60248201526c139bdd08185b18da195b5a5cdd609a1b6044820152606401610137565b6040516339e7b60b60e21b815260206004820152601960248201527f5772617070696e67206973206e6f7420737570706f72746564000000000000006044820152606401610137565b6001805461034690610d5c565b80601f016020809104026020016040519081016040528092919081815260200182805461037290610d5c565b80156103bf5780601f10610394576101008083540402835291602001916103bf565b820191906000526020600020905b8154815290600101906020018083116103a257829003601f168201915b505050505081565b60006103d161090e565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461043a5760405163973d02cb60e01b815260206004820152600d60248201526c139bdd08185b18da195b5a5cdd609a1b6044820152606401610137565b6104667f0000000000000000000000000000000000000000000000000000000000000000333086610983565b604051638b32fa2360e01b81526004810184905260009081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638b32fa2390602401602060405180830381865afa1580156104d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f49190610d96565b9050807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d6eb59106040518163ffffffff1660e01b8152600401602060405180830381865afa158015610555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105799190610d96565b1061068257604051630852cd8d60e31b81526004810186905247907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b1580156105e257600080fd5b505af11580156105f6573d6000803e3d6000fd5b5050505080476106069190610dc5565b92507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b15801561066357600080fd5b505af1158015610677573d6000803e3d6000fd5b505050505050610809565b6106c17f000000000000000000000000000000000000000000000000000000000000000073e592427a0aece92de3edee1f18e0157c0586156487610a83565b60408051610100810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f0000000000000000000000000000000000000000000000000000000000000000811660208301908152610bb88385019081523060608501908152426080860190815260a086018c8152600060c0880181815260e08901918252985163414bf38960e01b8152885188166004820152955187166024870152935162ffffff1660448601529151851660648501525160848401525160a4830152935160c482015292511660e48301529073e592427a0aece92de3edee1f18e0157c058615649063414bf38990610104016020604051808303816000875af11580156107e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108059190610d96565b9250505b6108347f00000000000000000000000000000000000000000000000000000000000000008584610b8b565b50905061083f610bbe565b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638b32fa2361089f7f0000000000000000000000000000000000000000000000000000000000000000610bd1565b6108aa90600a610ec0565b6040518263ffffffff1660e01b81526004016108c891815260200190565b602060405180830381865afa1580156108e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109099190610d96565b905090565b600160005460ff16600281111561092757610927610ecf565b1461096c5760405163c50656df60e01b8152602060048201526014602482015273131bd8dac8185b1c9958591e4818db185a5b595960621b6044820152606401610137565b600080546002919060ff19166001835b0217905550565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916109e79190610ee5565b6000604051808303816000865af19150503d8060008114610a24576040519150601f19603f3d011682016040523d82523d6000602084013e610a29565b606091505b5091509150811580610a575750805115801590610a57575080806020019051810190610a559190610f01565b155b15610a7b5785828260405163e7e40b5b60e01b815260040161013793929190610f23565b505050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063095ea7b360e01b906064015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610af09190610ee5565b6000604051808303816000865af19150503d8060008114610b2d576040519150601f19603f3d011682016040523d82523d6000602084013e610b32565b606091505b5091509150811580610b605750805115801590610b60575080806020019051810190610b5e9190610f01565b155b15610b845784828260405163e7e40b5b60e01b815260040161013793929190610f23565b5050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063a9059cbb60e01b90606401610ab2565b600080546001919060ff1916828061097c565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b03861691610c179190610ee5565b600060405180830381855afa9150503d8060008114610c52576040519150601f19603f3d011682016040523d82523d6000602084013e610c57565b606091505b5091509150811580610c6a575060208151105b15610c8e5783828260405163e7e40b5b60e01b815260040161013793929190610f23565b80806020019051810190610ca29190610f58565b949350505050565b60008060408385031215610cbd57600080fd5b8235915060208301356001600160a01b0381168114610cdb57600080fd5b809150509250929050565b60005b83811015610d01578181015183820152602001610ce9565b83811115610d10576000848401525b50505050565b60008151808452610d2e816020860160208601610ce6565b601f01601f19169290920160200192915050565b602081526000610d556020830184610d16565b9392505050565b600181811c90821680610d7057607f821691505b602082108103610d9057634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610da857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015610dd757610dd7610daf565b500390565b600181815b80851115610e17578160001904821115610dfd57610dfd610daf565b80851615610e0a57918102915b93841c9390800290610de1565b509250929050565b600082610e2e5750600161083f565b81610e3b5750600061083f565b8160018114610e515760028114610e5b57610e77565b600191505061083f565b60ff841115610e6c57610e6c610daf565b50506001821b61083f565b5060208310610133831016604e8410600b8410161715610e9a575081810a61083f565b610ea48383610ddc565b8060001904821115610eb857610eb8610daf565b029392505050565b6000610d5560ff841683610e1f565b634e487b7160e01b600052602160045260246000fd5b60008251610ef7818460208701610ce6565b9190910192915050565b600060208284031215610f1357600080fd5b81518015158114610d5557600080fd5b6001600160a01b03841681528215156020820152606060408201819052600090610f4f90830184610d16565b95945050505050565b600060208284031215610f6a57600080fd5b815160ff81168114610d5557600080fdfea2646970667358221220b041a156925bb6f7a4ff4547b89f6725ec564398a4778df4a91336feccb3673d64736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "params": {
            "data": "The resulting data from the call. This is error data when the call was not a                success. Otherwise, this is malformed data when the call was a success.",
            "success": "If the call to the token was a success.",
            "target": "The target address."
          }
        }
      ],
      "IllegalState(string)": [
        {
          "params": {
            "message": "The error message."
          }
        }
      ],
      "Unauthorized(string)": [
        {
          "params": {
            "message": "The error message."
          }
        }
      ],
      "UnsupportedOperation(string)": [
        {
          "params": {
            "message": "The error message."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "price()": {
        "returns": {
          "_0": "The price."
        }
      },
      "unwrap(uint256,address)": {
        "params": {
          "amount": "The amount of yield-tokens to redeem.",
          "recipient": "The recipient of the resulting underlying-tokens."
        },
        "returns": {
          "_0": "The amount of underlying tokens unwrapped to `recipient`."
        }
      },
      "wrap(uint256,address)": {
        "params": {
          "amount": "The amount of the underlying token to wrap.",
          "recipient": "The address which will receive the yield tokens."
        },
        "returns": {
          "_0": "The amount of yield tokens minted to `recipient`."
        }
      }
    },
    "stateVariables": {
      "token": {
        "return": "The address of the yield token.",
        "returns": {
          "_0": "The address of the yield token."
        }
      },
      "underlyingToken": {
        "return": "The address of the underlying token.",
        "returns": {
          "_0": "The address of the underlying token."
        }
      },
      "version": {
        "return": "The version.",
        "returns": {
          "_0": "The version."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "notice": "An error used to indicate that a call to an ERC20 contract failed."
        }
      ],
      "IllegalState(string)": [
        {
          "notice": "An error used to indicate that a function has encountered an unrecoverable state."
        }
      ],
      "Unauthorized(string)": [
        {
          "notice": "An error used to indicate that a message sender tried to execute a privileged function."
        }
      ],
      "UnsupportedOperation(string)": [
        {
          "notice": "An error used to indicate that an operation is unsupported."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "price()": {
        "notice": "Gets the number of underlying tokens that a single whole yield token is redeemable         for."
      },
      "token()": {
        "notice": "Gets the address of the yield token that this adapter supports."
      },
      "underlyingToken()": {
        "notice": "Gets the address of the underlying token that the yield token wraps."
      },
      "unwrap(uint256,address)": {
        "notice": "Unwraps `amount` yield tokens into the underlying token."
      },
      "version()": {
        "notice": "Gets the current version."
      },
      "wrap(uint256,address)": {
        "notice": "Wraps `amount` underlying tokens into the yield token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 50621,
        "contract": "submodules/v2-foundry/src/adapters/rocket/RETHAdapterV1.sol:RETHAdapterV1",
        "label": "_lockState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(State)50615"
      },
      {
        "astId": 46743,
        "contract": "submodules/v2-foundry/src/adapters/rocket/RETHAdapterV1.sol:RETHAdapterV1",
        "label": "version",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_enum(State)50615": {
        "encoding": "inplace",
        "label": "enum MutexLock.State",
        "numberOfBytes": "1"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}