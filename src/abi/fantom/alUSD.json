{
  "address": "0xa44f69aeAC480E23C0ABFA9A55D99c9F098bEac6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ERC20CallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IllegalArgument",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IllegalState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeTokenAddress",
          "type": "address"
        }
      ],
      "name": "BridgeTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "BridgeTokenToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SetFlashMintFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bridgeToCanonical",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "canonicalToOld",
          "type": "uint256"
        }
      ],
      "name": "SwapFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CALLBACK_SUCCESS",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SENTINEL_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridgeTokenAddress",
          "type": "address"
        }
      ],
      "name": "addBridgeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allBridgeTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bridgeTokenEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bridgeTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bridgeTokensArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridgeTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "exchangeCanonicalForOld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bridgeTokensOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridgeTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "exchangeOldForCanonical",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "canonicalTokensOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangesPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeExempt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "flashFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC3156FlashBorrower",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashMintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_bridgeTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lowerHasMinted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "maxFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxFlashLoanAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "pauseMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maximum",
          "type": "uint256"
        }
      ],
      "name": "setCeiling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "setFlashFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxFlashLoanAmount",
          "type": "uint256"
        }
      ],
      "name": "setMaxFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sentinel",
          "type": "address"
        }
      ],
      "name": "setSentinel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridgeTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bridgeToCanonical",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_canonicalToOld",
          "type": "uint256"
        }
      ],
      "name": "setSwapFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "setWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "swapFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridgeTokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "toggleBridgeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleExchanges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "targetAddress",
          "type": "address"
        }
      ],
      "name": "toggleFeesForAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfb499264ee2e930dd870fb555287ed9818e982d8ebe3cf46f8cfc4dd23b23e9d",
  "receipt": {
    "to": null,
    "from": "0x13C716188C38CE27B9B2b672a59543cf1170EabE",
    "contractAddress": "0xa44f69aeAC480E23C0ABFA9A55D99c9F098bEac6",
    "transactionIndex": 8,
    "gasUsed": "3147555",
    "logsBloom": "0x
    "blockHash": "0x00018f510000006cac33960f2e533a0cbc4f9bcce9215b75556b1f19b8d2aa59",
    "transactionHash": "0xfb499264ee2e930dd870fb555287ed9818e982d8ebe3cf46f8cfc4dd23b23e9d",
    "logs": [],
    "blockNumber": 35895224,
    "cumulativeGasUsed": "4387662",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bd9ce5961dec452c25d965b84c04f6d9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ERC20CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeTokenAddress\",\"type\":\"address\"}],\"name\":\"BridgeTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"BridgeTokenToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetFlashMintFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeToCanonical\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"canonicalToOld\",\"type\":\"uint256\"}],\"name\":\"SwapFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CALLBACK_SUCCESS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SENTINEL_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeTokenAddress\",\"type\":\"address\"}],\"name\":\"addBridgeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allBridgeTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bridgeTokenEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bridgeTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bridgeTokensArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeCanonicalForOld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bridgeTokensOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeOldForCanonical\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"canonicalTokensOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangesPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrower\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_bridgeTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lowerHasMinted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFlashLoanAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"pauseMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"}],\"name\":\"setCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFlashFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFlashLoanAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sentinel\",\"type\":\"address\"}],\"name\":\"setSentinel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bridgeToCanonical\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_canonicalToOld\",\"type\":\"uint256\"}],\"name\":\"setSwapFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"toggleBridgeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleExchanges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"}],\"name\":\"toggleFeesForAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"params\":{\"data\":\"The resulting data from the call. This is error data when the call was not a success. Otherwise,                this is malformed data when the call was a success.\",\"success\":\"If the call to the token was a success.\",\"target\":\"The target address.\"}}]},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"params\":{\"amount\":\"The amount of tokens to be burned.\"}},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance.\",\"params\":{\"account\":\"The address the burn tokens from.\",\"amount\":\"The amount of tokens to burn.\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"flashFee(address,uint256)\":{\"params\":{\"amount\":\"The amount of `token` to flash mint.\",\"token\":\"The address of the token.`\"},\"returns\":{\"_0\":\"The flash loan fee.\"}},\"flashLoan(address,address,uint256,bytes)\":{\"params\":{\"amount\":\"How much to flash mint.\",\"data\":\"ABI encoded data to pass to the receiver.\",\"receiver\":\"The address which will receive the flash minted tokens.\",\"token\":\"The address of the token to flash mint.\"},\"returns\":{\"_0\":\"If the flash loan was successful.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"lowerHasMinted(uint256)\":{\"params\":{\"amount\":\"The amount to lower the minted amount by.\"}},\"maxFlashLoan(address)\":{\"params\":{\"token\":\"The address of the token.\"},\"returns\":{\"_0\":\"The maximum amount of `token` that can be flashed loaned.\"}},\"mint(address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to mint.\",\"recipient\":\"The address to mint the tokens to.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseMinter(address,bool)\":{\"params\":{\"minter\":\"The address to set as paused or unpaused.\",\"state\":\"A flag indicating if the minter should be paused or unpaused.\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setCeiling(address,uint256)\":{\"params\":{\"maximum\":\"The maximum amount of tokens that the minter is allowed to mint.\",\"minter\":\"The address of the minter.\"}},\"setFlashFee(uint256)\":{\"params\":{\"newFee\":\"The new flash mint fee.\"}},\"setMaxFlashLoan(uint256)\":{\"params\":{\"_maxFlashLoanAmount\":\"The maximum flashloan amount.\"}},\"setSentinel(address)\":{\"params\":{\"sentinel\":\"The address to set as a sentinel.\"}},\"setWhitelist(address,bool)\":{\"params\":{\"minter\":\"The account to permit to mint.\",\"state\":\"A flag indicating if the minter should be able to mint.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"notice\":\"An error used to indicate that a call to an ERC20 contract failed.\"}],\"IllegalArgument()\":[{\"notice\":\"An error used to indicate that an action could not be completed because of an illegal argument was passed         to the function.\"}],\"IllegalState()\":[{\"notice\":\"An error used to indicate that an action could not be completed because the contract either already existed         or entered an illegal condition which is not recoverable from.\"}],\"Unauthorized()\":[{\"notice\":\"An error used to indicate that an action could not be completed because either the `msg.sender` or         `msg.origin` is not authorized.\"}]},\"events\":{\"Paused(address,bool)\":{\"notice\":\"An event which is emitted when a minter is paused from minting.\"},\"SetFlashMintFee(uint256)\":{\"notice\":\"An event which is emitted when the flash mint fee is updated.\"}},\"kind\":\"user\",\"methods\":{\"ADMIN_ROLE()\":{\"notice\":\"The identifier of the role which maintains other roles.\"},\"BPS()\":{\"notice\":\"The maximum number of basis points needed to represent 100%.\"},\"CALLBACK_SUCCESS()\":{\"notice\":\"The expected return value from a flash mint receiver\"},\"SENTINEL_ROLE()\":{\"notice\":\"The identifier of the role which allows accounts to mint tokens.\"},\"burn(uint256)\":{\"notice\":\"Burns `amount` tokens from `msg.sender`.\"},\"flashFee(address,uint256)\":{\"notice\":\"Gets the flash loan fee of `amount` of `token`.\"},\"flashLoan(address,address,uint256,bytes)\":{\"notice\":\"Performs a flash mint (called flash loan to confirm with ERC3156 standard).\"},\"flashMintFee()\":{\"notice\":\"Fee for flash minting\"},\"lowerHasMinted(uint256)\":{\"notice\":\"Lowers the number of tokens which the `msg.sender` has minted.This reverts if the `msg.sender` is not whitelisted.\"},\"maxFlashLoan(address)\":{\"notice\":\"Gets the maximum amount to be flash loaned of a token.\"},\"maxFlashLoanAmount()\":{\"notice\":\"Max flash mint amount\"},\"mint(address,uint256)\":{\"notice\":\"Mints tokens to `a recipient.`This function reverts if `msg.sender` is not whitelisted.This function reverts if `msg.sender` is paused.This function reverts if `msg.sender` has exceeded their mintable ceiling.\"},\"mintCeiling(address)\":{\"notice\":\"The amount that each address is permitted to mint.\"},\"pauseMinter(address,bool)\":{\"notice\":\"Pauses `minter` from minting tokens.This function reverts if `msg.sender` is not a sentinel.\"},\"paused(address)\":{\"notice\":\"A set of addresses which are paused from minting new tokens.\"},\"setCeiling(address,uint256)\":{\"notice\":\"Sets the maximum amount of tokens that `minter` is allowed to mint.This function reverts if `msg.sender` is not an admin.\"},\"setFlashFee(uint256)\":{\"notice\":\"Sets the flash minting fee.This function reverts if `msg.sender` is not an admin.\"},\"setMaxFlashLoan(uint256)\":{\"notice\":\"Adjusts the maximum flashloan amount.\"},\"setSentinel(address)\":{\"notice\":\"Sets `sentinel` as a sentinel.This function reverts if `msg.sender` is not an admin.\"},\"setWhitelist(address,bool)\":{\"notice\":\"Sets `minter` as whitelisted to mint.This function reverts if `msg.sender` is not an admin.\"},\"totalMinted(address)\":{\"notice\":\"The amount of tokens that each address has already minted.\"},\"whitelisted(address)\":{\"notice\":\"A set of addresses which are whitelisted for minting new tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrossChainCanonicalAlchemicTokenV2.sol\":\"CrossChainCanonicalAlchemicTokenV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x23a373902059fb51db98e32e13f89a0ef0c570039081a1345022e66bc7e315d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n        __ERC20Permit_init_unchained(name);\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory name) internal onlyInitializing {\\n        _PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x7fb71e823080ba5e320f036c7dbda29f3676f3d516db4dcdb8b0adbfbae5d830\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x1762ac67d230279d7fb183567ce22bbe202054ce08f94224d8794f9d19546d51\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x92e61d8dd5ba90b513769c06da820e0a8f5d93810a9c6d5207308af345815011\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/AlchemicTokenV2Base.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.11;\\n\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport {IllegalArgument, IllegalState, Unauthorized} from \\\"./base/Errors.sol\\\";\\n\\nimport {IERC3156FlashBorrower} from \\\"./interfaces/IERC3156FlashBorrower.sol\\\";\\nimport {IERC3156FlashLender} from \\\"./interfaces/IERC3156FlashLender.sol\\\";\\n\\n/// @title  AlchemicTokenV2\\n/// @author Alchemix Finance\\n///\\n/// @notice This is the contract for version two alchemic tokens.\\n/// @notice Initially, the contract deployer is given both the admin and minter role. This allows them to pre-mine\\n///         tokens, transfer admin to a timelock contract, and lastly, grant the staking pools the minter role. After\\n///         this is done, the deployer must revoke their admin role and minter role.\\ncontract AlchemicTokenV2Base is ERC20Upgradeable, AccessControlUpgradeable, IERC3156FlashLender, ReentrancyGuardUpgradeable {\\n  /// @notice The identifier of the role which maintains other roles.\\n  bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n\\n  /// @notice The identifier of the role which allows accounts to mint tokens.\\n  bytes32 public constant SENTINEL_ROLE = keccak256(\\\"SENTINEL\\\");\\n\\n  /// @notice The expected return value from a flash mint receiver\\n  bytes32 public constant CALLBACK_SUCCESS = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n  /// @notice The maximum number of basis points needed to represent 100%.\\n  uint256 public constant BPS = 10000;\\n\\n  /// @notice A set of addresses which are whitelisted for minting new tokens.\\n  mapping(address => bool) public whitelisted;\\n\\n  /// @notice A set of addresses which are paused from minting new tokens.\\n  mapping(address => bool) public paused;\\n\\n  /// @notice The amount that each address is permitted to mint.\\n  mapping(address => uint256) public mintCeiling;\\n\\n  /// @notice The amount of tokens that each address has already minted.\\n  mapping(address => uint256) public totalMinted;\\n\\n  /// @notice Fee for flash minting\\n  uint256 public flashMintFee;\\n\\n  /// @notice Max flash mint amount\\n  uint256 public maxFlashLoanAmount;\\n\\n  /// @notice An event which is emitted when a minter is paused from minting.\\n  ///\\n  /// @param minter The address of the minter which was paused.\\n  /// @param state  A flag indicating if the alchemist is paused or unpaused.\\n  event Paused(address minter, bool state);\\n\\n  /// @notice An event which is emitted when the flash mint fee is updated.\\n  ///\\n  /// @param fee The new flash mint fee.\\n  event SetFlashMintFee(uint256 fee);\\n\\n  function __AlchemicTokenV2Base_init() internal {\\n    _setupRole(ADMIN_ROLE, msg.sender);\\n    _setupRole(SENTINEL_ROLE, msg.sender);\\n    _setRoleAdmin(SENTINEL_ROLE, ADMIN_ROLE);\\n    _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n  }\\n\\n  /// @dev A modifier which checks that the caller has the admin role.\\n  modifier onlyAdmin() {\\n    if (!hasRole(ADMIN_ROLE, msg.sender)) {\\n      revert Unauthorized();\\n    }\\n    _;\\n  }\\n\\n  /// @dev A modifier which checks that the caller has the sentinel role.\\n  modifier onlySentinel() {\\n    if(!hasRole(SENTINEL_ROLE, msg.sender)) {\\n      revert Unauthorized();\\n    }\\n    _;\\n  }\\n\\n  /// @dev A modifier which checks if whitelisted for minting.\\n  modifier onlyWhitelisted() {\\n    if(!whitelisted[msg.sender]) {\\n      revert Unauthorized();\\n    }\\n    _;\\n  }\\n\\n  /// @notice Sets the flash minting fee.\\n  ///\\n  /// @notice This function reverts if `msg.sender` is not an admin.\\n  ///\\n  /// @param newFee The new flash mint fee.\\n  function setFlashFee(uint256 newFee) external onlyAdmin {\\n    flashMintFee = newFee;\\n    emit SetFlashMintFee(flashMintFee);\\n  }\\n\\n  /// @notice Mints tokens to `a recipient.`\\n  ///\\n  /// @notice This function reverts if `msg.sender` is not whitelisted.\\n  /// @notice This function reverts if `msg.sender` is paused.\\n  /// @notice This function reverts if `msg.sender` has exceeded their mintable ceiling.\\n  ///\\n  /// @param recipient The address to mint the tokens to.\\n  /// @param amount    The amount of tokens to mint.\\n  function mint(address recipient, uint256 amount) external onlyWhitelisted {\\n    if (paused[msg.sender]) {\\n      revert IllegalState();\\n    }\\n\\n    uint256 total = amount + totalMinted[msg.sender];\\n    if (total > mintCeiling[msg.sender]) {\\n      revert IllegalState();\\n    }\\n\\n    totalMinted[msg.sender] = total;\\n\\n    _mint(recipient, amount);\\n  }\\n\\n  /// @notice Sets `minter` as whitelisted to mint.\\n  ///\\n  /// @notice This function reverts if `msg.sender` is not an admin.\\n  ///\\n  /// @param minter The account to permit to mint.\\n  /// @param state  A flag indicating if the minter should be able to mint.\\n  function setWhitelist(address minter, bool state) external onlyAdmin {\\n    whitelisted[minter] = state;\\n  }\\n\\n  /// @notice Sets `sentinel` as a sentinel.\\n  ///\\n  /// @notice This function reverts if `msg.sender` is not an admin.\\n  ///\\n  /// @param sentinel The address to set as a sentinel.\\n  function setSentinel(address sentinel) external onlyAdmin {\\n    _setupRole(SENTINEL_ROLE, sentinel);\\n  }\\n\\n  /// @notice Sets the maximum amount of tokens that `minter` is allowed to mint.\\n  ///\\n  /// @notice This function reverts if `msg.sender` is not an admin.\\n  ///\\n  /// @param minter  The address of the minter.\\n  /// @param maximum The maximum amount of tokens that the minter is allowed to mint.\\n  function setCeiling(address minter, uint256 maximum) external onlyAdmin {\\n    mintCeiling[minter] = maximum;\\n  }\\n\\n  /// @notice Pauses `minter` from minting tokens.\\n  ///\\n  /// @notice This function reverts if `msg.sender` is not a sentinel.\\n  ///\\n  /// @param minter The address to set as paused or unpaused.\\n  /// @param state  A flag indicating if the minter should be paused or unpaused.\\n  function pauseMinter(address minter, bool state) external onlySentinel {\\n    paused[minter] = state;\\n    emit Paused(minter, state);\\n  }\\n\\n  /// @notice Burns `amount` tokens from `msg.sender`.\\n  ///\\n  /// @param amount The amount of tokens to be burned.\\n  function burn(uint256 amount) external {\\n    _burn(msg.sender, amount);\\n  }\\n\\n  /// @dev Destroys `amount` tokens from `account`, deducting from the caller's allowance.\\n  ///\\n  /// @param account The address the burn tokens from.\\n  /// @param amount  The amount of tokens to burn.\\n  function burnFrom(address account, uint256 amount) external {\\n    uint256 newAllowance = allowance(account, msg.sender) - amount;\\n\\n    _approve(account, msg.sender, newAllowance);\\n    _burn(account, amount);\\n  }\\n\\n  /// @notice Lowers the number of tokens which the `msg.sender` has minted.\\n  ///\\n  /// @notice This reverts if the `msg.sender` is not whitelisted.\\n  ///\\n  /// @param amount The amount to lower the minted amount by.\\n  function lowerHasMinted(uint256 amount) external onlyWhitelisted {\\n    totalMinted[msg.sender] = totalMinted[msg.sender] - amount;\\n  }\\n\\n  /// @notice Adjusts the maximum flashloan amount.\\n  ///\\n  /// @param _maxFlashLoanAmount The maximum flashloan amount.\\n  function setMaxFlashLoan(uint _maxFlashLoanAmount) external onlyAdmin {\\n    maxFlashLoanAmount = _maxFlashLoanAmount;\\n  }\\n\\n  /// @notice Gets the maximum amount to be flash loaned of a token.\\n  ///\\n  /// @param token The address of the token.\\n  ///\\n  /// @return The maximum amount of `token` that can be flashed loaned.\\n  function maxFlashLoan(address token) public view override returns (uint256) {\\n    if (token != address(this)) {\\n      return 0;\\n    }\\n    return maxFlashLoanAmount;\\n  }\\n\\n  /// @notice Gets the flash loan fee of `amount` of `token`.\\n  ///\\n  /// @param token  The address of the token.`\\n  /// @param amount The amount of `token` to flash mint.\\n  ///\\n  /// @return The flash loan fee.\\n  function flashFee(address token, uint256 amount) public view override returns (uint256) {\\n    if (token != address(this)) {\\n      revert IllegalArgument();\\n    }\\n    return amount * flashMintFee / BPS;\\n  }\\n\\n  /// @notice Performs a flash mint (called flash loan to confirm with ERC3156 standard).\\n  ///\\n  /// @param receiver The address which will receive the flash minted tokens.\\n  /// @param token    The address of the token to flash mint.\\n  /// @param amount   How much to flash mint.\\n  /// @param data     ABI encoded data to pass to the receiver.\\n  ///\\n  /// @return If the flash loan was successful.\\n  function flashLoan(\\n    IERC3156FlashBorrower receiver,\\n    address token,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external override nonReentrant returns (bool) {\\n    if (token != address(this)) {\\n      revert IllegalArgument();\\n    }\\n\\n    if (amount > maxFlashLoan(token)) {\\n      revert IllegalArgument();\\n    }\\n\\n    uint256 fee = flashFee(token, amount);\\n\\n    _mint(address(receiver), amount);\\n\\n    if (receiver.onFlashLoan(msg.sender, token, amount, fee, data) != CALLBACK_SUCCESS) {\\n      revert IllegalState();\\n    }\\n\\n    _burn(address(receiver), amount + fee); // Will throw error if not enough to burn\\n\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0x3300101faaa6847352b002b78490707b06cdc183c06232256b90050baeb99f6b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/CrossChainCanonicalAlchemicTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.11;\\n\\nimport {CrossChainCanonicalBase} from \\\"./CrossChainCanonicalBase.sol\\\";\\nimport {AlchemicTokenV2Base} from \\\"./AlchemicTokenV2Base.sol\\\";\\n\\ncontract CrossChainCanonicalAlchemicTokenV2 is CrossChainCanonicalBase, AlchemicTokenV2Base {\\n  function initialize(\\n      string memory name, \\n      string memory symbol, \\n      address[] memory _bridgeTokens\\n  ) public initializer {\\n    __CrossChainCanonicalBase_init(\\n      name,\\n      symbol,\\n      msg.sender,\\n      _bridgeTokens\\n    );\\n    __AlchemicTokenV2Base_init();\\n  }\\n}\\n\",\"keccak256\":\"0xdaa5dba828bedb01b11aa0a5d18dd9c6984ba8c5838d9e7f6f694af9ce88e0a0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/CrossChainCanonicalBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport {ERC20PermitUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport {IllegalArgument, IllegalState} from \\\"./base/Errors.sol\\\";\\n\\nimport {TokenUtils} from \\\"./libraries/TokenUtils.sol\\\";\\n\\ncontract CrossChainCanonicalBase is ERC20PermitUpgradeable, ReentrancyGuardUpgradeable, OwnableUpgradeable {\\n\\n    // Constants for various precisions\\n    uint256 private constant FEE_PRECISION = 1e6; // Okay to use constant declarations since compiler does not reserve a storage slot\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // Swap fee numerators, denominator of FEE_PRECISION\\n    mapping(address => uint256[2]) public swapFees;\\n    mapping(address => bool) public feeExempt;\\n\\n    // Acceptable old tokens\\n    address[] public bridgeTokensArray; // Used for external UIs\\n    mapping(address => bool) public bridgeTokens; // Used for the logic checks\\n\\n    // Administrative booleans\\n    bool public exchangesPaused; // Pause old token exchanges in case of an emergency\\n    mapping(address => bool) public bridgeTokenEnabled;\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier validBridgeToken(address tokenAddress) {\\n        if (!bridgeTokenEnabled[tokenAddress]) {\\n            revert IllegalState();\\n        }\\n        _;\\n    }\\n\\n    /* ========== INITIALIZER ========== */\\n\\n    function __CrossChainCanonicalBase_init(\\n        string memory _name,\\n        string memory _symbol,\\n        address _creatorAddress,\\n        address[] memory _bridgeTokens\\n    ) internal {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __EIP712_init_unchained(_name, \\\"1\\\");\\n        __ERC20_init_unchained(_name, _symbol);\\n        __ERC20Permit_init_unchained(_name);\\n        __ReentrancyGuard_init_unchained(); // Note: this is called here but not in AlchemicTokenV2Base. Careful if inheriting that without this\\n        _transferOwnership(_creatorAddress);\\n\\n        // Initialize the starting old tokens\\n        for (uint256 i = 0; i < _bridgeTokens.length; i++){ \\n            // Mark as accepted\\n            bridgeTokens[_bridgeTokens[i]] = true;\\n\\n            // Add to the array\\n            bridgeTokensArray.push(_bridgeTokens[i]);\\n\\n            // Set a small swap fee initially of 0.04%\\n            swapFees[_bridgeTokens[i]] = [400, 400];\\n\\n            // Make sure swapping is on\\n            bridgeTokenEnabled[_bridgeTokens[i]] = true;\\n        }\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    // Helpful for UIs\\n    function allBridgeTokens() external view returns (address[] memory) {\\n        return bridgeTokensArray;\\n    }\\n\\n    function _isFeeExempt(address targetAddress) internal view returns (bool) {\\n        return feeExempt[targetAddress];\\n    }\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n\\n    // Exchange old tokens for these canonical tokens\\n    function exchangeOldForCanonical(address bridgeTokenAddress, uint256 tokenAmount) external nonReentrant validBridgeToken(bridgeTokenAddress) returns (uint256 canonicalTokensOut) {\\n        if (exchangesPaused) {\\n            revert IllegalState();\\n        }\\n\\n        if (!bridgeTokenEnabled[bridgeTokenAddress]) {\\n            revert IllegalState();\\n        }\\n\\n        // Pull in the old tokens\\n        TokenUtils.safeTransferFrom(bridgeTokenAddress, msg.sender, address(this), tokenAmount);\\n\\n        // Handle the fee, if applicable\\n        canonicalTokensOut = tokenAmount;\\n        if (!_isFeeExempt(msg.sender)) {\\n            canonicalTokensOut -= ((canonicalTokensOut * swapFees[bridgeTokenAddress][0]) / FEE_PRECISION);\\n        }\\n\\n        // Mint canonical tokens and give it to the sender\\n        super._mint(msg.sender, canonicalTokensOut);\\n    }\\n\\n    // Exchange canonical tokens for old tokens\\n    function exchangeCanonicalForOld(address bridgeTokenAddress, uint256 tokenAmount) external nonReentrant validBridgeToken(bridgeTokenAddress) returns (uint256 bridgeTokensOut) {\\n        if (exchangesPaused) {\\n            revert IllegalState();\\n        }\\n\\n        if (!bridgeTokenEnabled[bridgeTokenAddress]) {\\n            revert IllegalState();\\n        }\\n\\n        // Burn the canonical tokens\\n        super._burn(msg.sender, tokenAmount);\\n\\n        // Handle the fee, if applicable\\n        bridgeTokensOut = tokenAmount;\\n        if (!_isFeeExempt(msg.sender)) {\\n            bridgeTokensOut -= ((bridgeTokensOut * swapFees[bridgeTokenAddress][1]) / FEE_PRECISION);\\n        }\\n\\n        // Give old tokens to the sender\\n        TokenUtils.safeTransfer(bridgeTokenAddress, msg.sender, bridgeTokensOut);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS, BUT CUSTODIAN CAN CALL TOO ========== */\\n\\n    function toggleExchanges() external onlyOwner {\\n        exchangesPaused = !exchangesPaused;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function addBridgeToken(address bridgeTokenAddress) external onlyOwner {\\n        // Make sure the token is not already present\\n        for (uint i = 0; i < bridgeTokensArray.length; i++){ \\n            if (bridgeTokensArray[i] == bridgeTokenAddress) {\\n                revert IllegalState();\\n            }\\n        }\\n\\n        // Add the old token\\n        bridgeTokensArray.push(bridgeTokenAddress);\\n\\n        // Turn swapping on\\n        bridgeTokenEnabled[bridgeTokenAddress] = true;\\n\\n        emit BridgeTokenAdded(bridgeTokenAddress);\\n    }\\n\\n    function toggleBridgeToken(address bridgeTokenAddress, bool enabled) external onlyOwner {\\n        // Toggle swapping\\n        bridgeTokenEnabled[bridgeTokenAddress] = enabled;\\n\\n        emit BridgeTokenToggled(bridgeTokenAddress, enabled);\\n    }\\n\\n    function setSwapFees(address bridgeTokenAddress, uint256 _bridgeToCanonical, uint256 _canonicalToOld) external onlyOwner {\\n        swapFees[bridgeTokenAddress] = [_bridgeToCanonical, _canonicalToOld];\\n\\n        emit SwapFeeSet(bridgeTokenAddress, _bridgeToCanonical, _canonicalToOld);\\n    }\\n\\n    function toggleFeesForAddress(address targetAddress) external onlyOwner {\\n        feeExempt[targetAddress] = !feeExempt[targetAddress];\\n    }\\n\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        if (tokenAddress == address(this)) {\\n            revert IllegalArgument();\\n        }\\n\\n        if (bridgeTokenEnabled[tokenAddress]) {\\n            revert IllegalState();\\n        }\\n\\n        TokenUtils.safeTransfer(address(tokenAddress), msg.sender, tokenAmount);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event BridgeTokenAdded(address indexed bridgeTokenAddress);\\n    event BridgeTokenToggled(address indexed bridgeTokenAddress, bool state);\\n    event SwapFeeSet(address indexed bridgeTokenAddress, uint bridgeToCanonical, uint canonicalToOld);\\n}\",\"keccak256\":\"0x282470ebf22431783d76095204e14d66670dba8e0b23e99d11910d749e76fad0\",\"license\":\"MIT\"},\"contracts/base/Errors.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\n/// @notice An error used to indicate that an action could not be completed because either the `msg.sender` or\\n///         `msg.origin` is not authorized.\\nerror Unauthorized();\\n\\n/// @notice An error used to indicate that an action could not be completed because the contract either already existed\\n///         or entered an illegal condition which is not recoverable from.\\nerror IllegalState();\\n\\n/// @notice An error used to indicate that an action could not be completed because of an illegal argument was passed\\n///         to the function.\\nerror IllegalArgument();\",\"keccak256\":\"0xfd0aef24fe5a6c5c65d3532dd67c99a8f6b450de3fa6cd6b38c542928105652a\"},\"contracts/interfaces/IERC20Burnable.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"./IERC20Minimal.sol\\\";\\n\\n/// @title  IERC20Burnable\\n/// @author Alchemix Finance\\ninterface IERC20Burnable is IERC20Minimal {\\n    /// @notice Burns `amount` tokens from the balance of `msg.sender`.\\n    ///\\n    /// @param amount The amount of tokens to burn.\\n    ///\\n    /// @return If burning the tokens was successful.\\n    function burn(uint256 amount) external returns (bool);\\n\\n    /// @notice Burns `amount` tokens from `owner`'s balance.\\n    ///\\n    /// @param owner  The address to burn tokens from.\\n    /// @param amount The amount of tokens to burn.\\n    ///\\n    /// @return If burning the tokens was successful.\\n    function burnFrom(address owner, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0x262ab3be86a306ee107ffda823417341f86ea8fba5acdc79fd3d23f8b177354a\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  IERC20Metadata\\n/// @author Alchemix Finance\\ninterface IERC20Metadata {\\n    /// @notice Gets the name of the token.\\n    ///\\n    /// @return The name.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Gets the symbol of the token.\\n    ///\\n    /// @return The symbol.\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice Gets the number of decimals that the token has.\\n    ///\\n    /// @return The number of decimals.\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x2d5429bdf25a43d40c7e23f3e27dd595585f33b1aaed4aabe8e76e681e15702b\"},\"contracts/interfaces/IERC20Minimal.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  IERC20Minimal\\n/// @author Alchemix Finance\\ninterface IERC20Minimal {\\n    /// @notice An event which is emitted when tokens are transferred between two parties.\\n    ///\\n    /// @param owner     The owner of the tokens from which the tokens were transferred.\\n    /// @param recipient The recipient of the tokens to which the tokens were transferred.\\n    /// @param amount    The amount of tokens which were transferred.\\n    event Transfer(address indexed owner, address indexed recipient, uint256 amount);\\n\\n    /// @notice An event which is emitted when an approval is made.\\n    ///\\n    /// @param owner   The address which made the approval.\\n    /// @param spender The address which is allowed to transfer tokens on behalf of `owner`.\\n    /// @param amount  The amount of tokens that `spender` is allowed to transfer.\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /// @notice Gets the current total supply of tokens.\\n    ///\\n    /// @return The total supply.\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Gets the balance of tokens that an account holds.\\n    ///\\n    /// @param account The account address.\\n    ///\\n    /// @return The balance of the account.\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Gets the allowance that an owner has allotted for a spender.\\n    ///\\n    /// @param owner   The owner address.\\n    /// @param spender The spender address.\\n    ///\\n    /// @return The number of tokens that `spender` is allowed to transfer on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Transfers `amount` tokens from `msg.sender` to `recipient`.\\n    ///\\n    /// @notice Emits a {Transfer} event.\\n    ///\\n    /// @param recipient The address which will receive the tokens.\\n    /// @param amount    The amount of tokens to transfer.\\n    ///\\n    /// @return If the transfer was successful.\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Approves `spender` to transfer `amount` tokens on behalf of `msg.sender`.\\n    ///\\n    /// @notice Emits a {Approval} event.\\n    ///\\n    /// @param spender The address which is allowed to transfer tokens on behalf of `msg.sender`.\\n    /// @param amount  The amount of tokens that `spender` is allowed to transfer.\\n    ///\\n    /// @return If the approval was successful.\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from `owner` to `recipient` using an approval that `owner` gave to `msg.sender`.\\n    ///\\n    /// @notice Emits a {Approval} event.\\n    /// @notice Emits a {Transfer} event.\\n    ///\\n    /// @param owner     The address to transfer tokens from.\\n    /// @param recipient The address that will receive the tokens.\\n    /// @param amount    The amount of tokens to transfer.\\n    ///\\n    /// @return If the transfer was successful.\\n    function transferFrom(address owner, address recipient, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0x51fd0df2a5ad7f05d49b23a5672ea911d69b660d9653af87bb8ec7cdaf7780cb\"},\"contracts/interfaces/IERC20Mintable.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"./IERC20Minimal.sol\\\";\\n\\n/// @title  IERC20Mintable\\n/// @author Alchemix Finance\\ninterface IERC20Mintable is IERC20Minimal {\\n    /// @notice Mints `amount` tokens to `recipient`.\\n    ///\\n    /// @param recipient The address which will receive the minted tokens.\\n    /// @param amount    The amount of tokens to mint.\\n    ///\\n    /// @return If minting the tokens was successful.\\n    function mint(address recipient, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0xba3abc2b29d6241f08d999b052cc200f202c89c897c87277692c05220cc6ee95\"},\"contracts/interfaces/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n/// @title IERC3156FlashBorrower\\n///\\n/// @dev Interface of the ERC3156 FlashBorrower, as defined by [ERC-3156](https://eips.ethereum.org/EIPS/eip-3156).\\ninterface IERC3156FlashBorrower {\\n  /// @notice Receive a flash loan.\\n  ///\\n  /// @param initiator The initiator of the loan.\\n  /// @param token     The loan currency.\\n  /// @param amount    The amount of tokens lent.\\n  /// @param fee       The additional amount of tokens to repay.\\n  /// @param data      Arbitrary data structure, intended to contain user-defined parameters.\\n  ///\\n  /// @return magic The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n  function onFlashLoan(\\n    address initiator,\\n    address token,\\n    uint256 amount,\\n    uint256 fee,\\n    bytes calldata data\\n  ) external returns (bytes32 magic);\\n}\",\"keccak256\":\"0x4dec9f106b913aaa5211920e0a89140dd669856cb12418a4e2a6ede3c72759ed\",\"license\":\"MIT\"},\"contracts/interfaces/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\n/// @title IERC3156FlashLender\\n///\\n/// @dev Interface of the ERC3156 FlashLender, as defined by [ERC-3156](https://eips.ethereum.org/EIPS/eip-3156).\\ninterface IERC3156FlashLender {\\n  /// @notice The amount of currency available to be lent out.\\n  ///\\n  /// @param token The loan currency.\\n  ///\\n  /// @return amount The amount of `token` that can be borrowed.\\n  function maxFlashLoan(address token) external view returns (uint256 amount);\\n\\n  /// @notice The fee to be charged for a given loan.\\n  ///\\n  /// @param token The loan currency.\\n  /// @param amount The amount of tokens lent.\\n  ///\\n  /// @return fee The amount of token to be charged for the loan, on top of the returned principal.\\n  function flashFee(address token, uint256 amount) external view returns (uint256 fee);\\n\\n  /// @notice Initiate a flash loan.\\n  ///\\n  /// @param receiver The receiver of the tokens in the loan and the receiver of the callback.\\n  /// @param token    The loan currency.\\n  /// @param amount   The amount of tokens lent.\\n  /// @param data     Arbitrary data structure, intended to contain user-defined parameters.\\n  ///\\n  /// @return success If the flash loan was successful.\\n  function flashLoan(\\n    IERC3156FlashBorrower receiver,\\n    address token,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external returns (bool success);\\n}\",\"keccak256\":\"0x248a3353522028ff2576e0864954571327565c59d086dd5d31d2c018694c2c6a\",\"license\":\"MIT\"},\"contracts/libraries/TokenUtils.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\nimport \\\"../interfaces/IERC20Burnable.sol\\\";\\nimport \\\"../interfaces/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IERC20Minimal.sol\\\";\\nimport \\\"../interfaces/IERC20Mintable.sol\\\";\\n\\n/// @title  TokenUtils\\n/// @author Alchemix Finance\\nlibrary TokenUtils {\\n    /// @notice An error used to indicate that a call to an ERC20 contract failed.\\n    ///\\n    /// @param target  The target address.\\n    /// @param success If the call to the token was a success.\\n    /// @param data    The resulting data from the call. This is error data when the call was not a success. Otherwise,\\n    ///                this is malformed data when the call was a success.\\n    error ERC20CallFailed(address target, bool success, bytes data);\\n\\n    /// @dev A safe function to get the decimals of an ERC20 token.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\\n    ///\\n    /// @param token The target token.\\n    ///\\n    /// @return The amount of decimals of the token.\\n    function expectDecimals(address token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n\\n        if (!success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    /// @dev Gets the balance of tokens held by an account.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\\n    ///\\n    /// @param token   The token to check the balance of.\\n    /// @param account The address of the token holder.\\n    ///\\n    /// @return The balance of the tokens held by an account.\\n    function safeBalanceOf(address token, address account) internal view returns (uint256) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, account)\\n        );\\n\\n        if (!success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Transfers tokens to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer failed or returns an unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransfer(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Minimal.transfer.selector, recipient, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Approves tokens for the smart contract.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the approval fails or returns an unexpected value.\\n    ///\\n    /// @param token   The token to approve.\\n    /// @param spender The contract to spend the tokens.\\n    /// @param value   The amount of tokens to approve.\\n    function safeApprove(address token, address spender, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Minimal.approve.selector, spender, value)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Transfer tokens from one address to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer fails or returns an unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param owner     The address of the owner.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransferFrom(address token, address owner, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Minimal.transferFrom.selector, owner, recipient, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Mints tokens to an address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the mint fails or returns an unexpected value.\\n    ///\\n    /// @param token     The token to mint.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to mint.\\n    function safeMint(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Mintable.mint.selector, recipient, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Burns tokens.\\n    ///\\n    /// Reverts with a `CallFailed` error if execution of the burn fails or returns an unexpected value.\\n    ///\\n    /// @param token  The token to burn.\\n    /// @param amount The amount of tokens to burn.\\n    function safeBurn(address token, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Burnable.burn.selector, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Burns tokens from its total supply.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the burn fails or returns an unexpected value.\\n    ///\\n    /// @param token  The token to burn.\\n    /// @param owner  The owner of the tokens.\\n    /// @param amount The amount of tokens to burn.\\n    function safeBurnFrom(address token, address owner, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Burnable.burnFrom.selector, owner, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n}\",\"keccak256\":\"0x8c2deb72f89b365058a2ca22965f11e035a73bfcd0c3937c9a5c87c0617fcebf\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506137f7806100206000396000f3fe608060405234801561001057600080fd5b50600436106103c45760003560e01c80636d1ac36a116101ff578063a217fddf1161011a578063d505accf116100ad578063dd62ed3e1161007c578063dd62ed3e146108a4578063e68b14ff146108dd578063ee7a069a146108f0578063f2fde38b1461091157600080fd5b8063d505accf14610847578063d547741f1461085a578063d936547e1461086d578063d9d98ce41461089157600080fd5b8063a9059cbb116100e9578063a9059cbb146107e8578063bf15c224146107fb578063ca2759311461081f578063cd4839ca1461083257600080fd5b8063a217fddf146107a7578063a457c2d7146107af578063a6beee4a146107c2578063a7c571fe146107d557600080fd5b80638980f11f1161019257806391d148541161016157806391d1485414610778578063940a1dc01461078b57806395d89b4114610795578063a140edb41461079d57600080fd5b80638980f11f1461072d5780638da5cb5b146107405780639006a50f14610752578063907a267b1461076557600080fd5b80637601f069116101ce5780637601f069146106d857806379cc6790146106e05780637ecebe00146106f35780638237e5381461070657600080fd5b80636d1ac36a1461066e57806370a0823114610692578063715018a6146106bb57806375b238fc146106c357600080fd5b8063288aafcb116102ef578063398daa851161028257806353d6fd591161025157806353d6fd59146106225780635cffe9de14610635578063613255ab146106485780636c00c7f01461065b57600080fd5b8063398daa85146105c557806340c10f19146105e957806342966c68146105fc578063459d0df01461060f57600080fd5b80633644e515116102be5780633644e5151461058457806336568abe1461058c5780633864376b1461059f57806339509351146105b257600080fd5b8063288aafcb1461052b5780632e48152c1461053e5780632f2ff15d14610562578063313ce5671461057557600080fd5b806313430d9211610367578063248756d911610336578063248756d9146104c1578063248a9ca3146104ec578063249d39e91461050f578063280cf3ed1461051857600080fd5b806313430d921461047e578063134895151461049357806318160ddd146104a657806323b872dd146104ae57600080fd5b806306fdde03116103a357806306fdde031461042e5780630919a95114610443578063095ea7b31461045857806309dac0611461046b57600080fd5b80623d4790146103c957806301ffc9a7146103fd57806305a7fc6114610420575b600080fd5b6103ea6103d7366004612f3f565b61019d6020526000908152604090205481565b6040519081526020015b60405180910390f35b61041061040b366004612f5c565b610924565b60405190151581526020016103f4565b610198546104109060ff1681565b61043661095b565b6040516103f49190612fde565b610456610451366004612f3f565b6109ed565b005b610410610466366004612ff1565b610a4b565b610456610479366004612f3f565b610a61565b6103ea6000805160206137a283398151915281565b6104566104a1366004612f3f565b610ab0565b6035546103ea565b6104106104bc36600461301d565b610bdf565b6104d46104cf36600461305e565b610c89565b6040516001600160a01b0390911681526020016103f4565b6103ea6104fa36600461305e565b600090815260fe602052604090206001015490565b6103ea61271081565b6103ea610526366004612ff1565b610cb4565b61045661053936600461305e565b610dfb565b61041061054c366004612f3f565b61019b6020526000908152604090205460ff1681565b610456610570366004613077565b610e5b565b604051601281526020016103f4565b6103ea610e86565b61045661059a366004613077565b610e95565b6104566105ad3660046130b5565b610f13565b6104106105c0366004612ff1565b610f9e565b6104106105d3366004612f3f565b6101956020526000908152604090205460ff1681565b6104566105f7366004612ff1565b610fda565b61045661060a36600461305e565b6110a8565b6103ea61061d366004612ff1565b6110b2565b6104566106303660046130b5565b6110d8565b6104106106433660046130e3565b611138565b6103ea610656366004612f3f565b6112ae565b610456610669366004612ff1565b6112d1565b61041061067c366004612f3f565b6101976020526000908152604090205460ff1681565b6103ea6106a0366004612f3f565b6001600160a01b031660009081526033602052604090205490565b610456611322565b6103ea60008051602061378283398151915281565b610456611359565b6104566106ee366004612ff1565b611399565b6103ea610701366004612f3f565b6113df565b6103ea7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd981565b61045661073b366004612ff1565b6113fd565b610162546001600160a01b03166104d4565b6103ea610760366004612ff1565b611498565b61045661077336600461305e565b6115d0565b610410610786366004613077565b611640565b6103ea61019e5481565b61043661166b565b6103ea61019f5481565b6103ea600081565b6104106107bd366004612ff1565b61167a565b6104566107d036600461305e565b611713565b6104566107e3366004613182565b61174d565b6104106107f6366004612ff1565b6117fa565b610410610809366004612f3f565b6101996020526000908152604090205460ff1681565b61045661082d36600461326e565b611807565b61083a6118d7565b6040516103f49190613367565b6104566108553660046133b4565b611939565b610456610868366004613077565b611a7f565b61041061087b366004612f3f565b61019a6020526000908152604090205460ff1681565b6103ea61089f366004612ff1565b611aa5565b6103ea6108b236600461342b565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6104566108eb3660046130b5565b611af3565b6103ea6108fe366004612f3f565b61019c6020526000908152604090205481565b61045661091f366004612f3f565b611b8b565b60006001600160e01b03198216637965db0b60e01b148061095557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606036805461096a90613459565b80601f016020809104026020016040519081016040528092919081815260200182805461099690613459565b80156109e35780601f106109b8576101008083540402835291602001916109e3565b820191906000526020600020905b8154815290600101906020018083116109c657829003601f168201915b5050505050905090565b610162546001600160a01b03163314610a215760405162461bcd60e51b8152600401610a189061348e565b60405180910390fd5b6001600160a01b0316600090815261019560205260409020805460ff19811660ff90911615179055565b6000610a58338484611c24565b50600192915050565b610a7960008051602061378283398151915233611640565b610a95576040516282b42960e81b815260040160405180910390fd5b610aad6000805160206137a283398151915282611d48565b50565b610162546001600160a01b03163314610adb5760405162461bcd60e51b8152600401610a189061348e565b60005b61019654811015610b4d57816001600160a01b03166101968281548110610b0757610b076134c3565b6000918252602090912001546001600160a01b03161415610b3b57604051634a613c4160e01b815260040160405180910390fd5b80610b45816134ef565b915050610ade565b50610196805460018082019092557f828feda00a4b64eb35101b6df8f6c29717b1ea6bae5dd03d3ddada8de0a9e7cb0180546001600160a01b0319166001600160a01b03841690811790915560008181526101996020526040808220805460ff1916909417909355915190917fa1f77cf0208e08e61710338f5370c9eba737ddc758d9f317dc5bdcff348e6e1a91a250565b6000610bec848484611d52565b6001600160a01b038416600090815260346020908152604080832033845290915290205482811015610c715760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610a18565b610c7e8533858403611c24565b506001949350505050565b6101968181548110610c9a57600080fd5b6000918252602090912001546001600160a01b0316905081565b60006002610130541415610cda5760405162461bcd60e51b8152600401610a189061350a565b6002610130556001600160a01b03831660009081526101996020526040902054839060ff16610d1c57604051634a613c4160e01b815260040160405180910390fd5b6101985460ff1615610d4157604051634a613c4160e01b815260040160405180910390fd5b6001600160a01b0384166000908152610199602052604090205460ff16610d7b57604051634a613c4160e01b815260040160405180910390fd5b610d853384611f20565b336000908152610195602052604090205483925060ff16610de3576001600160a01b038416600090815261019460205260409020620f42409060010154610dcc9084613541565b610dd69190613560565b610de09083613582565b91505b610dee84338461206e565b5060016101305592915050565b33600090815261019a602052604090205460ff16610e2b576040516282b42960e81b815260040160405180910390fd5b33600090815261019d6020526040902054610e47908290613582565b33600090815261019d602052604090205550565b600082815260fe6020526040902060010154610e778133612165565b610e8183836121c9565b505050565b6000610e9061224f565b905090565b6001600160a01b0381163314610f055760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a18565b610f0f82826122ca565b5050565b610162546001600160a01b03163314610f3e5760405162461bcd60e51b8152600401610a189061348e565b6001600160a01b03821660008181526101996020908152604091829020805460ff191685151590811790915591519182527ff7c93079dcbf699749d66345a351afab7d24219bb1d915c9f4fc4cf03f00d397910160405180910390a25050565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091610a58918590610fd5908690613599565b611c24565b33600090815261019a602052604090205460ff1661100a576040516282b42960e81b815260040160405180910390fd5b33600090815261019b602052604090205460ff161561103c57604051634a613c4160e01b815260040160405180910390fd5b33600090815261019d60205260408120546110579083613599565b33600090815261019c602052604090205490915081111561108b57604051634a613c4160e01b815260040160405180910390fd5b33600090815261019d60205260409020819055610e818383612331565b610aad3382611f20565b61019460205281600052604060002081600281106110cf57600080fd5b01549150829050565b6110f060008051602061378283398151915233611640565b61110c576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0391909116600090815261019a60205260409020805460ff1916911515919091179055565b6000600261013054141561115e5760405162461bcd60e51b8152600401610a189061350a565b6002610130556001600160a01b038516301461118d57604051630134249960e71b815260040160405180910390fd5b611196856112ae565b8411156111b657604051630134249960e71b815260040160405180910390fd5b60006111c28686611aa5565b90506111ce8786612331565b6040516323e30c8b60e01b81527f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9906001600160a01b038916906323e30c8b906112269033908b908b9088908c908c906004016135b1565b6020604051808303816000875af1158015611245573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611269919061360d565b1461128757604051634a613c4160e01b815260040160405180910390fd5b61129a876112958388613599565b611f20565b600191505060016101305595945050505050565b60006001600160a01b03821630146112c857506000919050565b505061019f5490565b6112e960008051602061378283398151915233611640565b611305576040516282b42960e81b815260040160405180910390fd5b6001600160a01b03909116600090815261019c6020526040902055565b610162546001600160a01b0316331461134d5760405162461bcd60e51b8152600401610a189061348e565b6113576000612410565b565b610162546001600160a01b031633146113845760405162461bcd60e51b8152600401610a189061348e565b610198805460ff19811660ff90911615179055565b6001600160a01b03821660009081526034602090815260408083203384529091528120546113c8908390613582565b90506113d5833383611c24565b610e818383611f20565b6001600160a01b038116600090815260996020526040812054610955565b610162546001600160a01b031633146114285760405162461bcd60e51b8152600401610a189061348e565b6001600160a01b03821630141561145257604051630134249960e71b815260040160405180910390fd5b6001600160a01b0382166000908152610199602052604090205460ff161561148d57604051634a613c4160e01b815260040160405180910390fd5b610f0f82338361206e565b600060026101305414156114be5760405162461bcd60e51b8152600401610a189061350a565b6002610130556001600160a01b03831660009081526101996020526040902054839060ff1661150057604051634a613c4160e01b815260040160405180910390fd5b6101985460ff161561152557604051634a613c4160e01b815260040160405180910390fd5b6001600160a01b0384166000908152610199602052604090205460ff1661155f57604051634a613c4160e01b815260040160405180910390fd5b61156b84333086612463565b336000908152610195602052604090205483925060ff166115c6576001600160a01b03841660009081526101946020526040902054620f4240906115af9084613541565b6115b99190613560565b6115c39083613582565b91505b610dee3383612331565b6115e860008051602061378283398151915233611640565b611604576040516282b42960e81b815260040160405180910390fd5b61019e8190556040518181527f2a870645d0d1cf8866b52d71ff02db01b3e1dc4b70f53e2c4e85dbe60969b92e9060200160405180910390a150565b600091825260fe602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606037805461096a90613459565b3360009081526034602090815260408083206001600160a01b0386168452909152812054828110156116fc5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610a18565b6117093385858403611c24565b5060019392505050565b61172b60008051602061378283398151915233611640565b611747576040516282b42960e81b815260040160405180910390fd5b61019f55565b610162546001600160a01b031633146117785760405162461bcd60e51b8152600401610a189061348e565b60408051808201825283815260208082018490526001600160a01b0386166000908152610194909152919091206117b0916002612e30565b5060408051838152602081018390526001600160a01b038516917ff36e5def0a9227cce1f483e62a6b168e5c1dd4aa7e887e300745cdc4c2b5ab2d910160405180910390a2505050565b6000610a58338484611d52565b600054610100900460ff166118225760005460ff1615611826565b303b155b6118895760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a18565b600054610100900460ff161580156118ab576000805461ffff19166101011790555b6118b784843385612563565b6118bf612732565b80156118d1576000805461ff00191690555b50505050565b60606101968054806020026020016040519081016040528092919081815260200182805480156109e357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611912575050505050905090565b834211156119895760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610a18565b6000609a5488888861199a8c6127a0565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006119f5826127c8565b90506000611a0582878787612816565b9050896001600160a01b0316816001600160a01b031614611a685760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610a18565b611a738a8a8a611c24565b50505050505050505050565b600082815260fe6020526040902060010154611a9b8133612165565b610e8183836122ca565b60006001600160a01b0383163014611ad057604051630134249960e71b815260040160405180910390fd5b61271061019e5483611ae29190613541565b611aec9190613560565b9392505050565b611b0b6000805160206137a283398151915233611640565b611b27576040516282b42960e81b815260040160405180910390fd5b6001600160a01b038216600081815261019b6020908152604091829020805460ff19168515159081179091558251938452908301527fe8699cf681560fd07de85543bd994263f4557bdc5179dd702f256d15fd083e1d910160405180910390a15050565b610162546001600160a01b03163314611bb65760405162461bcd60e51b8152600401610a189061348e565b6001600160a01b038116611c1b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a18565b610aad81612410565b6001600160a01b038316611c865760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610a18565b6001600160a01b038216611ce75760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610a18565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b610f0f82826121c9565b6001600160a01b038316611db65760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610a18565b6001600160a01b038216611e185760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610a18565b6001600160a01b03831660009081526033602052604090205481811015611e905760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610a18565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290611ec7908490613599565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611f1391815260200190565b60405180910390a36118d1565b6001600160a01b038216611f805760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610a18565b6001600160a01b03821660009081526033602052604090205481811015611ff45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610a18565b6001600160a01b0383166000908152603360205260408120838303905560358054849290612023908490613582565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916120ca9190613626565b6000604051808303816000865af19150503d8060008114612107576040519150601f19603f3d011682016040523d82523d6000602084013e61210c565b606091505b509150915081158061213a575080511580159061213a5750808060200190518101906121389190613642565b155b1561215e5784828260405163e7e40b5b60e01b8152600401610a189392919061365f565b5050505050565b61216f8282611640565b610f0f57612187816001600160a01b0316601461283e565b61219283602061283e565b6040516020016121a3929190613694565b60408051601f198184030181529082905262461bcd60e51b8252610a1891600401612fde565b6121d38282611640565b610f0f57600082815260fe602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561220b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610e907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61227e60655490565b6066546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6122d48282611640565b15610f0f57600082815260fe602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0382166123875760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610a18565b80603560008282546123999190613599565b90915550506001600160a01b038216600090815260336020526040812080548392906123c6908490613599565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b61016280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916124c79190613626565b6000604051808303816000865af19150503d8060008114612504576040519150601f19603f3d011682016040523d82523d6000602084013e612509565b606091505b509150915081158061253757508051158015906125375750808060200190518101906125359190613642565b155b1561255b5785828260405163e7e40b5b60e01b8152600401610a189392919061365f565b505050505050565b61256b6129da565b612573612a01565b61259684604051806040016040528060018152602001603160f81b815250612a31565b6125a08484612a72565b6125a984612ac0565b6125b1612b0e565b6125ba82612410565b60005b815181101561215e57600161019760008484815181106125df576125df6134c3565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550610196828281518110612633576126336134c3565b602090810291909101810151825460018101845560009384528284200180546001600160a01b0319166001600160a01b039092169190911790556040805180820190915261019080825291810191909152835190916101949185908590811061269e5761269e6134c3565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000209060026126d4929190612e6e565b50600161019960008484815181106126ee576126ee6134c3565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061272a816134ef565b9150506125bd565b61274a60008051602061378283398151915233611d48565b6127626000805160206137a283398151915233611d48565b6127886000805160206137a2833981519152600080516020613782833981519152612b3d565b61135760008051602061378283398151915280612b3d565b6001600160a01b03811660009081526099602052604090208054600181018255905b50919050565b60006109556127d561224f565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061282787878787612b88565b9150915061283481612c75565b5095945050505050565b6060600061284d836002613541565b612858906002613599565b67ffffffffffffffff811115612870576128706131b7565b6040519080825280601f01601f19166020018201604052801561289a576020820181803683370190505b509050600360fc1b816000815181106128b5576128b56134c3565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106128e4576128e46134c3565b60200101906001600160f81b031916908160001a9053506000612908846002613541565b612913906001613599565b90505b600181111561298b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612947576129476134c3565b1a60f81b82828151811061295d5761295d6134c3565b60200101906001600160f81b031916908160001a90535060049490941c9361298481613709565b9050612916565b508315611aec5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a18565b600054610100900460ff166113575760405162461bcd60e51b8152600401610a1890613720565b600054610100900460ff16612a285760405162461bcd60e51b8152600401610a1890613720565b61135733612410565b600054610100900460ff16612a585760405162461bcd60e51b8152600401610a1890613720565b815160209283012081519190920120606591909155606655565b600054610100900460ff16612a995760405162461bcd60e51b8152600401610a1890613720565b8151612aac906036906020850190612ea2565b508051610e81906037906020840190612ea2565b600054610100900460ff16612ae75760405162461bcd60e51b8152600401610a1890613720565b507f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9609a55565b600054610100900460ff16612b355760405162461bcd60e51b8152600401610a1890613720565b600161013055565b600082815260fe6020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612bbf5750600090506003612c6c565b8460ff16601b14158015612bd757508460ff16601c14155b15612be85750600090506004612c6c565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612c3c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612c6557600060019250925050612c6c565b9150600090505b94509492505050565b6000816004811115612c8957612c8961376b565b1415612c925750565b6001816004811115612ca657612ca661376b565b1415612cf45760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610a18565b6002816004811115612d0857612d0861376b565b1415612d565760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a18565b6003816004811115612d6a57612d6a61376b565b1415612dc35760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610a18565b6004816004811115612dd757612dd761376b565b1415610aad5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610a18565b8260028101928215612e5e579160200282015b82811115612e5e578251825591602001919060010190612e43565b50612e6a929150612f15565b5090565b8260028101928215612e5e579160200282015b82811115612e5e578251829061ffff16905591602001919060010190612e81565b828054612eae90613459565b90600052602060002090601f016020900481019282612ed05760008555612e5e565b82601f10612ee957805160ff1916838001178555612e5e565b82800160010185558215612e5e5791820182811115612e5e578251825591602001919060010190612e43565b5b80821115612e6a5760008155600101612f16565b6001600160a01b0381168114610aad57600080fd5b600060208284031215612f5157600080fd5b8135611aec81612f2a565b600060208284031215612f6e57600080fd5b81356001600160e01b031981168114611aec57600080fd5b60005b83811015612fa1578181015183820152602001612f89565b838111156118d15750506000910152565b60008151808452612fca816020860160208601612f86565b601f01601f19169290920160200192915050565b602081526000611aec6020830184612fb2565b6000806040838503121561300457600080fd5b823561300f81612f2a565b946020939093013593505050565b60008060006060848603121561303257600080fd5b833561303d81612f2a565b9250602084013561304d81612f2a565b929592945050506040919091013590565b60006020828403121561307057600080fd5b5035919050565b6000806040838503121561308a57600080fd5b82359150602083013561309c81612f2a565b809150509250929050565b8015158114610aad57600080fd5b600080604083850312156130c857600080fd5b82356130d381612f2a565b9150602083013561309c816130a7565b6000806000806000608086880312156130fb57600080fd5b853561310681612f2a565b9450602086013561311681612f2a565b935060408601359250606086013567ffffffffffffffff8082111561313a57600080fd5b818801915088601f83011261314e57600080fd5b81358181111561315d57600080fd5b89602082850101111561316f57600080fd5b9699959850939650602001949392505050565b60008060006060848603121561319757600080fd5b83356131a281612f2a565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156131f6576131f66131b7565b604052919050565b600082601f83011261320f57600080fd5b813567ffffffffffffffff811115613229576132296131b7565b61323c601f8201601f19166020016131cd565b81815284602083860101111561325157600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561328357600080fd5b833567ffffffffffffffff8082111561329b57600080fd5b6132a7878388016131fe565b94506020915081860135818111156132be57600080fd5b6132ca888289016131fe565b9450506040860135818111156132df57600080fd5b8601601f810188136132f057600080fd5b803582811115613302576133026131b7565b8060051b92506133138484016131cd565b818152928201840192848101908a85111561332d57600080fd5b928501925b84841015613357578335925061334783612f2a565b8282529285019290850190613332565b8096505050505050509250925092565b6020808252825182820181905260009190848201906040850190845b818110156133a85783516001600160a01b031683529284019291840191600101613383565b50909695505050505050565b600080600080600080600060e0888a0312156133cf57600080fd5b87356133da81612f2a565b965060208801356133ea81612f2a565b95506040880135945060608801359350608088013560ff8116811461340e57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561343e57600080fd5b823561344981612f2a565b9150602083013561309c81612f2a565b600181811c9082168061346d57607f821691505b602082108114156127c257634e487b7160e01b600052602260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415613503576135036134d9565b5060010190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600081600019048311821515161561355b5761355b6134d9565b500290565b60008261357d57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015613594576135946134d9565b500390565b600082198211156135ac576135ac6134d9565b500190565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b60006020828403121561361f57600080fd5b5051919050565b60008251613638818460208701612f86565b9190910192915050565b60006020828403121561365457600080fd5b8151611aec816130a7565b6001600160a01b0384168152821515602082015260606040820181905260009061368b90830184612fb2565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516136cc816017850160208801612f86565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516136fd816028840160208801612f86565b01602801949350505050565b600081613718576137186134d9565b506000190190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052602160045260246000fdfedf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42d3eedd6d69d410e954f4c622838ecc3acae9fdcd83cad412075c85b092770656a2646970667358221220c9c68aab08821baca95b3e635439da8befb81b553b7969bb3f98dd1e5b1a8f1164736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103c45760003560e01c80636d1ac36a116101ff578063a217fddf1161011a578063d505accf116100ad578063dd62ed3e1161007c578063dd62ed3e146108a4578063e68b14ff146108dd578063ee7a069a146108f0578063f2fde38b1461091157600080fd5b8063d505accf14610847578063d547741f1461085a578063d936547e1461086d578063d9d98ce41461089157600080fd5b8063a9059cbb116100e9578063a9059cbb146107e8578063bf15c224146107fb578063ca2759311461081f578063cd4839ca1461083257600080fd5b8063a217fddf146107a7578063a457c2d7146107af578063a6beee4a146107c2578063a7c571fe146107d557600080fd5b80638980f11f1161019257806391d148541161016157806391d1485414610778578063940a1dc01461078b57806395d89b4114610795578063a140edb41461079d57600080fd5b80638980f11f1461072d5780638da5cb5b146107405780639006a50f14610752578063907a267b1461076557600080fd5b80637601f069116101ce5780637601f069146106d857806379cc6790146106e05780637ecebe00146106f35780638237e5381461070657600080fd5b80636d1ac36a1461066e57806370a0823114610692578063715018a6146106bb57806375b238fc146106c357600080fd5b8063288aafcb116102ef578063398daa851161028257806353d6fd591161025157806353d6fd59146106225780635cffe9de14610635578063613255ab146106485780636c00c7f01461065b57600080fd5b8063398daa85146105c557806340c10f19146105e957806342966c68146105fc578063459d0df01461060f57600080fd5b80633644e515116102be5780633644e5151461058457806336568abe1461058c5780633864376b1461059f57806339509351146105b257600080fd5b8063288aafcb1461052b5780632e48152c1461053e5780632f2ff15d14610562578063313ce5671461057557600080fd5b806313430d9211610367578063248756d911610336578063248756d9146104c1578063248a9ca3146104ec578063249d39e91461050f578063280cf3ed1461051857600080fd5b806313430d921461047e578063134895151461049357806318160ddd146104a657806323b872dd146104ae57600080fd5b806306fdde03116103a357806306fdde031461042e5780630919a95114610443578063095ea7b31461045857806309dac0611461046b57600080fd5b80623d4790146103c957806301ffc9a7146103fd57806305a7fc6114610420575b600080fd5b6103ea6103d7366004612f3f565b61019d6020526000908152604090205481565b6040519081526020015b60405180910390f35b61041061040b366004612f5c565b610924565b60405190151581526020016103f4565b610198546104109060ff1681565b61043661095b565b6040516103f49190612fde565b610456610451366004612f3f565b6109ed565b005b610410610466366004612ff1565b610a4b565b610456610479366004612f3f565b610a61565b6103ea6000805160206137a283398151915281565b6104566104a1366004612f3f565b610ab0565b6035546103ea565b6104106104bc36600461301d565b610bdf565b6104d46104cf36600461305e565b610c89565b6040516001600160a01b0390911681526020016103f4565b6103ea6104fa36600461305e565b600090815260fe602052604090206001015490565b6103ea61271081565b6103ea610526366004612ff1565b610cb4565b61045661053936600461305e565b610dfb565b61041061054c366004612f3f565b61019b6020526000908152604090205460ff1681565b610456610570366004613077565b610e5b565b604051601281526020016103f4565b6103ea610e86565b61045661059a366004613077565b610e95565b6104566105ad3660046130b5565b610f13565b6104106105c0366004612ff1565b610f9e565b6104106105d3366004612f3f565b6101956020526000908152604090205460ff1681565b6104566105f7366004612ff1565b610fda565b61045661060a36600461305e565b6110a8565b6103ea61061d366004612ff1565b6110b2565b6104566106303660046130b5565b6110d8565b6104106106433660046130e3565b611138565b6103ea610656366004612f3f565b6112ae565b610456610669366004612ff1565b6112d1565b61041061067c366004612f3f565b6101976020526000908152604090205460ff1681565b6103ea6106a0366004612f3f565b6001600160a01b031660009081526033602052604090205490565b610456611322565b6103ea60008051602061378283398151915281565b610456611359565b6104566106ee366004612ff1565b611399565b6103ea610701366004612f3f565b6113df565b6103ea7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd981565b61045661073b366004612ff1565b6113fd565b610162546001600160a01b03166104d4565b6103ea610760366004612ff1565b611498565b61045661077336600461305e565b6115d0565b610410610786366004613077565b611640565b6103ea61019e5481565b61043661166b565b6103ea61019f5481565b6103ea600081565b6104106107bd366004612ff1565b61167a565b6104566107d036600461305e565b611713565b6104566107e3366004613182565b61174d565b6104106107f6366004612ff1565b6117fa565b610410610809366004612f3f565b6101996020526000908152604090205460ff1681565b61045661082d36600461326e565b611807565b61083a6118d7565b6040516103f49190613367565b6104566108553660046133b4565b611939565b610456610868366004613077565b611a7f565b61041061087b366004612f3f565b61019a6020526000908152604090205460ff1681565b6103ea61089f366004612ff1565b611aa5565b6103ea6108b236600461342b565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6104566108eb3660046130b5565b611af3565b6103ea6108fe366004612f3f565b61019c6020526000908152604090205481565b61045661091f366004612f3f565b611b8b565b60006001600160e01b03198216637965db0b60e01b148061095557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606036805461096a90613459565b80601f016020809104026020016040519081016040528092919081815260200182805461099690613459565b80156109e35780601f106109b8576101008083540402835291602001916109e3565b820191906000526020600020905b8154815290600101906020018083116109c657829003601f168201915b5050505050905090565b610162546001600160a01b03163314610a215760405162461bcd60e51b8152600401610a189061348e565b60405180910390fd5b6001600160a01b0316600090815261019560205260409020805460ff19811660ff90911615179055565b6000610a58338484611c24565b50600192915050565b610a7960008051602061378283398151915233611640565b610a95576040516282b42960e81b815260040160405180910390fd5b610aad6000805160206137a283398151915282611d48565b50565b610162546001600160a01b03163314610adb5760405162461bcd60e51b8152600401610a189061348e565b60005b61019654811015610b4d57816001600160a01b03166101968281548110610b0757610b076134c3565b6000918252602090912001546001600160a01b03161415610b3b57604051634a613c4160e01b815260040160405180910390fd5b80610b45816134ef565b915050610ade565b50610196805460018082019092557f828feda00a4b64eb35101b6df8f6c29717b1ea6bae5dd03d3ddada8de0a9e7cb0180546001600160a01b0319166001600160a01b03841690811790915560008181526101996020526040808220805460ff1916909417909355915190917fa1f77cf0208e08e61710338f5370c9eba737ddc758d9f317dc5bdcff348e6e1a91a250565b6000610bec848484611d52565b6001600160a01b038416600090815260346020908152604080832033845290915290205482811015610c715760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610a18565b610c7e8533858403611c24565b506001949350505050565b6101968181548110610c9a57600080fd5b6000918252602090912001546001600160a01b0316905081565b60006002610130541415610cda5760405162461bcd60e51b8152600401610a189061350a565b6002610130556001600160a01b03831660009081526101996020526040902054839060ff16610d1c57604051634a613c4160e01b815260040160405180910390fd5b6101985460ff1615610d4157604051634a613c4160e01b815260040160405180910390fd5b6001600160a01b0384166000908152610199602052604090205460ff16610d7b57604051634a613c4160e01b815260040160405180910390fd5b610d853384611f20565b336000908152610195602052604090205483925060ff16610de3576001600160a01b038416600090815261019460205260409020620f42409060010154610dcc9084613541565b610dd69190613560565b610de09083613582565b91505b610dee84338461206e565b5060016101305592915050565b33600090815261019a602052604090205460ff16610e2b576040516282b42960e81b815260040160405180910390fd5b33600090815261019d6020526040902054610e47908290613582565b33600090815261019d602052604090205550565b600082815260fe6020526040902060010154610e778133612165565b610e8183836121c9565b505050565b6000610e9061224f565b905090565b6001600160a01b0381163314610f055760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a18565b610f0f82826122ca565b5050565b610162546001600160a01b03163314610f3e5760405162461bcd60e51b8152600401610a189061348e565b6001600160a01b03821660008181526101996020908152604091829020805460ff191685151590811790915591519182527ff7c93079dcbf699749d66345a351afab7d24219bb1d915c9f4fc4cf03f00d397910160405180910390a25050565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091610a58918590610fd5908690613599565b611c24565b33600090815261019a602052604090205460ff1661100a576040516282b42960e81b815260040160405180910390fd5b33600090815261019b602052604090205460ff161561103c57604051634a613c4160e01b815260040160405180910390fd5b33600090815261019d60205260408120546110579083613599565b33600090815261019c602052604090205490915081111561108b57604051634a613c4160e01b815260040160405180910390fd5b33600090815261019d60205260409020819055610e818383612331565b610aad3382611f20565b61019460205281600052604060002081600281106110cf57600080fd5b01549150829050565b6110f060008051602061378283398151915233611640565b61110c576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0391909116600090815261019a60205260409020805460ff1916911515919091179055565b6000600261013054141561115e5760405162461bcd60e51b8152600401610a189061350a565b6002610130556001600160a01b038516301461118d57604051630134249960e71b815260040160405180910390fd5b611196856112ae565b8411156111b657604051630134249960e71b815260040160405180910390fd5b60006111c28686611aa5565b90506111ce8786612331565b6040516323e30c8b60e01b81527f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9906001600160a01b038916906323e30c8b906112269033908b908b9088908c908c906004016135b1565b6020604051808303816000875af1158015611245573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611269919061360d565b1461128757604051634a613c4160e01b815260040160405180910390fd5b61129a876112958388613599565b611f20565b600191505060016101305595945050505050565b60006001600160a01b03821630146112c857506000919050565b505061019f5490565b6112e960008051602061378283398151915233611640565b611305576040516282b42960e81b815260040160405180910390fd5b6001600160a01b03909116600090815261019c6020526040902055565b610162546001600160a01b0316331461134d5760405162461bcd60e51b8152600401610a189061348e565b6113576000612410565b565b610162546001600160a01b031633146113845760405162461bcd60e51b8152600401610a189061348e565b610198805460ff19811660ff90911615179055565b6001600160a01b03821660009081526034602090815260408083203384529091528120546113c8908390613582565b90506113d5833383611c24565b610e818383611f20565b6001600160a01b038116600090815260996020526040812054610955565b610162546001600160a01b031633146114285760405162461bcd60e51b8152600401610a189061348e565b6001600160a01b03821630141561145257604051630134249960e71b815260040160405180910390fd5b6001600160a01b0382166000908152610199602052604090205460ff161561148d57604051634a613c4160e01b815260040160405180910390fd5b610f0f82338361206e565b600060026101305414156114be5760405162461bcd60e51b8152600401610a189061350a565b6002610130556001600160a01b03831660009081526101996020526040902054839060ff1661150057604051634a613c4160e01b815260040160405180910390fd5b6101985460ff161561152557604051634a613c4160e01b815260040160405180910390fd5b6001600160a01b0384166000908152610199602052604090205460ff1661155f57604051634a613c4160e01b815260040160405180910390fd5b61156b84333086612463565b336000908152610195602052604090205483925060ff166115c6576001600160a01b03841660009081526101946020526040902054620f4240906115af9084613541565b6115b99190613560565b6115c39083613582565b91505b610dee3383612331565b6115e860008051602061378283398151915233611640565b611604576040516282b42960e81b815260040160405180910390fd5b61019e8190556040518181527f2a870645d0d1cf8866b52d71ff02db01b3e1dc4b70f53e2c4e85dbe60969b92e9060200160405180910390a150565b600091825260fe602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606037805461096a90613459565b3360009081526034602090815260408083206001600160a01b0386168452909152812054828110156116fc5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610a18565b6117093385858403611c24565b5060019392505050565b61172b60008051602061378283398151915233611640565b611747576040516282b42960e81b815260040160405180910390fd5b61019f55565b610162546001600160a01b031633146117785760405162461bcd60e51b8152600401610a189061348e565b60408051808201825283815260208082018490526001600160a01b0386166000908152610194909152919091206117b0916002612e30565b5060408051838152602081018390526001600160a01b038516917ff36e5def0a9227cce1f483e62a6b168e5c1dd4aa7e887e300745cdc4c2b5ab2d910160405180910390a2505050565b6000610a58338484611d52565b600054610100900460ff166118225760005460ff1615611826565b303b155b6118895760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a18565b600054610100900460ff161580156118ab576000805461ffff19166101011790555b6118b784843385612563565b6118bf612732565b80156118d1576000805461ff00191690555b50505050565b60606101968054806020026020016040519081016040528092919081815260200182805480156109e357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611912575050505050905090565b834211156119895760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610a18565b6000609a5488888861199a8c6127a0565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006119f5826127c8565b90506000611a0582878787612816565b9050896001600160a01b0316816001600160a01b031614611a685760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610a18565b611a738a8a8a611c24565b50505050505050505050565b600082815260fe6020526040902060010154611a9b8133612165565b610e8183836122ca565b60006001600160a01b0383163014611ad057604051630134249960e71b815260040160405180910390fd5b61271061019e5483611ae29190613541565b611aec9190613560565b9392505050565b611b0b6000805160206137a283398151915233611640565b611b27576040516282b42960e81b815260040160405180910390fd5b6001600160a01b038216600081815261019b6020908152604091829020805460ff19168515159081179091558251938452908301527fe8699cf681560fd07de85543bd994263f4557bdc5179dd702f256d15fd083e1d910160405180910390a15050565b610162546001600160a01b03163314611bb65760405162461bcd60e51b8152600401610a189061348e565b6001600160a01b038116611c1b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a18565b610aad81612410565b6001600160a01b038316611c865760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610a18565b6001600160a01b038216611ce75760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610a18565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b610f0f82826121c9565b6001600160a01b038316611db65760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610a18565b6001600160a01b038216611e185760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610a18565b6001600160a01b03831660009081526033602052604090205481811015611e905760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610a18565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290611ec7908490613599565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611f1391815260200190565b60405180910390a36118d1565b6001600160a01b038216611f805760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610a18565b6001600160a01b03821660009081526033602052604090205481811015611ff45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610a18565b6001600160a01b0383166000908152603360205260408120838303905560358054849290612023908490613582565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916120ca9190613626565b6000604051808303816000865af19150503d8060008114612107576040519150601f19603f3d011682016040523d82523d6000602084013e61210c565b606091505b509150915081158061213a575080511580159061213a5750808060200190518101906121389190613642565b155b1561215e5784828260405163e7e40b5b60e01b8152600401610a189392919061365f565b5050505050565b61216f8282611640565b610f0f57612187816001600160a01b0316601461283e565b61219283602061283e565b6040516020016121a3929190613694565b60408051601f198184030181529082905262461bcd60e51b8252610a1891600401612fde565b6121d38282611640565b610f0f57600082815260fe602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561220b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610e907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61227e60655490565b6066546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6122d48282611640565b15610f0f57600082815260fe602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0382166123875760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610a18565b80603560008282546123999190613599565b90915550506001600160a01b038216600090815260336020526040812080548392906123c6908490613599565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b61016280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916124c79190613626565b6000604051808303816000865af19150503d8060008114612504576040519150601f19603f3d011682016040523d82523d6000602084013e612509565b606091505b509150915081158061253757508051158015906125375750808060200190518101906125359190613642565b155b1561255b5785828260405163e7e40b5b60e01b8152600401610a189392919061365f565b505050505050565b61256b6129da565b612573612a01565b61259684604051806040016040528060018152602001603160f81b815250612a31565b6125a08484612a72565b6125a984612ac0565b6125b1612b0e565b6125ba82612410565b60005b815181101561215e57600161019760008484815181106125df576125df6134c3565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550610196828281518110612633576126336134c3565b602090810291909101810151825460018101845560009384528284200180546001600160a01b0319166001600160a01b039092169190911790556040805180820190915261019080825291810191909152835190916101949185908590811061269e5761269e6134c3565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000209060026126d4929190612e6e565b50600161019960008484815181106126ee576126ee6134c3565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061272a816134ef565b9150506125bd565b61274a60008051602061378283398151915233611d48565b6127626000805160206137a283398151915233611d48565b6127886000805160206137a2833981519152600080516020613782833981519152612b3d565b61135760008051602061378283398151915280612b3d565b6001600160a01b03811660009081526099602052604090208054600181018255905b50919050565b60006109556127d561224f565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061282787878787612b88565b9150915061283481612c75565b5095945050505050565b6060600061284d836002613541565b612858906002613599565b67ffffffffffffffff811115612870576128706131b7565b6040519080825280601f01601f19166020018201604052801561289a576020820181803683370190505b509050600360fc1b816000815181106128b5576128b56134c3565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106128e4576128e46134c3565b60200101906001600160f81b031916908160001a9053506000612908846002613541565b612913906001613599565b90505b600181111561298b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612947576129476134c3565b1a60f81b82828151811061295d5761295d6134c3565b60200101906001600160f81b031916908160001a90535060049490941c9361298481613709565b9050612916565b508315611aec5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a18565b600054610100900460ff166113575760405162461bcd60e51b8152600401610a1890613720565b600054610100900460ff16612a285760405162461bcd60e51b8152600401610a1890613720565b61135733612410565b600054610100900460ff16612a585760405162461bcd60e51b8152600401610a1890613720565b815160209283012081519190920120606591909155606655565b600054610100900460ff16612a995760405162461bcd60e51b8152600401610a1890613720565b8151612aac906036906020850190612ea2565b508051610e81906037906020840190612ea2565b600054610100900460ff16612ae75760405162461bcd60e51b8152600401610a1890613720565b507f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9609a55565b600054610100900460ff16612b355760405162461bcd60e51b8152600401610a1890613720565b600161013055565b600082815260fe6020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612bbf5750600090506003612c6c565b8460ff16601b14158015612bd757508460ff16601c14155b15612be85750600090506004612c6c565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612c3c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612c6557600060019250925050612c6c565b9150600090505b94509492505050565b6000816004811115612c8957612c8961376b565b1415612c925750565b6001816004811115612ca657612ca661376b565b1415612cf45760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610a18565b6002816004811115612d0857612d0861376b565b1415612d565760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a18565b6003816004811115612d6a57612d6a61376b565b1415612dc35760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610a18565b6004816004811115612dd757612dd761376b565b1415610aad5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610a18565b8260028101928215612e5e579160200282015b82811115612e5e578251825591602001919060010190612e43565b50612e6a929150612f15565b5090565b8260028101928215612e5e579160200282015b82811115612e5e578251829061ffff16905591602001919060010190612e81565b828054612eae90613459565b90600052602060002090601f016020900481019282612ed05760008555612e5e565b82601f10612ee957805160ff1916838001178555612e5e565b82800160010185558215612e5e5791820182811115612e5e578251825591602001919060010190612e43565b5b80821115612e6a5760008155600101612f16565b6001600160a01b0381168114610aad57600080fd5b600060208284031215612f5157600080fd5b8135611aec81612f2a565b600060208284031215612f6e57600080fd5b81356001600160e01b031981168114611aec57600080fd5b60005b83811015612fa1578181015183820152602001612f89565b838111156118d15750506000910152565b60008151808452612fca816020860160208601612f86565b601f01601f19169290920160200192915050565b602081526000611aec6020830184612fb2565b6000806040838503121561300457600080fd5b823561300f81612f2a565b946020939093013593505050565b60008060006060848603121561303257600080fd5b833561303d81612f2a565b9250602084013561304d81612f2a565b929592945050506040919091013590565b60006020828403121561307057600080fd5b5035919050565b6000806040838503121561308a57600080fd5b82359150602083013561309c81612f2a565b809150509250929050565b8015158114610aad57600080fd5b600080604083850312156130c857600080fd5b82356130d381612f2a565b9150602083013561309c816130a7565b6000806000806000608086880312156130fb57600080fd5b853561310681612f2a565b9450602086013561311681612f2a565b935060408601359250606086013567ffffffffffffffff8082111561313a57600080fd5b818801915088601f83011261314e57600080fd5b81358181111561315d57600080fd5b89602082850101111561316f57600080fd5b9699959850939650602001949392505050565b60008060006060848603121561319757600080fd5b83356131a281612f2a565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156131f6576131f66131b7565b604052919050565b600082601f83011261320f57600080fd5b813567ffffffffffffffff811115613229576132296131b7565b61323c601f8201601f19166020016131cd565b81815284602083860101111561325157600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561328357600080fd5b833567ffffffffffffffff8082111561329b57600080fd5b6132a7878388016131fe565b94506020915081860135818111156132be57600080fd5b6132ca888289016131fe565b9450506040860135818111156132df57600080fd5b8601601f810188136132f057600080fd5b803582811115613302576133026131b7565b8060051b92506133138484016131cd565b818152928201840192848101908a85111561332d57600080fd5b928501925b84841015613357578335925061334783612f2a565b8282529285019290850190613332565b8096505050505050509250925092565b6020808252825182820181905260009190848201906040850190845b818110156133a85783516001600160a01b031683529284019291840191600101613383565b50909695505050505050565b600080600080600080600060e0888a0312156133cf57600080fd5b87356133da81612f2a565b965060208801356133ea81612f2a565b95506040880135945060608801359350608088013560ff8116811461340e57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561343e57600080fd5b823561344981612f2a565b9150602083013561309c81612f2a565b600181811c9082168061346d57607f821691505b602082108114156127c257634e487b7160e01b600052602260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415613503576135036134d9565b5060010190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600081600019048311821515161561355b5761355b6134d9565b500290565b60008261357d57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015613594576135946134d9565b500390565b600082198211156135ac576135ac6134d9565b500190565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b60006020828403121561361f57600080fd5b5051919050565b60008251613638818460208701612f86565b9190910192915050565b60006020828403121561365457600080fd5b8151611aec816130a7565b6001600160a01b0384168152821515602082015260606040820181905260009061368b90830184612fb2565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516136cc816017850160208801612f86565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516136fd816028840160208801612f86565b01602801949350505050565b600081613718576137186134d9565b506000190190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052602160045260246000fdfedf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42d3eedd6d69d410e954f4c622838ecc3acae9fdcd83cad412075c85b092770656a2646970667358221220c9c68aab08821baca95b3e635439da8befb81b553b7969bb3f98dd1e5b1a8f1164736f6c634300080b0033",
  "devdoc": {
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "params": {
            "data": "The resulting data from the call. This is error data when the call was not a success. Otherwise,                this is malformed data when the call was a success.",
            "success": "If the call to the token was a success.",
            "target": "The target address."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "params": {
          "amount": "The amount of tokens to be burned."
        }
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance.",
        "params": {
          "account": "The address the burn tokens from.",
          "amount": "The amount of tokens to burn."
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "flashFee(address,uint256)": {
        "params": {
          "amount": "The amount of `token` to flash mint.",
          "token": "The address of the token.`"
        },
        "returns": {
          "_0": "The flash loan fee."
        }
      },
      "flashLoan(address,address,uint256,bytes)": {
        "params": {
          "amount": "How much to flash mint.",
          "data": "ABI encoded data to pass to the receiver.",
          "receiver": "The address which will receive the flash minted tokens.",
          "token": "The address of the token to flash mint."
        },
        "returns": {
          "_0": "If the flash loan was successful."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "lowerHasMinted(uint256)": {
        "params": {
          "amount": "The amount to lower the minted amount by."
        }
      },
      "maxFlashLoan(address)": {
        "params": {
          "token": "The address of the token."
        },
        "returns": {
          "_0": "The maximum amount of `token` that can be flashed loaned."
        }
      },
      "mint(address,uint256)": {
        "params": {
          "amount": "The amount of tokens to mint.",
          "recipient": "The address to mint the tokens to."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "details": "See {IERC20Permit-nonces}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseMinter(address,bool)": {
        "params": {
          "minter": "The address to set as paused or unpaused.",
          "state": "A flag indicating if the minter should be paused or unpaused."
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC20Permit-permit}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setCeiling(address,uint256)": {
        "params": {
          "maximum": "The maximum amount of tokens that the minter is allowed to mint.",
          "minter": "The address of the minter."
        }
      },
      "setFlashFee(uint256)": {
        "params": {
          "newFee": "The new flash mint fee."
        }
      },
      "setMaxFlashLoan(uint256)": {
        "params": {
          "_maxFlashLoanAmount": "The maximum flashloan amount."
        }
      },
      "setSentinel(address)": {
        "params": {
          "sentinel": "The address to set as a sentinel."
        }
      },
      "setWhitelist(address,bool)": {
        "params": {
          "minter": "The account to permit to mint.",
          "state": "A flag indicating if the minter should be able to mint."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "notice": "An error used to indicate that a call to an ERC20 contract failed."
        }
      ],
      "IllegalArgument()": [
        {
          "notice": "An error used to indicate that an action could not be completed because of an illegal argument was passed         to the function."
        }
      ],
      "IllegalState()": [
        {
          "notice": "An error used to indicate that an action could not be completed because the contract either already existed         or entered an illegal condition which is not recoverable from."
        }
      ],
      "Unauthorized()": [
        {
          "notice": "An error used to indicate that an action could not be completed because either the `msg.sender` or         `msg.origin` is not authorized."
        }
      ]
    },
    "events": {
      "Paused(address,bool)": {
        "notice": "An event which is emitted when a minter is paused from minting."
      },
      "SetFlashMintFee(uint256)": {
        "notice": "An event which is emitted when the flash mint fee is updated."
      }
    },
    "kind": "user",
    "methods": {
      "ADMIN_ROLE()": {
        "notice": "The identifier of the role which maintains other roles."
      },
      "BPS()": {
        "notice": "The maximum number of basis points needed to represent 100%."
      },
      "CALLBACK_SUCCESS()": {
        "notice": "The expected return value from a flash mint receiver"
      },
      "SENTINEL_ROLE()": {
        "notice": "The identifier of the role which allows accounts to mint tokens."
      },
      "burn(uint256)": {
        "notice": "Burns `amount` tokens from `msg.sender`."
      },
      "flashFee(address,uint256)": {
        "notice": "Gets the flash loan fee of `amount` of `token`."
      },
      "flashLoan(address,address,uint256,bytes)": {
        "notice": "Performs a flash mint (called flash loan to confirm with ERC3156 standard)."
      },
      "flashMintFee()": {
        "notice": "Fee for flash minting"
      },
      "lowerHasMinted(uint256)": {
        "notice": "Lowers the number of tokens which the `msg.sender` has minted.This reverts if the `msg.sender` is not whitelisted."
      },
      "maxFlashLoan(address)": {
        "notice": "Gets the maximum amount to be flash loaned of a token."
      },
      "maxFlashLoanAmount()": {
        "notice": "Max flash mint amount"
      },
      "mint(address,uint256)": {
        "notice": "Mints tokens to `a recipient.`This function reverts if `msg.sender` is not whitelisted.This function reverts if `msg.sender` is paused.This function reverts if `msg.sender` has exceeded their mintable ceiling."
      },
      "mintCeiling(address)": {
        "notice": "The amount that each address is permitted to mint."
      },
      "pauseMinter(address,bool)": {
        "notice": "Pauses `minter` from minting tokens.This function reverts if `msg.sender` is not a sentinel."
      },
      "paused(address)": {
        "notice": "A set of addresses which are paused from minting new tokens."
      },
      "setCeiling(address,uint256)": {
        "notice": "Sets the maximum amount of tokens that `minter` is allowed to mint.This function reverts if `msg.sender` is not an admin."
      },
      "setFlashFee(uint256)": {
        "notice": "Sets the flash minting fee.This function reverts if `msg.sender` is not an admin."
      },
      "setMaxFlashLoan(uint256)": {
        "notice": "Adjusts the maximum flashloan amount."
      },
      "setSentinel(address)": {
        "notice": "Sets `sentinel` as a sentinel.This function reverts if `msg.sender` is not an admin."
      },
      "setWhitelist(address,bool)": {
        "notice": "Sets `minter` as whitelisted to mint.This function reverts if `msg.sender` is not an admin."
      },
      "totalMinted(address)": {
        "notice": "The amount of tokens that each address has already minted."
      },
      "whitelisted(address)": {
        "notice": "A set of addresses which are whitelisted for minting new tokens."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 542,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 545,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1864,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 686,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 692,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 694,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 696,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 698,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1239,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 2541,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "101",
        "type": "t_bytes32"
      },
      {
        "astId": 2543,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "102",
        "type": "t_bytes32"
      },
      {
        "astId": 2680,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1369,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "_nonces",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_struct(Counter)1871_storage)"
      },
      {
        "astId": 1371,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "_PERMIT_TYPEHASH",
        "offset": 0,
        "slot": "154",
        "type": "t_bytes32"
      },
      {
        "astId": 1539,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2726,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "__gap",
        "offset": 0,
        "slot": "204",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "_roles",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 335,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "__gap",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 623,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "_status",
        "offset": 0,
        "slot": "304",
        "type": "t_uint256"
      },
      {
        "astId": 666,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "__gap",
        "offset": 0,
        "slot": "305",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "_owner",
        "offset": 0,
        "slot": "354",
        "type": "t_address"
      },
      {
        "astId": 534,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "__gap",
        "offset": 0,
        "slot": "355",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11390,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "swapFees",
        "offset": 0,
        "slot": "404",
        "type": "t_mapping(t_address,t_array(t_uint256)2_storage)"
      },
      {
        "astId": 11394,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "feeExempt",
        "offset": 0,
        "slot": "405",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11397,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "bridgeTokensArray",
        "offset": 0,
        "slot": "406",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 11401,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "bridgeTokens",
        "offset": 0,
        "slot": "407",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11403,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "exchangesPaused",
        "offset": 0,
        "slot": "408",
        "type": "t_bool"
      },
      {
        "astId": 11407,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "bridgeTokenEnabled",
        "offset": 0,
        "slot": "409",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6374,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "whitelisted",
        "offset": 0,
        "slot": "410",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6379,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "paused",
        "offset": 0,
        "slot": "411",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6384,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "mintCeiling",
        "offset": 0,
        "slot": "412",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6389,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "totalMinted",
        "offset": 0,
        "slot": "413",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6392,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "flashMintFee",
        "offset": 0,
        "slot": "414",
        "type": "t_uint256"
      },
      {
        "astId": 6395,
        "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
        "label": "maxFlashLoanAmount",
        "offset": 0,
        "slot": "415",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)2_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)2_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Counter)1871_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CountersUpgradeable.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)1871_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1871_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1870,
            "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/CrossChainCanonicalAlchemicTokenV2.sol:CrossChainCanonicalAlchemicTokenV2",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}