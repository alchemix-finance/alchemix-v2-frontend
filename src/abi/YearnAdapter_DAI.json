{
  "address": "0x9Ad9Ad68b9746636589b5CB0A7D4aD52d5CfD94e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlyingToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "MAX_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultUnWrapData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultWrapData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "unwrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "wrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ae8d41e39ae9ff1eb33807097a359fdc117fac26cb5b7adba6220d348c91ab9",
  "receipt": {
    "to": null,
    "from": "0x35aFF74061AfC507810Bae125C3074C3133F3E0E",
    "contractAddress": "0x9Ad9Ad68b9746636589b5CB0A7D4aD52d5CfD94e",
    "transactionIndex": 0,
    "gasUsed": "693789",
    "logsBloom": "0x
    "blockHash": "0x58ca61b216ab57a99b86ced2b7c50da609a70e15673337d57b2217d09746bfab",
    "transactionHash": "0x4ae8d41e39ae9ff1eb33807097a359fdc117fac26cb5b7adba6220d348c91ab9",
    "logs": [],
    "blockNumber": 13263435,
    "cumulativeGasUsed": "693789",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdA816459F1AB5631232FE5e97a05BBBb94970c95",
    "0x6B175474E89094C44Da98b954EedeAC495271d0F"
  ],
  "solcInputHash": "7935b9804a05a7b65bf34815da80687d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultUnWrapData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultWrapData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"defaultUnWrapData()\":{\"returns\":{\"_0\":\"A packet of bytes that can be used with the `unwrap` function.\"}},\"defaultWrapData()\":{\"returns\":{\"_0\":\"A packet of bytes that can be used with the `wrap` function.\"}},\"price()\":{\"returns\":{\"_0\":\"The price (yield-tokens per underlying-token).\"}},\"unwrap(uint256,address,bytes)\":{\"params\":{\"amount\":\"The amount of yield-tokens to redeem.\",\"data\":\"A packet of bytes used by the adapter to complete the withdraw action.  The format of these bytes is dependent on the `withdraw` function (or similar) of the target yield-token.\",\"recipient\":\"The recipient of the resulting underlying-tokens.\"},\"returns\":{\"_0\":\"The amount of underlying-token received.\"}},\"wrap(uint256,address,bytes)\":{\"params\":{\"amount\":\"The amount of underlying-token to deposit.\",\"data\":\"A packet of bytes used by the adapter to complete the deposit action.  The format of these bytes is dependent on the `deposit` function (or similar) of the target yield-token.\",\"recipient\":\"The recipient of the resulting yield-tokens.\"},\"returns\":{\"_0\":\"The amount of yield-token received.\"}}},\"stateVariables\":{\"token\":{\"return\":\"The address of the yield-token.\",\"returns\":{\"_0\":\"The address of the yield-token.\"}},\"underlyingToken\":{\"return\":\"The address of the underlying-token.\",\"returns\":{\"_0\":\"The address of the underlying-token.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"defaultUnWrapData()\":{\"notice\":\"Returns a default packet of bytes for use with the `unwrap` function.\"},\"defaultWrapData()\":{\"notice\":\"Returns a default packet of bytes for use with the `wrap` function.\"},\"price()\":{\"notice\":\"Gets the current price of yield-token in underlying-tokens.\"},\"token()\":{\"notice\":\"Gets the address of the yield-token used by the adapter.\"},\"underlyingToken()\":{\"notice\":\"Gets the address of the underlying-token used by the adapter.\"},\"unwrap(uint256,address,bytes)\":{\"notice\":\"Withdraws underlying-token from yield-token.\"},\"wrap(uint256,address,bytes)\":{\"notice\":\"Deposits underlying-token into yield-token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/yearn/YearnTokenAdapter.sol\":\"YearnTokenAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/adapters/yearn/YearnTokenAdapter.sol\":{\"content\":\"pragma solidity ^0.8.9;\\nimport \\\"../../interfaces/ITokenAdapter.sol\\\";\\nimport \\\"../../interfaces/yearn/VaultAPI.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../interfaces/IDetailedERC20.sol\\\";\\nimport \\\"../../libraries/TokenUtils.sol\\\";\\n\\ncontract YearnTokenAdapter is ITokenAdapter {\\n    using SafeERC20 for IERC20;\\n    uint256 public constant MAX_BPS = 10000;\\n    address public override token;\\n    address public override underlyingToken;\\n\\n    struct UnWrapParams {\\n        uint256 maxLoss;\\n    }\\n\\n    constructor(address _token, address _underlyingToken) {\\n        token = _token;\\n        underlyingToken = _underlyingToken;\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function price() external view override returns (uint256) {\\n        return VaultAPI(token).pricePerShare();\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function wrap(uint256 amount, address recipient, bytes memory data) external override returns (uint256) {\\n        IERC20(underlyingToken).safeTransferFrom(msg.sender, address(this), amount);\\n        TokenUtils.safeApprove(underlyingToken, token, amount);\\n        return VaultAPI(token).deposit(amount, recipient);\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function unwrap(uint256 amount, address recipient, bytes memory data) external override returns (uint256) {\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        UnWrapParams memory params;\\n        (params) = abi.decode(data, (UnWrapParams));\\n        uint256 balBefore = VaultAPI(token).balanceOf(address(this));\\n        uint256 amountWithdrawn = VaultAPI(token).withdraw(amount, recipient, params.maxLoss);\\n        uint256 balAfter = VaultAPI(token).balanceOf(address(this));\\n        require(balBefore - balAfter == amount, \\\"yearn: exact amount not withdrawn\\\");\\n        return amountWithdrawn;\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function defaultWrapData() external pure override returns (bytes memory) {\\n        return abi.encode(0x0);\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function defaultUnWrapData() external pure override returns (bytes memory) {\\n        UnWrapParams memory params = UnWrapParams({ maxLoss: 0 });\\n        return abi.encode(params);\\n    }\\n}\",\"keccak256\":\"0x35c7741886a8d937b341d66b67a8a35472b914cfe07efbaf80e57f25e90b53af\"},\"contracts/interfaces/IDetailedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDetailedERC20 is IERC20 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xb2e28c1335f002a40ab696d0692b9a8393484d0504e3d2751e606b776c9f0833\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20Extensions.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\ninterface IERC20Extensions {\\n    /// @notice TODO\\n    ///\\n    /// @param recipient TODO\\n    /// @param amount   TODO\\n    ///\\n    /// @return TODO\\n    function mint(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice TODO\\n    ///\\n    /// @param owner  TODO\\n    /// @param amount TODO\\n    ///\\n    /// @return TODO\\n    function burnFrom(address owner, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0x19d11cebc42daf4caaf0e322651953d9d08f123f5b925baa52848c4c12cb0b9c\"},\"contracts/interfaces/IERC20Meta.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\ninterface IERC20Meta {\\n    /// @notice TODO\\n    ///\\n    /// @return TODO\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x9d69b9af3b60cb1e499acf733d9cf074e973767c58850f88e58dd84b43975ec4\"},\"contracts/interfaces/IERC20Minimal.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\ninterface IERC20Minimal {\\n    /// @notice TODO\\n    ///\\n    /// @param owner     TODO\\n    /// @param recipient TODO\\n    /// @param amount    TODO\\n    event Transfer(address indexed owner, address indexed recipient, uint256 amount);\\n\\n    /// @notice TODO\\n    ///\\n    /// @param owner   TODO\\n    /// @param spender TODO\\n    /// @param amount  TODO\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /// @notice TODO\\n    ///\\n    /// @return TODo\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice TODO\\n    ///\\n    /// @param account TODO\\n    ///\\n    /// @return TODO\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice TODO\\n    ///\\n    /// @param owner   TODO\\n    /// @param spender TODO\\n    ///\\n    /// @return TODo\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice TODO\\n    ///\\n    /// @param recipient TODO\\n    /// @param amount    TODO\\n    ///\\n    /// @return TODO\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice TODO\\n    ///\\n    /// @param spender TODO\\n    /// @param amount  TODO\\n    ///\\n    /// @return TODO\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice TODO\\n    ///\\n    /// @param owner     TODO\\n    /// @param recipient TODO\\n    /// @param amount    TODO\\n    ///\\n    /// @return TODO\\n    function transferFrom(address owner, address recipient, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0xe5a4d7bf51270be732a31fd1223438d5fe7762904c1ec6ec1018d9d313f147ec\"},\"contracts/interfaces/ITokenAdapter.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/// @title  ITokenAdapter\\n/// @author Alchemix Finance\\ninterface ITokenAdapter {\\n    /// @notice Gets the address of the yield-token used by the adapter.\\n    ///\\n    /// @return The address of the yield-token.\\n    function token() external view returns (address);\\n\\n    /// @notice Gets the address of the underlying-token used by the adapter.\\n    ///\\n    /// @return The address of the underlying-token.\\n    function underlyingToken() external view returns (address);\\n\\n    /// @notice Gets the current price of yield-token in underlying-tokens.\\n    ///\\n    /// @return The price (yield-tokens per underlying-token).\\n    function price() external view returns (uint256);\\n\\n    /// @notice Deposits underlying-token into yield-token.\\n    ///\\n    /// @param amount    The amount of underlying-token to deposit.\\n    /// @param recipient The recipient of the resulting yield-tokens.\\n    /// @param data      A packet of bytes used by the adapter to complete the deposit action.  The format of these bytes is dependent on the `deposit` function (or similar) of the target yield-token.\\n    ///\\n    /// @return The amount of yield-token received.\\n    function wrap(uint256 amount, address recipient, bytes memory data) external returns (uint256);\\n\\n    /// @notice Withdraws underlying-token from yield-token.\\n    ///\\n    /// @param amount    The amount of yield-tokens to redeem.\\n    /// @param recipient The recipient of the resulting underlying-tokens.\\n    /// @param data      A packet of bytes used by the adapter to complete the withdraw action.  The format of these bytes is dependent on the `withdraw` function (or similar) of the target yield-token.\\n    ///\\n    /// @return The amount of underlying-token received.\\n    function unwrap(uint256 amount, address recipient, bytes memory data) external returns (uint256);\\n\\n    /// @notice Returns a default packet of bytes for use with the `wrap` function.\\n    ///\\n    /// @return A packet of bytes that can be used with the `wrap` function.\\n    function defaultWrapData() external returns (bytes memory);\\n\\n    /// @notice Returns a default packet of bytes for use with the `unwrap` function.\\n    ///\\n    /// @return A packet of bytes that can be used with the `unwrap` function.\\n    function defaultUnWrapData() external returns (bytes memory);\\n}\",\"keccak256\":\"0x90f5b9e8854027d15b740c4274ea92111dc2cc4f6d58368da3f76c80fd67e998\"},\"contracts/interfaces/yearn/VaultAPI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nstruct StrategyParams {\\n  uint256 performanceFee;\\n  uint256 activation;\\n  uint256 debtRatio;\\n  uint256 minDebtPerHarvest;\\n  uint256 maxDebtPerHarvest;\\n  uint256 lastReport;\\n  uint256 totalDebt;\\n  uint256 totalGain;\\n  uint256 totalLoss;\\n  bool enforceChangeLimit;\\n  uint256 profitLimitRatio;\\n  uint256 lossLimitRatio;\\n  address customCheck;\\n}\\n\\ninterface VaultAPI is IERC20 {\\n  function name() external view returns (string calldata);\\n\\n  function symbol() external view returns (string calldata);\\n\\n  function decimals() external view returns (uint256);\\n\\n  function apiVersion() external pure returns (string memory);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 amount,\\n    uint256 expiry,\\n    bytes calldata signature\\n  ) external returns (bool);\\n\\n  // NOTE: Vyper produces multiple signatures for a given function with \\\"default\\\" args\\n  function deposit() external returns (uint256);\\n\\n  function deposit(uint256 amount) external returns (uint256);\\n\\n  function deposit(uint256 amount, address recipient) external returns (uint256);\\n\\n  // NOTE: Vyper produces multiple signatures for a given function with \\\"default\\\" args\\n  function withdraw() external returns (uint256);\\n\\n  function withdraw(uint256 maxShares) external returns (uint256);\\n\\n  function withdraw(uint256 maxShares, address recipient) external returns (uint256);\\n\\n  function withdraw(\\n    uint256 maxShares,\\n    address recipient,\\n    uint256 maxLoss\\n  ) external returns (uint256);\\n\\n  function token() external view returns (address);\\n\\n  function strategies(address _strategy) external view returns (StrategyParams memory);\\n\\n  function pricePerShare() external view returns (uint256);\\n\\n  function totalAssets() external view returns (uint256);\\n\\n  function depositLimit() external view returns (uint256);\\n\\n  function maxAvailableShares() external view returns (uint256);\\n\\n  /**\\n   * View how much the Vault would increase this Strategy's borrow limit,\\n   * based on its present performance (since its last report). Can be used to\\n   * determine expectedReturn in your Strategy.\\n   */\\n  function creditAvailable() external view returns (uint256);\\n\\n  /**\\n   * View how much the Vault would like to pull back from the Strategy,\\n   * based on its present performance (since its last report). Can be used to\\n   * determine expectedReturn in your Strategy.\\n   */\\n  function debtOutstanding() external view returns (uint256);\\n\\n  /**\\n   * View how much the Vault expect this Strategy to return at the current\\n   * block, based on its present performance (since its last report). Can be\\n   * used to determine expectedReturn in your Strategy.\\n   */\\n  function expectedReturn() external view returns (uint256);\\n\\n  /**\\n   * This is the main contact point where the Strategy interacts with the\\n   * Vault. It is critical that this call is handled as intended by the\\n   * Strategy. Therefore, this function will be called by BaseStrategy to\\n   * make sure the integration is correct.\\n   */\\n  function report(\\n    uint256 _gain,\\n    uint256 _loss,\\n    uint256 _debtPayment\\n  ) external returns (uint256);\\n\\n  /**\\n   * This function should only be used in the scenario where the Strategy is\\n   * being retired but no migration of the positions are possible, or in the\\n   * extreme scenario that the Strategy needs to be put into \\\"Emergency Exit\\\"\\n   * mode in order for it to exit as quickly as possible. The latter scenario\\n   * could be for any reason that is considered \\\"critical\\\" that the Strategy\\n   * exits its position as fast as possible, such as a sudden change in\\n   * market conditions leading to losses, or an imminent failure in an\\n   * external dependency.\\n   */\\n  function revokeStrategy() external;\\n\\n  /**\\n   * View the governance address of the Vault to assert privileged functions\\n   * can only be called by governance. The Strategy serves the Vault, so it\\n   * is subject to governance defined by the Vault.\\n   */\\n  function governance() external view returns (address);\\n\\n  /**\\n   * View the management address of the Vault to assert privileged functions\\n   * can only be called by management. The Strategy serves the Vault, so it\\n   * is subject to management defined by the Vault.\\n   */\\n  function management() external view returns (address);\\n\\n  /**\\n   * View the guardian address of the Vault to assert privileged functions\\n   * can only be called by guardian. The Strategy serves the Vault, so it\\n   * is subject to guardian defined by the Vault.\\n   */\\n  function guardian() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa54e5d03f992a84782a2deeb5e40ea55fdebbddffeb89226389fb1a5abdf8a0f\",\"license\":\"MIT\"},\"contracts/libraries/TokenUtils.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IERC20Extensions.sol\\\";\\nimport \\\"../interfaces/IERC20Meta.sol\\\";\\nimport \\\"../interfaces/IERC20Minimal.sol\\\";\\nlibrary TokenUtils {\\n    /// @dev A safe function to get the decimals of an ERC20 token.\\n    ///\\n    /// @param token The target token.\\n    ///\\n    /// @return The amount of decimals of the token.\\n    function expectDecimals(address token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(IERC20Meta.decimals.selector));\\n        require(success && data.length >= 32); // FIXME: Error\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    /// @dev Gets the balance of tokens held by an account.\\n    ///\\n    /// @param token The token to check the balance of.\\n    /// @param account The address of the token holder.\\n    ///\\n    /// @return The balance of the tokens held by an account.\\n    function safeBalanceOf(address token, address account) internal view returns (uint256) {\\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, account));\\n        require(success && data.length >= 32); // FIXME: Error\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Transfers tokens to another address.\\n    ///\\n    /// @param token The token to transfer.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount The amount of tokens to transfer.\\n    function safeTransfer(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20Minimal.transfer.selector, recipient, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TF'); // FIXME: Error\\n    }\\n\\n    /// @dev Approves tokens for the smart contract.\\n    ///\\n    /// @param token The token to approve.\\n    /// @param spender The contract to spend the tokens.\\n    /// @param value The amount of tokens to approve.\\n    function safeApprove(address token, address spender, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20Minimal.approve.selector, spender, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TF'); // FIXME: Error\\n    }\\n\\n    /// @dev Transfer tokens from one address to another address.\\n    ///\\n    /// @param token The token to transfer.\\n    /// @param owner The address of the owner.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount The amount of tokens to transfer.\\n    function safeTransferFrom(address token, address owner, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20Minimal.transferFrom.selector, owner, recipient, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TF'); // FIXME: Error\\n    }\\n\\n    /// @dev Mints tokens to an address.\\n    ///\\n    /// @param token The token to mint.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount The amount of tokens to mint.\\n    function safeMint(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20Extensions.mint.selector, recipient, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TF'); // FIXME: Error\\n    }\\n\\n    /// @dev Burns tokens from its total supply.\\n    ///\\n    /// @param token  The token to burn.\\n    /// @param owner  The owner of the tokens.\\n    /// @param amount The amount of tokens to burn.\\n    function safeBurnFrom(address token, address owner, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20Extensions.burnFrom.selector, owner, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TF'); // FIXME: Error\\n    }\\n}\",\"keccak256\":\"0x610fd477abc3e0a9df1ee9cfc40170708c0fa18bb89f7f5b483c8d31d344c0e1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610b78380380610b7883398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b610aba806100be6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a035b1fe1161005b578063a035b1fe14610124578063f6123b781461012c578063fc0c546a1461015e578063fd967f471461017157600080fd5b806318e19bc11461008d5780632495a599146100b35780632ddd4a5b146100de5780636e7be80414610111575b600080fd5b6100a061009b36600461089e565b61017a565b6040519081526020015b60405180910390f35b6001546100c6906001600160a01b031681565b6040516001600160a01b0390911681526020016100aa565b610104604080516000602082015260609101604051602081830303815290604052905090565b6040516100aa91906109b3565b6100a061011f36600461089e565b610242565b6100a0610489565b610104604080516020808201835260008083528351918201526060920160405160208183030381529060405291505090565b6000546100c6906001600160a01b031681565b6100a061271081565b600154600090610195906001600160a01b0316333087610515565b6001546000546101b2916001600160a01b03908116911686610575565b600054604051636e553f6560e01b8152600481018690526001600160a01b03858116602483015290911690636e553f6590604401602060405180830381600087803b15801561020057600080fd5b505af1158015610214573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023891906109c6565b90505b9392505050565b6000805461025b906001600160a01b0316333087610515565b6040805160208101909152600081528280602001905181019061027e91906109df565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a082319060240160206040518083038186803b1580156102c757600080fd5b505afa1580156102db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff91906109c6565b600080548451604051631cc6d2f960e31b8152600481018b90526001600160a01b038a811660248301526044820192909252939450919291169063e63697c890606401602060405180830381600087803b15801561035c57600080fd5b505af1158015610370573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039491906109c6565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a082319060240160206040518083038186803b1580156103dd57600080fd5b505afa1580156103f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041591906109c6565b9050876104228285610a21565b1461047e5760405162461bcd60e51b815260206004820152602160248201527f796561726e3a20657861637420616d6f756e74206e6f742077697468647261776044820152603760f91b60648201526084015b60405180910390fd5b509695505050505050565b60008060009054906101000a90046001600160a01b03166001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d857600080fd5b505afa1580156104ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051091906109c6565b905090565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261056f908590610675565b50505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916105d19190610a46565b6000604051808303816000865af19150503d806000811461060e576040519150601f19603f3d011682016040523d82523d6000602084013e610613565b606091505b509150915081801561063d57508051158061063d57508080602001905181019061063d9190610a62565b61066e5760405162461bcd60e51b81526020600482015260026024820152612a2360f11b6044820152606401610475565b5050505050565b60006106ca826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661074c9092919063ffffffff16565b80519091501561074757808060200190518101906106e89190610a62565b6107475760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610475565b505050565b6060610238848460008585843b6107a55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610475565b600080866001600160a01b031685876040516107c19190610a46565b60006040518083038185875af1925050503d80600081146107fe576040519150601f19603f3d011682016040523d82523d6000602084013e610803565b606091505b509150915061081382828661081e565b979650505050505050565b6060831561082d57508161023b565b82511561083d5782518084602001fd5b8160405162461bcd60e51b815260040161047591906109b3565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561089657610896610857565b604052919050565b6000806000606084860312156108b357600080fd5b833592506020808501356001600160a01b03811681146108d257600080fd5b9250604085013567ffffffffffffffff808211156108ef57600080fd5b818701915087601f83011261090357600080fd5b81358181111561091557610915610857565b610927601f8201601f1916850161086d565b9150808252888482850101111561093d57600080fd5b80848401858401376000848284010152508093505050509250925092565b60005b8381101561097657818101518382015260200161095e565b8381111561056f5750506000910152565b6000815180845261099f81602086016020860161095b565b601f01601f19169290920160200192915050565b60208152600061023b6020830184610987565b6000602082840312156109d857600080fd5b5051919050565b6000602082840312156109f157600080fd5b6040516020810181811067ffffffffffffffff82111715610a1457610a14610857565b6040529151825250919050565b600082821015610a4157634e487b7160e01b600052601160045260246000fd5b500390565b60008251610a5881846020870161095b565b9190910192915050565b600060208284031215610a7457600080fd5b8151801515811461023b57600080fdfea26469706673582212207795567fd29d32323e8fd78f6b07acb7f459077c7980f8c9e6340d8beeff4a0364736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063a035b1fe1161005b578063a035b1fe14610124578063f6123b781461012c578063fc0c546a1461015e578063fd967f471461017157600080fd5b806318e19bc11461008d5780632495a599146100b35780632ddd4a5b146100de5780636e7be80414610111575b600080fd5b6100a061009b36600461089e565b61017a565b6040519081526020015b60405180910390f35b6001546100c6906001600160a01b031681565b6040516001600160a01b0390911681526020016100aa565b610104604080516000602082015260609101604051602081830303815290604052905090565b6040516100aa91906109b3565b6100a061011f36600461089e565b610242565b6100a0610489565b610104604080516020808201835260008083528351918201526060920160405160208183030381529060405291505090565b6000546100c6906001600160a01b031681565b6100a061271081565b600154600090610195906001600160a01b0316333087610515565b6001546000546101b2916001600160a01b03908116911686610575565b600054604051636e553f6560e01b8152600481018690526001600160a01b03858116602483015290911690636e553f6590604401602060405180830381600087803b15801561020057600080fd5b505af1158015610214573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023891906109c6565b90505b9392505050565b6000805461025b906001600160a01b0316333087610515565b6040805160208101909152600081528280602001905181019061027e91906109df565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a082319060240160206040518083038186803b1580156102c757600080fd5b505afa1580156102db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff91906109c6565b600080548451604051631cc6d2f960e31b8152600481018b90526001600160a01b038a811660248301526044820192909252939450919291169063e63697c890606401602060405180830381600087803b15801561035c57600080fd5b505af1158015610370573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039491906109c6565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a082319060240160206040518083038186803b1580156103dd57600080fd5b505afa1580156103f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041591906109c6565b9050876104228285610a21565b1461047e5760405162461bcd60e51b815260206004820152602160248201527f796561726e3a20657861637420616d6f756e74206e6f742077697468647261776044820152603760f91b60648201526084015b60405180910390fd5b509695505050505050565b60008060009054906101000a90046001600160a01b03166001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d857600080fd5b505afa1580156104ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051091906109c6565b905090565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261056f908590610675565b50505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916105d19190610a46565b6000604051808303816000865af19150503d806000811461060e576040519150601f19603f3d011682016040523d82523d6000602084013e610613565b606091505b509150915081801561063d57508051158061063d57508080602001905181019061063d9190610a62565b61066e5760405162461bcd60e51b81526020600482015260026024820152612a2360f11b6044820152606401610475565b5050505050565b60006106ca826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661074c9092919063ffffffff16565b80519091501561074757808060200190518101906106e89190610a62565b6107475760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610475565b505050565b6060610238848460008585843b6107a55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610475565b600080866001600160a01b031685876040516107c19190610a46565b60006040518083038185875af1925050503d80600081146107fe576040519150601f19603f3d011682016040523d82523d6000602084013e610803565b606091505b509150915061081382828661081e565b979650505050505050565b6060831561082d57508161023b565b82511561083d5782518084602001fd5b8160405162461bcd60e51b815260040161047591906109b3565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561089657610896610857565b604052919050565b6000806000606084860312156108b357600080fd5b833592506020808501356001600160a01b03811681146108d257600080fd5b9250604085013567ffffffffffffffff808211156108ef57600080fd5b818701915087601f83011261090357600080fd5b81358181111561091557610915610857565b610927601f8201601f1916850161086d565b9150808252888482850101111561093d57600080fd5b80848401858401376000848284010152508093505050509250925092565b60005b8381101561097657818101518382015260200161095e565b8381111561056f5750506000910152565b6000815180845261099f81602086016020860161095b565b601f01601f19169290920160200192915050565b60208152600061023b6020830184610987565b6000602082840312156109d857600080fd5b5051919050565b6000602082840312156109f157600080fd5b6040516020810181811067ffffffffffffffff82111715610a1457610a14610857565b6040529151825250919050565b600082821015610a4157634e487b7160e01b600052601160045260246000fd5b500390565b60008251610a5881846020870161095b565b9190910192915050565b600060208284031215610a7457600080fd5b8151801515811461023b57600080fdfea26469706673582212207795567fd29d32323e8fd78f6b07acb7f459077c7980f8c9e6340d8beeff4a0364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "defaultUnWrapData()": {
        "returns": {
          "_0": "A packet of bytes that can be used with the `unwrap` function."
        }
      },
      "defaultWrapData()": {
        "returns": {
          "_0": "A packet of bytes that can be used with the `wrap` function."
        }
      },
      "price()": {
        "returns": {
          "_0": "The price (yield-tokens per underlying-token)."
        }
      },
      "unwrap(uint256,address,bytes)": {
        "params": {
          "amount": "The amount of yield-tokens to redeem.",
          "data": "A packet of bytes used by the adapter to complete the withdraw action.  The format of these bytes is dependent on the `withdraw` function (or similar) of the target yield-token.",
          "recipient": "The recipient of the resulting underlying-tokens."
        },
        "returns": {
          "_0": "The amount of underlying-token received."
        }
      },
      "wrap(uint256,address,bytes)": {
        "params": {
          "amount": "The amount of underlying-token to deposit.",
          "data": "A packet of bytes used by the adapter to complete the deposit action.  The format of these bytes is dependent on the `deposit` function (or similar) of the target yield-token.",
          "recipient": "The recipient of the resulting yield-tokens."
        },
        "returns": {
          "_0": "The amount of yield-token received."
        }
      }
    },
    "stateVariables": {
      "token": {
        "return": "The address of the yield-token.",
        "returns": {
          "_0": "The address of the yield-token."
        }
      },
      "underlyingToken": {
        "return": "The address of the underlying-token.",
        "returns": {
          "_0": "The address of the underlying-token."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "defaultUnWrapData()": {
        "notice": "Returns a default packet of bytes for use with the `unwrap` function."
      },
      "defaultWrapData()": {
        "notice": "Returns a default packet of bytes for use with the `wrap` function."
      },
      "price()": {
        "notice": "Gets the current price of yield-token in underlying-tokens."
      },
      "token()": {
        "notice": "Gets the address of the yield-token used by the adapter."
      },
      "underlyingToken()": {
        "notice": "Gets the address of the underlying-token used by the adapter."
      },
      "unwrap(uint256,address,bytes)": {
        "notice": "Withdraws underlying-token from yield-token."
      },
      "wrap(uint256,address,bytes)": {
        "notice": "Deposits underlying-token into yield-token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10632,
        "contract": "contracts/adapters/yearn/YearnTokenAdapter.sol:YearnTokenAdapter",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10635,
        "contract": "contracts/adapters/yearn/YearnTokenAdapter.sol:YearnTokenAdapter",
        "label": "underlyingToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}