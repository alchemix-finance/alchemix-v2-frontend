{
  "address": "0xD2869076FB66fc322ff3e354b4B7eD6a5bBc4b3b",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "debtToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "transmuter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minimumCollateralization",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "protocolFeeReceiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "mintingLimitMaximum",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintingLimitBlocks",
              "type": "uint256"
            }
          ],
          "internalType": "struct AlchemistV2.Params",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expectedValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maximumExpectedValue",
          "type": "uint256"
        }
      ],
      "name": "ExpectedValueExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "IllegalArgument",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "IllegalState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repayLimit",
          "type": "uint256"
        }
      ],
      "name": "LiquidationLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockAlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maximumLoss",
          "type": "uint256"
        }
      ],
      "name": "LossExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintingLimit",
          "type": "uint256"
        }
      ],
      "name": "MintingLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyKeeper",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repayLimit",
          "type": "uint256"
        }
      ],
      "name": "RepayLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignatureDeadlineExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SlippageExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenDisabled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Undercollateralized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "UnsupportedToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "AddUnderlyingToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "AddYieldToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "AdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ApproveMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ApproveWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Donate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "KeeperAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "KeeperRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maximum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocks",
          "type": "uint256"
        }
      ],
      "name": "LiquidationLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "MaximumLossUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "MinimumCollateralizationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maximum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocks",
          "type": "uint256"
        }
      ],
      "name": "MintingLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "PendingAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "ProtocolFeeReceiverUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maximum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocks",
          "type": "uint256"
        }
      ],
      "name": "RepayLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "SentinelAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "SentinelRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expectedValue",
          "type": "uint256"
        }
      ],
      "name": "Snap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "TransmuterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        }
      ],
      "name": "UnderlyingTokenDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        }
      ],
      "name": "UnderlyingTokenEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "WhitelistDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "WhitelistEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        }
      ],
      "name": "YieldTokenDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        }
      ],
      "name": "YieldTokenEnabled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_MINT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_WITHDRAW_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "accounts",
      "outputs": [
        {
          "internalType": "int256",
          "name": "debt",
          "type": "int256"
        },
        {
          "internalType": "address[]",
          "name": "depositedTokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "addSentinel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "repayLimitMaximum",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "repayLimitBlocks",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationLimitMaximum",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationLimitBlocks",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAlchemistV2AdminActions.UnderlyingTokenConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "addUnderlyingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "adapter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maximumLoss",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maximumExpectedValue",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAlchemistV2AdminActions.YieldTokenConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "addYieldToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approveMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approveWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maximum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blocks",
          "type": "uint256"
        }
      ],
      "name": "configureLiquidationLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maximum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "configureMintingLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maximum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blocks",
          "type": "uint256"
        }
      ],
      "name": "configureRepayLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "depositUnderlying",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        }
      ],
      "name": "disableUnderlyingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        }
      ],
      "name": "disableYieldToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        }
      ],
      "name": "enableUnderlyingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        }
      ],
      "name": "enableYieldToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedUnderlyingTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedYieldTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        }
      ],
      "name": "getUnderlyingTokenParameters",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "conversionFactor",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        }
      ],
      "name": "getYieldTokenParameters",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maximumLoss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accruedWeight",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        }
      ],
      "name": "isSupportedUnderlyingToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        }
      ],
      "name": "isSupportedYieldToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumCollateralization",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "mintAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "mintFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permitMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permitWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "poke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastAccruedWeight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "removeSentinel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sentinels",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setMaximumLoss",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setMinimumCollateralization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "setPendingAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "setProtocolFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "setTransmuter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        }
      ],
      "name": "snap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transmuter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        }
      ],
      "name": "underlyingTokensPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "withdrawAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdrawFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "withdrawUnderlying",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "withdrawUnderlyingFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        }
      ],
      "name": "yieldTokensPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x24c2859742a4f911c2c1d540ab012ebc2ffb9b8457d1f2ad7bac3b5f7f171b8f",
  "receipt": {
    "to": null,
    "from": "0x35aFF74061AfC507810Bae125C3074C3133F3E0E",
    "contractAddress": "0x873B8ba8C2255b3141324BB6020734A8321F0924",
    "transactionIndex": 0,
    "gasUsed": "5322900",
    "logsBloom": "0x
    "blockHash": "0x2a9068b1b37c2c683a469a0c782ce0c9c8d5fc7342f704f534da55f58b404bcd",
    "transactionHash": "0x24c2859742a4f911c2c1d540ab012ebc2ffb9b8457d1f2ad7bac3b5f7f171b8f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13263423,
        "transactionHash": "0x24c2859742a4f911c2c1d540ab012ebc2ffb9b8457d1f2ad7bac3b5f7f171b8f",
        "address": "0x873B8ba8C2255b3141324BB6020734A8321F0924",
        "topics": [
          "0x54e4612788f90384e6843298d7854436f3a585b2c3831ab66abf1de63bfa6c2d"
        ],
        "data": "0x0000000000000000000000008d698bc542d9145d7d6675b6045c3cc8895e99e7",
        "logIndex": 0,
        "blockHash": "0x2a9068b1b37c2c683a469a0c782ce0c9c8d5fc7342f704f534da55f58b404bcd"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13263423,
        "transactionHash": "0x24c2859742a4f911c2c1d540ab012ebc2ffb9b8457d1f2ad7bac3b5f7f171b8f",
        "address": "0x873B8ba8C2255b3141324BB6020734A8321F0924",
        "topics": [
          "0xe42bb1780117f5788c6e0042e955291223819875891ddf465b8e4fbb85a933e9"
        ],
        "data": "0x000000000000000000000000d85829d56e977d05ec05e96a8c55b43d79c65a81",
        "logIndex": 1,
        "blockHash": "0x2a9068b1b37c2c683a469a0c782ce0c9c8d5fc7342f704f534da55f58b404bcd"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13263423,
        "transactionHash": "0x24c2859742a4f911c2c1d540ab012ebc2ffb9b8457d1f2ad7bac3b5f7f171b8f",
        "address": "0x873B8ba8C2255b3141324BB6020734A8321F0924",
        "topics": [
          "0x6f428e543b1146a0996303f0250c6fe0682874c690989e63ae53bf75bed8ef6f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000001bc16d674ec80000",
        "logIndex": 2,
        "blockHash": "0x2a9068b1b37c2c683a469a0c782ce0c9c8d5fc7342f704f534da55f58b404bcd"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13263423,
        "transactionHash": "0x24c2859742a4f911c2c1d540ab012ebc2ffb9b8457d1f2ad7bac3b5f7f171b8f",
        "address": "0x873B8ba8C2255b3141324BB6020734A8321F0924",
        "topics": [
          "0xd10d75876659a287a59a6ccfa2e3fff42f84d94b542837acd30bc184d562de40"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000003e8",
        "logIndex": 3,
        "blockHash": "0x2a9068b1b37c2c683a469a0c782ce0c9c8d5fc7342f704f534da55f58b404bcd"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13263423,
        "transactionHash": "0x24c2859742a4f911c2c1d540ab012ebc2ffb9b8457d1f2ad7bac3b5f7f171b8f",
        "address": "0x873B8ba8C2255b3141324BB6020734A8321F0924",
        "topics": [
          "0x76203fab169061f503a4139455a7dfc20cc2d5a59c97d5bb810e431f4059aad7"
        ],
        "data": "0x0000000000000000000000008d698bc542d9145d7d6675b6045c3cc8895e99e7",
        "logIndex": 4,
        "blockHash": "0x2a9068b1b37c2c683a469a0c782ce0c9c8d5fc7342f704f534da55f58b404bcd"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13263423,
        "transactionHash": "0x24c2859742a4f911c2c1d540ab012ebc2ffb9b8457d1f2ad7bac3b5f7f171b8f",
        "address": "0x873B8ba8C2255b3141324BB6020734A8321F0924",
        "topics": [
          "0x8353d6f6057b53994c31faf6112674bd84b37caab3af81c269080ae9904ebbeb"
        ],
        "data": "0x00000000000000000000000000000000000000000052b7d2dcc80cd2e400000000000000000000000000000000000000000000000000000000000000000003e8",
        "logIndex": 5,
        "blockHash": "0x2a9068b1b37c2c683a469a0c782ce0c9c8d5fc7342f704f534da55f58b404bcd"
      }
    ],
    "blockNumber": 13263423,
    "cumulativeGasUsed": "5322900",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "admin": "0x8d698BC542d9145d7D6675B6045C3Cc8895e99e7",
      "debtToken": "0xBC6DA0FE9aD5f3b0d58160288917AA56653660E9",
      "transmuter": "0xd85829d56e977D05eC05E96A8C55B43d79C65a81",
      "minimumCollateralization": "2000000000000000000",
      "protocolFee": 1000,
      "protocolFeeReceiver": "0x8d698BC542d9145d7D6675B6045C3Cc8895e99e7",
      "mintingLimitMaximum": "100000000000000000000000000",
      "mintingLimitBlocks": 1000
    }
  ],
  "solcInputHash": "7935b9804a05a7b65bf34815da80687d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transmuter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumCollateralization\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"protocolFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintingLimitMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintingLimitBlocks\",\"type\":\"uint256\"}],\"internalType\":\"struct AlchemistV2.Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumExpectedValue\",\"type\":\"uint256\"}],\"name\":\"ExpectedValueExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"IllegalArgument\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"IllegalState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayLimit\",\"type\":\"uint256\"}],\"name\":\"LiquidationLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumLoss\",\"type\":\"uint256\"}],\"name\":\"LossExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintingLimit\",\"type\":\"uint256\"}],\"name\":\"MintingLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyKeeper\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayLimit\",\"type\":\"uint256\"}],\"name\":\"RepayLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureDeadlineExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlippageExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenDisabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Undercollateralized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UnsupportedToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddUnderlyingToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"AddYieldToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ApproveMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ApproveWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Donate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"KeeperAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"KeeperRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"LiquidationLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MaximumLossUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MinimumCollateralizationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"MintingLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"PendingAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"ProtocolFeeReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"RepayLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"SentinelAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"SentinelRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedValue\",\"type\":\"uint256\"}],\"name\":\"Snap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"TransmuterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"UnderlyingTokenDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"UnderlyingTokenEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WhitelistDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WhitelistEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"}],\"name\":\"YieldTokenDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"}],\"name\":\"YieldTokenEnabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_MINT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_WITHDRAW_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"debt\",\"type\":\"int256\"},{\"internalType\":\"address[]\",\"name\":\"depositedTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"addSentinel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"repayLimitMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayLimitBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationLimitMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationLimitBlocks\",\"type\":\"uint256\"}],\"internalType\":\"struct IAlchemistV2AdminActions.UnderlyingTokenConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"addUnderlyingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maximumLoss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumExpectedValue\",\"type\":\"uint256\"}],\"internalType\":\"struct IAlchemistV2AdminActions.YieldTokenConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"addYieldToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"configureLiquidationLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"configureMintingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"configureRepayLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"depositUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"disableUnderlyingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"}],\"name\":\"disableYieldToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"enableUnderlyingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"}],\"name\":\"enableYieldToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedUnderlyingTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedYieldTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingTokenParameters\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"conversionFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"}],\"name\":\"getYieldTokenParameters\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maximumLoss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedWeight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"isSupportedUnderlyingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"}],\"name\":\"isSupportedYieldToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumCollateralization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"mintAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mintFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"poke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAccruedWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"removeSentinel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sentinels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaximumLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinimumCollateralization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setProtocolFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setTransmuter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"}],\"name\":\"snap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmuter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"}],\"name\":\"underlyingTokensPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"withdrawAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"withdrawUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"withdrawUnderlyingFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"}],\"name\":\"yieldTokensPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alchemix Finance\",\"errors\":{\"NotWhitelisted()\":[{\"details\":\"Thrown when a non-whitelisted contract attempts to access a whitelist-only function.\"}],\"UnauthorizedER()\":[{\"details\":\"Thrown when anyone but a whitelist admin tries to call an admin function.\"}]},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"The domain separator is calculated instead of being cached because of the potential for replay attack      when a chain split occurs. This domain separator is expected to be unique as per the EIP-712 specification.\",\"returns\":{\"_0\":\"the domain separator.\"}},\"acceptAdmin()\":{\"details\":\"This is the second step in the 2-step process of setting a new administrator.\"},\"accounts(address)\":{\"params\":{\"owner\":\"the address that owns the account.\"},\"returns\":{\"debt\":\"           the last recorded amount of debt that the account had incurred.\",\"depositedTokens\":\"the yield tokens that the owner has deposited into the system.\"}},\"addToWhitelist(address)\":{\"details\":\"Adds an contract to the whitelist.\",\"params\":{\"account\":\"the contract to add to the whitelist.\"}},\"addUnderlyingToken(address,(uint256,uint256,uint256,uint256))\":{\"params\":{\"config\":\"A set of initial configuration parameters for the underlying-token.\",\"underlyingToken\":\"The underlying-token to add.\"}},\"addYieldToken(address,(address,uint256,uint256))\":{\"params\":{\"config\":\"A set of initial configuration parameters for the yield-token.\",\"yieldToken\":\"The yield-token to add.\"}},\"approveMint(address,uint256)\":{\"params\":{\"amount\":\"The amount of the approval.\",\"spender\":\"The address that will be approved to mint.\"}},\"approveWithdraw(address,uint256)\":{\"params\":{\"amount\":\"The amount of the approval.\",\"withdrawer\":\"The address that will be approved to withdraw.\"}},\"burn(uint256,address)\":{\"params\":{\"amount\":\"The amount of debt-token to burn.\",\"recipient\":\"The recipient of the credit.\"}},\"configureLiquidationLimit(address,uint256,uint256)\":{\"params\":{\"blocks\":\"The number of blocks determining the recovery rate of the liquidation limit of the underlying-token.\",\"maximum\":\"The maximum liquidation limit for the underlying-token.\",\"underlyingToken\":\"The underlying-token to configure.\"}},\"configureMintingLimit(uint256,uint256)\":{\"params\":{\"maximum\":\"The maximum minting limit for the Alchemist.\",\"rate\":\"The number of blocks determining the recovery rate of the minting limit.\"}},\"configureRepayLimit(address,uint256,uint256)\":{\"params\":{\"blocks\":\"The number of blocks determining the recovery rate of the repay limit of the underlying-token.\",\"maximum\":\"The maximum repay limit for the underlying-token.\",\"underlyingToken\":\"The underlying-token to configure.\"}},\"deposit(address,uint256,address)\":{\"params\":{\"amount\":\"The amount of yield-tokens to deposit.\",\"recipient\":\"The owner of the CDP that will receive the resulting shares.\",\"yieldToken\":\"The yield-token to deposit.\"}},\"depositUnderlying(address,uint256,address,bytes)\":{\"params\":{\"amount\":\"The amount of the target underlying-token to deposit.\",\"data\":\"A packet of bytes sent to the `wrap` function of the yield-token-adapter.  The format of these bytes is dependent on the `deposit` function (or similar) of the target yield-token.\",\"recipient\":\"The owner of the CDP that will receive the resulting shares.\",\"yieldToken\":\"The yield-token that accepts the target underlying-token.\"}},\"disableUnderlyingToken(address)\":{\"params\":{\"underlyingToken\":\"The underlying-token to disable.\"}},\"disableWhitelist()\":{\"details\":\"De-activates the whitelist.\"},\"disableYieldToken(address)\":{\"params\":{\"yieldToken\":\"The yield-token to disable.\"}},\"donate(address,uint256)\":{\"params\":{\"amount\":\"The amount of debt-tokens to burn.\",\"yieldToken\":\"The target yield-token.\"}},\"enableUnderlyingToken(address)\":{\"params\":{\"underlyingToken\":\"The underlying-token to enable.\"}},\"enableWhitelist()\":{\"details\":\"Activates the whitelist.\"},\"enableYieldToken(address)\":{\"params\":{\"yieldToken\":\"The yield-token to enable.\"}},\"getSupportedUnderlyingTokens()\":{\"details\":\"The order of the entries returned by this function is not guaranteed to be consistent between calls.\",\"returns\":{\"_0\":\"the supported underlying tokens.\"}},\"getSupportedYieldTokens()\":{\"details\":\"The order of the entries returned by this function is not guaranteed to be consistent between calls.\",\"returns\":{\"_0\":\"the supported yield tokens.\"}},\"getUnderlyingTokenParameters(address)\":{\"params\":{\"underlyingToken\":\"the address of the underlying token.\"},\"returns\":{\"conversionFactor\":\"the scaling factor used to convert the token into units of the decimal token.\",\"decimals\":\"     the number of decimals that the token has.\",\"enabled\":\"      a flag indicating if the token is enabled.\"}},\"getYieldTokenParameters(address)\":{\"params\":{\"yieldToken\":\"the address of the yield token.\"},\"returns\":{\"accruedWeight\":\"  The accured weight of shares of the yield-token.\",\"adapter\":\"        The adapter for the underlying-token.\",\"balance\":\"        The amount of yield-tokens held by the Alchemist.\",\"decimals\":\"       The amount of decimals the yield-token has.\",\"enabled\":\"        A flag indicating if the yield-token is enabled.\",\"expectedValue\":\"  The expected amount of underlying-tokens that the Alchemist would receive from redeeming its balance of yield-token.\",\"maximumLoss\":\"    The maximum loss that the yield-token can experience before being automatically disabled.\",\"totalShares\":\"    The total amount of shares for of the yield-token.\",\"underlyingToken\":\"The underlying-token.\"}},\"harvest(address,bytes)\":{\"params\":{\"params\":\"A packet of bytes sent to the `unwrap` function of the yield-token-adapter.  The format of these bytes is dependent on the `withdraw` function (or similar) of the target yield-token.\",\"yieldToken\":\"The target yield-token.\"}},\"isSupportedUnderlyingToken(address)\":{\"params\":{\"underlyingToken\":\"the token to check.\"},\"returns\":{\"_0\":\"if the token is supported.\"}},\"isSupportedYieldToken(address)\":{\"params\":{\"yieldToken\":\"the token to check.\"},\"returns\":{\"_0\":\"if the token is supported.\"}},\"liquidate(address,uint256,bytes)\":{\"params\":{\"params\":\"A packet of bytes sent to the `unwrap` function of the yield-token-adapter.  The format of these bytes is dependent on the `withdraw` function (or similar) of the target yield-token.\",\"shares\":\"The amount of shares to liquidate.\",\"yieldToken\":\"The yield-token to liquidate.\"}},\"mint(uint256,address)\":{\"params\":{\"amount\":\"The amount of debt-token to mint.\",\"recipient\":\"The recipient of the minted debt-token.\"}},\"mintAllowance(address,address)\":{\"params\":{\"owner\":\"the owner of a position in alchemix that has delegated credit.\",\"spender\":\"the account which has been delegated credit.\"},\"returns\":{\"_0\":\"the amount of tokens the account that has been delegated credit can mint.\"}},\"mintFrom(address,uint256,address)\":{\"params\":{\"amount\":\"The amount of debt-token to mint.\",\"owner\":\"The owner of the CDP.\",\"recipient\":\"The recipient of the minted debt-token.\"}},\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}},\"permitMint(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"the deadline timestamp by which the call must be mined for the approve to work.\",\"owner\":\"the account that is being approved.\",\"r\":\"must produce valid secp256k1 signature from the holder along with `v` and `s`.\",\"s\":\"must produce valid secp256k1 signature from the holder along with `r` and `v`.\",\"spender\":\"the account which is being permitted to spend.\",\"v\":\"must produce valid secp256k1 signature from the holder along with `r` and `s`.\",\"value\":\"the amount to permit the spender to spend on behalf of the owner.\"}},\"permitWithdraw(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"the deadline timestamp by which the call must be mined for the approve to work.\",\"owner\":\"the account that is being approved.\",\"r\":\"must produce valid secp256k1 signature from the holder along with `v` and `s`.\",\"s\":\"must produce valid secp256k1 signature from the holder along with `r` and `v`.\",\"v\":\"must produce valid secp256k1 signature from the holder along with `r` and `s`.\",\"value\":\"the amount to permit the spender to spend on behalf of the owner.\",\"withdrawer\":\"the account which is being permitted to swithdraw.\"}},\"poke(address)\":{\"params\":{\"owner\":\"The owner of the CDP.\"}},\"positions(address,address)\":{\"params\":{\"owner\":\"The CDP owner.\",\"yieldToken\":\"The yield-token.\"},\"returns\":{\"balance\":\"          The amount of shares of the yield-token in the CDP.\",\"lastAccruedWeight\":\"The last-accrued-weight of the yield-token in the CDP.\"}},\"removeFromWhitelist(address)\":{\"details\":\"Adds an contract to the whitelist.\",\"params\":{\"account\":\"the contract to remove from the whitelist.\"}},\"repay(address,uint256,address)\":{\"params\":{\"amount\":\"The amount of underlying-token to send for debt repayment (also the amount of debt repaid).\",\"recipient\":\"The owner of the CDP that will receive the credit.\",\"underlyingToken\":\"The underlying-token used to repay.\"}},\"setMaximumLoss(address,uint256)\":{\"details\":\"There are two types of loss of value for yield bearing assets: temporary or permanent. The system will      restrict actions which are sensitive to both forms of loss. For example, deposits must be restricted      when an excessive loss is encountered to prevent users from having their collateral harvested from them.      While the user would receive credit, which then could be exchanged for value equal to the collateral      that was harvested from them, it is seen as a negative user experience because the value of their      collateral should have been higher than what was originally recorded when they made their deposit.\",\"params\":{\"value\":\"the value to set the maximum loss to. This is in units of basis points.\",\"yieldToken\":\"the address of the yield bearing token.\"}},\"setMinimumCollateralization(uint256)\":{\"params\":{\"value\":\"The new minimum collateralization ratio.\"}},\"setPendingAdmin(address)\":{\"details\":\"This is the first step in the 2-step process of setting a new administrator. After this function is called,      the pending administrator will then need to call `acceptAdmin` to complete the process.\",\"params\":{\"value\":\"the address to set the pending admin to.\"}},\"setProtocolFee(uint256)\":{\"params\":{\"value\":\"the value to set the protocol fee to. This is in units of basis points.\"}},\"setProtocolFeeReceiver(address)\":{\"params\":{\"value\":\"the address to set the protocol fee receiver to.\"}},\"setTransmuter(address)\":{\"params\":{\"value\":\"The address of the transmuter.\"}},\"snap(address)\":{\"params\":{\"yieldToken\":\"The target yield-token to snap.\"}},\"underlyingTokensPerShare(address)\":{\"params\":{\"yieldToken\":\"the token to check.\"},\"returns\":{\"_0\":\"the rate of the underlying tokens per share.\"}},\"withdraw(address,uint256,address)\":{\"params\":{\"recipient\":\"The recipient of the yield-tokens that are withdrawn.\",\"shares\":\"The number of shares to withdraw.\",\"yieldToken\":\"The yield-token to withdraw.\"}},\"withdrawAllowance(address,address)\":{\"params\":{\"owner\":\"the owner of a position in alchemix.\",\"spender\":\"the account which has been permitted to withdraw.\"},\"returns\":{\"_0\":\"the amount of tokens the account that has been permitted to withdraw can withdraw.\"}},\"withdrawFrom(address,address,uint256,address)\":{\"params\":{\"owner\":\"The owner of the CDP\",\"recipient\":\"The recipient of the yield-tokens that are withdrawn.\",\"shares\":\"The number of shares to withdraw.\",\"token\":\"The yield-token to withdraw.\"}},\"withdrawUnderlying(address,uint256,address,bytes)\":{\"params\":{\"data\":\"A packet of bytes sent to the `unwrap` function of the yield-token-adapter.  The format of these bytes is dependent on the `withdraw` function (or similar) of the target yield-token.\",\"recipient\":\"The recipient of the underlying-tokens that are withdrawn.\",\"shares\":\"The number of shares to withdraw.\",\"yieldToken\":\"The yield-token that can be redeemed for the target underlying-token.\"}},\"withdrawUnderlyingFrom(address,address,uint256,address,bytes)\":{\"params\":{\"data\":\"A packet of bytes sent to the `unwrap` function of the yield-token-adapter.  The format of these bytes is dependent on the `withdraw` function (or similar) of the target yield-token.\",\"owner\":\"The owner of hte CDP\",\"recipient\":\"The recipient of the underlying-tokens that are withdrawn.\",\"shares\":\"The number of shares to withdraw.\",\"token\":\"The yield-token that can be redeemed for the target underlying-token.\"}},\"yieldTokensPerShare(address)\":{\"params\":{\"yieldToken\":\"the yield-token to check.\"},\"returns\":{\"_0\":\"the rate of the yield tokens per share.\"}}},\"stateVariables\":{\"PERMIT_MINT_TYPEHASH\":{\"return\":\"the permit mint typehash.\",\"returns\":{\"_0\":\"the permit mint typehash.\"}},\"PERMIT_WITHDRAW_TYPEHASH\":{\"return\":\"the permit withdraw typehash.\",\"returns\":{\"_0\":\"the permit withdraw typehash.\"}},\"_accounts\":{\"details\":\"Accounts mapped by the address that owns them.\"},\"_mintingLimiter\":{\"details\":\"A linear growth function that limits the amount of debt-token minted.\"},\"_supportedUnderlyingTokens\":{\"details\":\"An iterable set of the underlying tokens that are supported by the system.\"},\"_supportedYieldTokens\":{\"details\":\"An iterable set of the yield tokens that are supported by the system.\"},\"_underlyingTokens\":{\"details\":\"Underlying token parameters mapped by token address.\"},\"_yieldTokens\":{\"details\":\"Yield token parameters mapped by token address.\"},\"admin\":{\"return\":\"the admin.\",\"returns\":{\"_0\":\"the admin.\"}},\"debtToken\":{\"return\":\"The address of the debt-token.\",\"returns\":{\"_0\":\"The address of the debt-token.\"}},\"keepers\":{\"return\":\"the true or false.\",\"returns\":{\"_0\":\"the true or false.\"}},\"minimumCollateralization\":{\"details\":\"The value returned is a 18 decimal fixed point integer.\",\"return\":\"the minimum collateralization.\",\"returns\":{\"_0\":\"the minimum collateralization.\"}},\"nonces\":{\"details\":\"This is used to prevent replay attacks. All permit schemes share the same nonce.\",\"params\":{\"account\":\"the account to get the nonce of.\"},\"return\":\"the nonce.\",\"returns\":{\"_0\":\"the nonce.\"}},\"pendingAdmin\":{\"return\":\"the pending administrator.\",\"returns\":{\"_0\":\"the pending administrator.\"}},\"protocolFee\":{\"return\":\"the protocol fee.\",\"returns\":{\"_0\":\"the protocol fee.\"}},\"protocolFeeReceiver\":{\"return\":\"the protocol fee receiver.\",\"returns\":{\"_0\":\"the protocol fee receiver.\"}},\"sentinels\":{\"return\":\"the true or false.\",\"returns\":{\"_0\":\"the true or false.\"}},\"transmuter\":{\"return\":\"the transmuter.\",\"returns\":{\"_0\":\"the transmuter.\"}}},\"title\":\"AlchemistV2\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidSignature()\":[{\"notice\":\"An error which is thrown when an invalid signature is given.\"}],\"LockAlreadyClaimed()\":[{\"notice\":\"An error which is thrown when a lock is attempted to be claimed before it has been freed.\"}],\"SignatureDeadlineExceeded()\":[{\"notice\":\"An error which is thrown when a permit signature deadline is exceeded.\"}]},\"events\":{\"AddUnderlyingToken(address)\":{\"notice\":\"Emitted when an underlying-token is added to the Alchemist.\"},\"AddYieldToken(address,address)\":{\"notice\":\"Emitted when a yield-token is added to the Alchemist.\"},\"AdminUpdated(address)\":{\"notice\":\"Emitted when the pendingAdmin accepts the admin role.\"},\"ApproveMint(address,address,uint256)\":{\"notice\":\"Emitted when a CDP owner approves a spender to mint debt from their CDP.\"},\"ApproveWithdraw(address,address,uint256)\":{\"notice\":\"Emitted when a CDP owner approves a withdrawer to withdraw collateral from their CDP.\"},\"Burn(address,uint256,address)\":{\"notice\":\"Emitted when debt-tokens are burned to repay debt.\"},\"Deposit(address,address,uint256,address)\":{\"notice\":\"Emitted when a user deposits funds (yield-tokens or underlying-tokens) into a CDP.\"},\"Donate(address,address,uint256)\":{\"notice\":\"Emitted when a user donates credit (via burning debt-tokens) to a yield-token.\"},\"Harvest(address,bytes)\":{\"notice\":\"Emitted when a yield-token is successfully harvested.\"},\"KeeperAdded(address)\":{\"notice\":\"Emitted when a keeper is added.\"},\"KeeperRemoved(address)\":{\"notice\":\"Emitted when a keeper is removed.\"},\"Liquidate(address,address,uint256)\":{\"notice\":\"Emitted when a user liquidates shares from their CDP.\"},\"LiquidationLimitUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when a liquidation limiter is updated.\"},\"MaximumLossUpdated(address,uint256)\":{\"notice\":\"Emitted when a yield-token's maximum loss is updated.\"},\"MinimumCollateralizationUpdated(uint256)\":{\"notice\":\"Emitted when the minimum collateralization ratio is updated.\"},\"Mint(address,uint256,address)\":{\"notice\":\"Emitted when debt-tokens are minted.\"},\"MintingLimitUpdated(uint256,uint256)\":{\"notice\":\"Emitted when an underyling-token's minting limit is updated.\"},\"PendingAdminUpdated(address)\":{\"notice\":\"Emitted when the admin updates the pendingAdmin.\"},\"ProtocolFeeReceiverUpdated(address)\":{\"notice\":\"Emitted when the protocol fee receiver is updated.\"},\"ProtocolFeeUpdated(uint256)\":{\"notice\":\"Emitted when the protocol fee is updated.\"},\"Repay(address,address,uint256,address)\":{\"notice\":\"Emitted when underlying-tokens are used to repay a CDP's debt.\"},\"RepayLimitUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when a repay limiter is updated.\"},\"SentinelAdded(address)\":{\"notice\":\"Emitted when a sentinel is added.\"},\"SentinelRemoved(address)\":{\"notice\":\"Emitted when a sentinel is removed.\"},\"Snap(address,uint256)\":{\"notice\":\"Emitted when a yield-token's expected value is snapped to the current value.\"},\"TransmuterUpdated(address)\":{\"notice\":\"Emitted with the address of the Transmuter is updated.\"},\"UnderlyingTokenDisabled(address)\":{\"notice\":\"Emitted when an underlying-token is disabled in the Alchemist.\"},\"UnderlyingTokenEnabled(address)\":{\"notice\":\"Emitted when an underlying-token is enabled in the Alchemist.\"},\"Withdraw(address,address,uint256,address)\":{\"notice\":\"Emitted when a user withdraws funds (yield-tokens or underlying-tokens) from a CDP.\"},\"YieldTokenDisabled(address)\":{\"notice\":\"Emitted when a yield-token is disabled in the Alchemist.\"},\"YieldTokenEnabled(address)\":{\"notice\":\"Emitted when a yield-token is enabled in the Alchemist.\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"Calculates the EIP-712 domain separator used in permits.\"},\"MAX_BPS()\":{\"notice\":\"The maximum precision of percentage calculations.\"},\"PERMIT_MINT_TYPEHASH()\":{\"notice\":\"Gets the type hash used in the permit minting signature verification.\"},\"PERMIT_WITHDRAW_TYPEHASH()\":{\"notice\":\"Gets the type hash used in the permit withdrawing signature verification.\"},\"acceptAdmin()\":{\"notice\":\"Accepts the role of administrator.\"},\"accounts(address)\":{\"notice\":\"Gets the debt and deposited tokens of an account.\"},\"addUnderlyingToken(address,(uint256,uint256,uint256,uint256))\":{\"notice\":\"Add an underlying-token to the list of supported underlying-tokens.\"},\"addYieldToken(address,(address,uint256,uint256))\":{\"notice\":\"Add a yield-token to the list of supported yield-tokens.\"},\"admin()\":{\"notice\":\"Gets the admin of the Alchemist.\"},\"approveMint(address,uint256)\":{\"notice\":\"Approve an address to mint debt from the CDP owned by msg.sender; This function is intented to be used as a way to delegate a user's credit to a third party, likely another lego.\"},\"approveWithdraw(address,uint256)\":{\"notice\":\"Approve an address to withdraw collateral from the CDP owned by msg.sender; This function is intented to be used as a way to delegate a user's collatearl to a third party, likely another lego.\"},\"burn(uint256,address)\":{\"notice\":\"Burn debt-token to pay back debt in the CDP owned by recipient.\"},\"configureLiquidationLimit(address,uint256,uint256)\":{\"notice\":\"Configure a liquidation limiter.\"},\"configureMintingLimit(uint256,uint256)\":{\"notice\":\"Configure the minting limiter.\"},\"configureRepayLimit(address,uint256,uint256)\":{\"notice\":\"Configure a repay limiter.\"},\"debtToken()\":{\"notice\":\"Returns the address of the debt-token used by the Alchemist.\"},\"deposit(address,uint256,address)\":{\"notice\":\"Deposit a yield-token into a user's CDP.\"},\"depositUnderlying(address,uint256,address,bytes)\":{\"notice\":\"Deposit an underlying-token into a user's CDP.\"},\"disableUnderlyingToken(address)\":{\"notice\":\"Disable an underlying-token.\"},\"disableYieldToken(address)\":{\"notice\":\"Disable a yield-token.\"},\"donate(address,uint256)\":{\"notice\":\"Donate credit weight to a target yield-token by burning debt-tokens.\"},\"enableUnderlyingToken(address)\":{\"notice\":\"Enable an underlying-token.\"},\"enableYieldToken(address)\":{\"notice\":\"Enable a yield-token.\"},\"getSupportedUnderlyingTokens()\":{\"notice\":\"Gets the supported underlying tokens.\"},\"getSupportedYieldTokens()\":{\"notice\":\"Gets the supported yield tokens.\"},\"getUnderlyingTokenParameters(address)\":{\"notice\":\"Gets parameters for an underlying token.\"},\"getYieldTokenParameters(address)\":{\"notice\":\"Get the parameters and state of a yield-token.\"},\"harvest(address,bytes)\":{\"notice\":\"Harvest any pending yield from the target yield-token.\"},\"isSupportedUnderlyingToken(address)\":{\"notice\":\"Gets if an underlying token is supported.\"},\"isSupportedYieldToken(address)\":{\"notice\":\"Gets if a yield token is supported.\"},\"keepers(address)\":{\"notice\":\"Checks if an address is a keeper.\"},\"liquidate(address,uint256,bytes)\":{\"notice\":\"Liquidate funds from the CDP owned by msg.sender.\"},\"minimumCollateralization()\":{\"notice\":\"Gets the minimum collateralization that the system supports. Collateralization is determined by taking the total value of collateral that a user has deposited into their account and dividing it by the debt that they have taken out.\"},\"mint(uint256,address)\":{\"notice\":\"Mint debt from the CDP owned by msg.sender.\"},\"mintAllowance(address,address)\":{\"notice\":\"Gets the amount of tokens an account that has been delegated credit can mint.\"},\"mintFrom(address,uint256,address)\":{\"notice\":\"Mint debt from the CDP owned by owner.\"},\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"},\"nonces(address)\":{\"notice\":\"Gets the current permit nonce of `account`.\"},\"pendingAdmin()\":{\"notice\":\"Gets the pending administrator of the Alchemist.\"},\"permitMint(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approves `spender` to spend `value` tokens on the behalf of `owner`.. The permit message should be signed off-chain by the owner of the position and the resulting v, r, and s parameters are used to verify the approval signature.\"},\"permitWithdraw(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approves `withdrawer` to withdraw `value` tokens on the behalf of `owner`.. The permit message should be signed off-chain by the owner of the position and the resulting v, r, and s parameters are used to verify the approval signature.\"},\"poke(address)\":{\"notice\":\"Sync the weights of all yieldTokens in a user's CDP. \"},\"positions(address,address)\":{\"notice\":\"Gets the balance and lastAccruedWeight of a given yield-token in a user's CDP\"},\"protocolFee()\":{\"notice\":\"Gets the protocol fee.\"},\"protocolFeeReceiver()\":{\"notice\":\"Gets the protocol fee receiver.\"},\"repay(address,uint256,address)\":{\"notice\":\"Repay debt with an underlying-token.\"},\"sentinels(address)\":{\"notice\":\"Checks if an address is a sentinel.\"},\"setMaximumLoss(address,uint256)\":{\"notice\":\"Sets the maximum loss that a yield bearing token will permit before restricting certain actions.\"},\"setMinimumCollateralization(uint256)\":{\"notice\":\"Set the minimum collateralization ratio for the debt-token.\"},\"setPendingAdmin(address)\":{\"notice\":\"Sets the pending administrator.\"},\"setProtocolFee(uint256)\":{\"notice\":\"Sets the fee that the protocol will take from harvests.\"},\"setProtocolFeeReceiver(address)\":{\"notice\":\"Sets the address which will receive protocol fees.\"},\"setTransmuter(address)\":{\"notice\":\"Set the address of the transmuter. The address set here will likely be a TransmuterBuffer contract, and not the Transmuter itself, but the Alchemist does not know nor does it care.\"},\"snap(address)\":{\"notice\":\"Snap the expected value of a token to the current value. This function would only be used in the event of a loss in the target yield-token. For example, say a third-party vault experiences a 50% loss.  The expected value (amount of underlying-tokens) of the yield-tokens being held by the Alchemist would be 2X the real value that those yield-tokens could be redeemed for.  The `snap` function gives governance a way to realize those losses so that users can continue using the strategy as normal.\"},\"transmuter()\":{\"notice\":\"Gets the transmuter.\"},\"underlyingTokensPerShare(address)\":{\"notice\":\"Gets the rate of the underlying tokens per share.\"},\"withdraw(address,uint256,address)\":{\"notice\":\"Withdraw a yield-token from the CDP owned by msg.sender.\"},\"withdrawAllowance(address,address)\":{\"notice\":\"Gets the amount of tokens an account has been permitted can withdraw.\"},\"withdrawFrom(address,address,uint256,address)\":{\"notice\":\"Withdraw a yield-token from the CDP owned by owner.\"},\"withdrawUnderlying(address,uint256,address,bytes)\":{\"notice\":\"Withdraw an underlying-token from the CDP owned by msg.sender.\"},\"withdrawUnderlyingFrom(address,address,uint256,address,bytes)\":{\"notice\":\"Withdraw an underlying-token from the CDP owned by owner.\"},\"yieldTokensPerShare(address)\":{\"notice\":\"Gets the rate of the yield tokens per share.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AlchemistV2.sol\":\"AlchemistV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/AlchemicTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IDetailedERC20} from \\\"./interfaces/IDetailedERC20.sol\\\";\\nimport {IERC3156FlashBorrower} from \\\"./interfaces/IERC3156FlashBorrower.sol\\\";\\nimport {IERC3156FlashLender} from \\\"./interfaces/IERC3156FlashLender.sol\\\";\\n\\n/// @title AlchemicTokenV2\\n///\\n/// @dev This is the contract for the Alchemix utility token usd.\\n///\\n/// Initially, the contract deployer is given both the admin and minter role. This allows them to\\n/// pre-mine tokens, transfer admin to a timelock contract, and lastly, grant the staking pools the\\n/// minter role. After this is done, the deployer must revoke their admin role and minter role.\\ncontract AlchemicTokenV2 is AccessControl, ReentrancyGuard, ERC20, IERC3156FlashLender {\\n  using SafeERC20 for ERC20;\\n  using SafeMath for uint256;\\n\\n  /// @dev The identifier of the role which maintains other roles.\\n  bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n\\n  /// @dev The identifier of the role which allows accounts to mint tokens.\\n  bytes32 public constant SENTINEL_ROLE = keccak256(\\\"SENTINEL\\\");\\n\\n  /// @dev The expected return value from a flashmint receiver\\n  bytes32 public constant CALLBACK_SUCCESS = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n  /// @dev addresses whitelisted for minting new tokens\\n  mapping(address => bool) public whitelisted;\\n\\n  /// @dev addresses paused for minting new tokens\\n  mapping(address => bool) public paused;\\n\\n  /// @dev ceiling per address for minting new tokens\\n  mapping(address => uint256) public mintCeiling;\\n\\n  /// @dev already minted amount per address to track the ceiling\\n  mapping(address => uint256) public totalMinted;\\n\\n  event Paused(address minter, bool state);\\n\\n  constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n    _setupRole(ADMIN_ROLE, msg.sender);\\n    _setupRole(SENTINEL_ROLE, msg.sender);\\n    _setRoleAdmin(SENTINEL_ROLE, ADMIN_ROLE);\\n    _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n  }\\n\\n  /// @dev A modifier which checks that the caller has the admin role.\\n  modifier onlyAdmin() {\\n    require(hasRole(ADMIN_ROLE, msg.sender), \\\"only admin\\\");\\n    _;\\n  }\\n  /// @dev A modifier which checks that the caller has the sentinel role.\\n  modifier onlySentinel() {\\n    require(hasRole(SENTINEL_ROLE, msg.sender), \\\"only sentinel\\\");\\n    _;\\n  }\\n\\n  /// @dev A modifier which checks if whitelisted for minting.\\n  modifier onlyWhitelisted() {\\n    require(whitelisted[msg.sender], \\\"alX: Alchemist is not whitelisted\\\");\\n    _;\\n  }\\n\\n  /// @dev Mints tokens to a recipient.\\n  ///\\n  /// This function reverts if the caller does not have the minter role.\\n  ///\\n  /// @param recipient the account to mint tokens to.\\n  /// @param amount    the amount of tokens to mint.\\n  function mint(address recipient, uint256 amount) external onlyWhitelisted {\\n    require(!paused[msg.sender], \\\"alX: Alchemist is currently paused.\\\");\\n\\n    uint256 total = amount + totalMinted[msg.sender];\\n    require(total <= mintCeiling[msg.sender], \\\"alX: Alchemist's ceiling was breached.\\\");\\n    totalMinted[msg.sender] = total;\\n\\n    _mint(recipient, amount);\\n  }\\n\\n  /// @dev This function reverts if the caller does not have the admin role.\\n  ///\\n  /// @param who the account to mint tokens to.\\n  /// @param state the whitelist state.\\n  function setWhitelist(address who, bool state) external onlyAdmin {\\n    whitelisted[who] = state;\\n  }\\n\\n  /// @dev This function reverts if the caller does not have the admin role.\\n  ///\\n  /// @param newSentinel the account to set as sentinel.\\n  function setSentinel(address newSentinel) external onlyAdmin {\\n    _setupRole(SENTINEL_ROLE, newSentinel);\\n  }\\n\\n  /// @dev This function reverts if the caller does not have the admin role.\\n  ///\\n  /// @param minter  the account set the ceiling off.\\n  /// @param ceiling the max amount of tokens the account is allowed to mint.\\n  function setCeiling(address minter, uint256 ceiling) external onlyAdmin {\\n    mintCeiling[minter] = ceiling;\\n  }\\n\\n  /// @dev This function reverts if the caller does not have the admin role.\\n  ///\\n  /// @param minter the account with minting permissions.\\n  /// @param state  the state of the minter permissions.\\n  function pauseMinter(address minter, bool state) external onlySentinel {\\n    paused[minter] = state;\\n    emit Paused(minter, state);\\n  }\\n\\n  /// @dev Destroys `amount` tokens from the caller.\\n  ///\\n  /// @param amount the amount of tokens to be burned.\\n  function burn(uint256 amount) external {\\n    _burn(_msgSender(), amount);\\n  }\\n\\n  /// @dev Destroys `amount` tokens from `account`, deducting from the caller's allowance.\\n  ///\\n  /// @param account the account from which tokens will be burned.\\n  /// @param amount  the amount of tokens to be burned.\\n  function burnFrom(address account, uint256 amount) external {\\n    uint256 newAllowance = allowance(account, _msgSender()).sub(amount, \\\"AlToken: burn amount exceeds allowance\\\");\\n\\n    _approve(account, _msgSender(), newAllowance);\\n    _burn(account, amount);\\n  }\\n\\n  /// @dev Lowers hasMinted from the caller's allocation.\\n  ///\\n  /// @param amount the amount of tokens to subtract from totalMinted.\\n  function lowerHasMinted(uint256 amount) external onlyWhitelisted {\\n    totalMinted[msg.sender] = totalMinted[msg.sender] - amount;\\n  }\\n\\n  /// @dev Maximum amount to be flashloaned\\n  ///\\n  /// @param token The address of the token\\n  function maxFlashLoan(address token) public view override returns (uint256) {\\n    require(token == address(this), \\\"Can only flashmint self\\\");\\n    return type(uint256).max;\\n  }\\n\\n  /// @dev The fee for flashloan\\n  ///\\n  /// @param token The address of the token\\n  /// @param amount How much token to flashmint\\n  function flashFee(address token, uint256 amount) public view override returns (uint256) {\\n    require(token == address(this), \\\"Can only flashmint self\\\");\\n    return amount / 1000; // 0.1%, we could modify this\\n  }\\n\\n  /// @dev Perform a flashmint (called flashloan to confirm with ERC3156 standard)\\n  ///\\n  /// @param receiver The callback address\\n  /// @param token The address of the token\\n  /// @param amount How much token to flashmint\\n  /// @param data Extra data to pass into callback\\n  function flashLoan(\\n    IERC3156FlashBorrower receiver,\\n    address token,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external override nonReentrant returns (bool) {\\n    require(token == address(this), \\\"Can only flashmint self\\\");\\n    require(amount <= maxFlashLoan(token), \\\"Surpasses max flashmint amount\\\");\\n\\n    uint256 fee = flashFee(token, amount);\\n\\n    _mint(address(receiver), amount);\\n    require(receiver.onFlashLoan(msg.sender, token, amount, fee, data) == CALLBACK_SUCCESS, \\\"flashLoan failed\\\");\\n    _burn(address(receiver), amount + fee); // Will throw error if not enough to burn\\n\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0x4cd65baf6efd974c4fc50dba45aa2fa4357d2daf196c5fce20f2f4313a7da88e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/AlchemistV2.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport \\\"./interfaces/IAlchemistV2.sol\\\";\\nimport \\\"./interfaces/IERC20Minimal.sol\\\";\\nimport \\\"./interfaces/IERC20TokenReceiver.sol\\\";\\nimport \\\"./interfaces/ITokenAdapter.sol\\\";\\nimport \\\"./AlchemicTokenV2.sol\\\";\\nimport \\\"./libraries/SafeCast.sol\\\";\\nimport \\\"./libraries/Sets.sol\\\";\\nimport \\\"./libraries/TokenUtils.sol\\\";\\nimport \\\"./libraries/Limiters.sol\\\";\\nimport \\\"./base/Multicall.sol\\\";\\nimport \\\"./base/Mutex.sol\\\";\\nimport \\\"./ContractWhitelister.sol\\\";\\n\\n/// @title  AlchemistV2\\n/// @author Alchemix Finance\\ncontract AlchemistV2 is IAlchemistV2, Multicall, Mutex, ContractWhitelister {\\n    using Limiters for Limiters.LinearGrowthLimiter;\\n    using Sets for Sets.AddressSet;\\n\\n    /// @notice The maximum precision of percentage calculations.\\n    uint256 public constant MAX_BPS = 10000;\\n\\n    /// @notice Alchemist configuration params.\\n    struct Params {\\n        address admin;                      /// The admin account.\\n        address debtToken;                  /// The ERC20 token used to represent debt in the Alchemist.\\n        address transmuter;                 /// The Transmuter (or TransmuterBuffer) used by the Alchemist.\\n        uint256 minimumCollateralization;   /// The minimum collateralization ratio that a CDP must maintain.\\n        uint256 protocolFee;                /// The percentage fee taken from each harvest.\\n        address protocolFeeReceiver;        /// The address that receives the fee.\\n        uint256 mintingLimitMaximum;        /// The limit to be used in the minting limiter.\\n        uint256 mintingLimitBlocks;         /// The number of recovery blocks to be used in the minting limiter.\\n    }\\n\\n    /// @notice Parameters and state of an underlying-token.\\n    struct UnderlyingTokenParams {\\n        uint8 decimals;                                     /// The decimals of the underlying-token.\\n        uint256 conversionFactor;                           /// A number used to normalize the decimals of the underlying-token.\\n        Limiters.LinearGrowthLimiter repayLimiter;        /// An LGF used to limit repayments.\\n        Limiters.LinearGrowthLimiter liquidationLimiter;  /// An LGF used to limit liquidations.\\n        bool enabled;                                       /// A flag to represent if the underlying-token is enabled.\\n    }\\n\\n    /// @notice Parameters used to configure a yield-token.\\n    struct YieldTokenParams {\\n        uint8 decimals;                 /// The decimals of the yield-token.\\n        address underlyingToken;        /// The associated underlying-token that can be redeemed for the yield-token.\\n        address adapter;                /// The adapter used by the Alchemist to wrap and unwarp the yield-token.\\n        uint256 maximumLoss;            /// The maximum percentage loss that is acceptable befor disabling most interations with yield-token via the Alchemist.\\n        uint256 maximumExpectedValue;   /// The maximum value of yield-tokens that the Alchemist can hold, represented in underlying-tokens.\\n        uint256 balance;                /// The current balance of yield-tokens in the Alchemist.\\n        uint256 totalShares;            /// The total number of shares that have been minted for this token.\\n        uint256 expectedValue;          /// The expected number of underlying-tokens that can be obtained by redeeming the held yield-tokens.\\n        uint256 accruedWeight;          /// The total accrued weight of yield-tokens in the Alchemist.\\n        bool enabled;                   /// A flag to represent if the yield-token is enabled.\\n    }\\n\\n    /// @notice A CDP\\n    struct Account {        \\n        int256 debt;                                    /// The debt held by the CDP.\\n        mapping(address => uint256) balances;           /// The balances of yield-tokens held by the CDP.\\n        mapping(address => uint256) lastAccruedWeights; /// The last values recorded for accrued weights of yield-tokens held by the CDP.\\n        Sets.AddressSet depositedTokens;                /// The yield-tokens deposited in the CDP.\\n        mapping(address => uint256) mintAllowances;     /// The allowances of third-party minters to mint debt from the CDP.\\n        mapping(address => uint256) withdrawAllowances; /// The allowances of third-party collateral withdrawals to withdrawal collateral from the CDP.\\n    }\\n\\n    /// @inheritdoc IAlchemistV2Immutables\\n    address public immutable override debtToken;\\n\\n    /// @inheritdoc IAlchemistV2State\\n    address public override admin;\\n\\n    /// @inheritdoc IAlchemistV2State\\n    address public override pendingAdmin;\\n\\n    /// @inheritdoc IAlchemistV2State\\n    mapping(address => bool) public override sentinels;\\n\\n    /// @inheritdoc IAlchemistV2State\\n    mapping(address => bool) public override keepers;\\n\\n    /// @inheritdoc IAlchemistV2State\\n    address public override transmuter;\\n\\n    /// @inheritdoc IAlchemistV2State\\n    uint256 public override minimumCollateralization;\\n\\n    /// @inheritdoc IAlchemistV2State\\n    uint256 public override protocolFee;\\n\\n    /// @inheritdoc IAlchemistV2State\\n    address public override protocolFeeReceiver;\\n\\n    /// @inheritdoc IAlchemistV2Permit\\n    // keccak256(MintFrom(address owner,uint256 amount,address recipient))\\n    bytes32 public constant override PERMIT_MINT_TYPEHASH = 0x75597f45d20ee38c23b459da2dc911cec482e56521830ddc96918afde28f35e2;\\n\\n    /// @inheritdoc IAlchemistV2Permit\\n    // keccak256(WithdrawFrom(address owner,address token,uint256 shares,address recipient))\\n    bytes32 public constant override PERMIT_WITHDRAW_TYPEHASH = 0x4e69b929e93dac11cc23d4346204322b15f9aeb082793d7c74e14af3073a48c9;\\n\\n    /// @inheritdoc IAlchemistV2Permit\\n    mapping(address => uint256) public override nonces;\\n\\n    /// @dev A linear growth function that limits the amount of debt-token minted.\\n    Limiters.LinearGrowthLimiter private _mintingLimiter;\\n\\n    /// @dev Accounts mapped by the address that owns them.\\n    mapping(address => Account) private _accounts;\\n\\n    /// @dev Underlying token parameters mapped by token address.\\n    mapping(address => UnderlyingTokenParams) private _underlyingTokens;\\n\\n    /// @dev Yield token parameters mapped by token address.\\n    mapping(address => YieldTokenParams) private _yieldTokens;\\n\\n    /// @dev An iterable set of the underlying tokens that are supported by the system.\\n    Sets.AddressSet private _supportedUnderlyingTokens;\\n\\n    /// @dev An iterable set of the yield tokens that are supported by the system.\\n    Sets.AddressSet private _supportedYieldTokens;\\n\\n    constructor(Params memory params) ContractWhitelister() {\\n        debtToken = params.debtToken;\\n        admin = params.admin;\\n        transmuter = params.transmuter;\\n        minimumCollateralization = params.minimumCollateralization;\\n        protocolFee = params.protocolFee;\\n        protocolFeeReceiver = params.protocolFeeReceiver;\\n\\n        _mintingLimiter = Limiters.createLinearGrowthLimiter(params.mintingLimitMaximum, params.mintingLimitBlocks);\\n\\n        whitelistActive = true;\\n\\n        emit AdminUpdated(admin);\\n        emit TransmuterUpdated(transmuter);\\n        emit MinimumCollateralizationUpdated(minimumCollateralization);\\n        emit ProtocolFeeUpdated(protocolFee);\\n        emit ProtocolFeeReceiverUpdated(protocolFeeReceiver);\\n        emit MintingLimitUpdated(params.mintingLimitMaximum, params.mintingLimitBlocks);\\n    }\\n\\n    /// @dev Only calls from the admin address are authorized to pass.\\n    function onlyAdmin() internal override {\\n        if (msg.sender != admin) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert Unauthorized(\\\"Not admin\\\");\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n    }\\n\\n    /// @dev Only calls from a sentinel address are authorized to pass.\\n    function onlySentinelOrAdmin() internal {\\n        if (!sentinels[msg.sender] && msg.sender != admin) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert Unauthorized(\\\"Not sentinel\\\");\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n    }\\n\\n    /// @dev Only calls from a keeper address are authorized to pass.\\n    modifier onlyKeeper() {\\n        if (!keepers[msg.sender]) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert OnlyKeeper();\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IAlchemistV2State\\n    function yieldTokensPerShare(address yieldToken) external view override returns (uint256) {\\n        return _convertSharesToYieldTokens(yieldToken, 10** _yieldTokens[yieldToken].decimals);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2State\\n    function underlyingTokensPerShare(address yieldToken) external view override returns (uint256) {\\n        return _convertSharesToUnderlyingTokens(yieldToken, 10** _yieldTokens[yieldToken].decimals);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2State\\n    function getSupportedUnderlyingTokens() external view override returns (address[] memory) {\\n        return _supportedUnderlyingTokens.values;\\n    }\\n\\n    /// @inheritdoc IAlchemistV2State\\n    function getSupportedYieldTokens() external view override returns (address[] memory) {\\n        return _supportedYieldTokens.values;\\n    }\\n\\n    /// @inheritdoc IAlchemistV2State\\n    function isSupportedUnderlyingToken(address underlyingToken) external view override returns (bool) {\\n        return _supportedUnderlyingTokens.contains(underlyingToken);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2State\\n    function isSupportedYieldToken(address yieldToken) external view override returns (bool) {\\n        return _supportedYieldTokens.contains(yieldToken);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2State\\n    function getUnderlyingTokenParameters(address underlyingToken)\\n        external view override\\n        returns (\\n            uint8 decimals,\\n            uint256 conversionFactor,\\n            bool enabled\\n        )\\n    {\\n        UnderlyingTokenParams storage params = _underlyingTokens[underlyingToken];\\n        return (\\n            params.decimals,\\n            params.conversionFactor,\\n            params.enabled\\n        );\\n    }\\n\\n    /// @inheritdoc IAlchemistV2State\\n    function accounts(address owner) external view override returns (int256 debt, address[] memory depositedTokens) {\\n        Account storage account = _accounts[owner];\\n        return (account.debt, account.depositedTokens.values);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2State\\n    function positions(\\n        address owner,\\n        address yieldToken\\n    ) external view override returns (uint256 balance, uint256 lastAccruedWeight) {\\n        Account storage account = _accounts[owner];\\n        return (account.balances[yieldToken], account.lastAccruedWeights[yieldToken]);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2State\\n    function getYieldTokenParameters(address yieldToken)\\n        external view override\\n        returns (\\n            uint8 decimals,\\n            address underlyingToken,\\n            address adapter,\\n            uint256 maximumLoss,\\n            uint256 balance,\\n            uint256 totalShares,\\n            uint256 expectedValue,\\n            uint256 accruedWeight,\\n            bool enabled\\n        )\\n    {\\n        YieldTokenParams storage params = _yieldTokens[yieldToken];\\n        return (\\n            params.decimals,\\n            params.underlyingToken,\\n            params.adapter,\\n            params.maximumLoss,\\n            params.balance,\\n            params.totalShares,\\n            params.expectedValue,\\n            params.accruedWeight,\\n            params.enabled\\n        );\\n    }\\n\\n    /// @inheritdoc IAlchemistV2State\\n    function mintAllowance(address owner, address spender) external view override returns (uint256) {\\n        Account storage account = _accounts[owner];\\n        return account.mintAllowances[spender];\\n    }\\n\\n    /// @inheritdoc IAlchemistV2State\\n    function withdrawAllowance(address owner, address spender) external view override returns (uint256) {\\n        Account storage account = _accounts[owner];\\n        return account.withdrawAllowances[spender];\\n    }\\n\\n    /// @inheritdoc IAlchemistV2Permit\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                // keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n                0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f,\\n                // keccak256(\\\"Alchemix - Alchemist V2\\\")\\n                0xfc01e36e23316d5c2b9890d52c673e909cb50865d3d49aeed293bb9a5fb8d888,\\n                // keccak256(\\\"1\\\")\\n                0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6,\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /// @inheritdoc IAlchemistV2AdminActions\\n    function setPendingAdmin(address value) external override {\\n        onlyAdmin();\\n        pendingAdmin = value;\\n        emit PendingAdminUpdated(value);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2AdminActions\\n    function acceptAdmin() external override {\\n        if (pendingAdmin == address(0)) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert IllegalState(\\\"No pending admin is set\\\");\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        if (msg.sender != pendingAdmin) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert Unauthorized(\\\"Only pending admin may call\\\");\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        admin = pendingAdmin;\\n        pendingAdmin = address(0);\\n\\n        emit AdminUpdated(admin);\\n        emit PendingAdminUpdated(address(0));\\n    }\\n\\n    function addSentinel(address value) external {\\n        onlyAdmin();\\n        if (sentinels[value]) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert IllegalState(\\\"Sentinel already added\\\");\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n        sentinels[value] = true;\\n        emit SentinelAdded(value);\\n    }\\n\\n    function removeSentinel(address value) external {\\n        onlyAdmin();\\n        if (!sentinels[value]) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert IllegalState(\\\"Sentinel not added yet\\\");\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n        sentinels[value] = false;\\n        emit SentinelRemoved(value);\\n    }\\n\\n    function addKeeper(address value) external {\\n        onlyAdmin();\\n        if (keepers[value]) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert IllegalState(\\\"Keeper already added\\\");\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n        keepers[value] = true;\\n        emit KeeperAdded(value);\\n    }\\n\\n    function removeKeeper(address value) external {\\n        onlyAdmin();\\n        if (!keepers[value]) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert IllegalState(\\\"Keeper not added yet\\\");\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n        keepers[value] = false;\\n        emit KeeperRemoved(value);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2AdminActions\\n    function addUnderlyingToken(address token, UnderlyingTokenConfig calldata config) external override lock {\\n        onlyAdmin();\\n        if (_supportedUnderlyingTokens.contains(token)) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert IllegalState(\\\"Token already added\\\");\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        uint8 tokenDecimals = TokenUtils.expectDecimals(token);\\n        uint8 debtTokenDecimals = TokenUtils.expectDecimals(debtToken);\\n\\n        if (tokenDecimals > debtTokenDecimals) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert IllegalArgument(\\\"Token has unsupported number of decimals\\\");\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        _underlyingTokens[token] = UnderlyingTokenParams({\\n            decimals: tokenDecimals,\\n            conversionFactor: 10**(debtTokenDecimals - tokenDecimals),\\n            repayLimiter: Limiters.createLinearGrowthLimiter(config.repayLimitMaximum, config.repayLimitBlocks),\\n            liquidationLimiter: Limiters.createLinearGrowthLimiter(config.liquidationLimitMaximum, config.liquidationLimitBlocks),\\n            enabled: false\\n        });\\n\\n        _supportedUnderlyingTokens.add(token);\\n\\n        emit AddUnderlyingToken(token);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2AdminActions\\n    function addYieldToken(address token, YieldTokenConfig calldata config) external override lock {\\n        onlyAdmin();\\n        if (config.maximumLoss > MAX_BPS) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert IllegalArgument(\\\"Maximum loss exceeds maximum supported value\\\");\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        ITokenAdapter adapter = ITokenAdapter(config.adapter);\\n\\n        if (token != adapter.token()) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert IllegalState(\\\"Adapter token mismatch\\\");\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        if (_supportedYieldTokens.contains(token)) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert IllegalState(\\\"Yield token is already added\\\");\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        if (!_supportedUnderlyingTokens.contains(adapter.underlyingToken())) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert IllegalState(\\\"Underlying token of yield token is not supported\\\");\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        _yieldTokens[token] = YieldTokenParams({\\n            decimals: TokenUtils.expectDecimals(token),\\n            underlyingToken: adapter.underlyingToken(),\\n            adapter: config.adapter,\\n            maximumLoss: config.maximumLoss,\\n            maximumExpectedValue: config.maximumExpectedValue,\\n            balance: 0,\\n            totalShares: 0,\\n            expectedValue: 0,\\n            accruedWeight: 0,\\n            enabled: false\\n        });\\n\\n        _supportedYieldTokens.add(token);\\n\\n        TokenUtils.safeApprove(token, config.adapter, type(uint256).max);\\n        TokenUtils.safeApprove(adapter.underlyingToken(), config.adapter, type(uint256).max);\\n\\n        emit AddYieldToken(token, config.adapter);\\n        emit MaximumLossUpdated(token, config.maximumLoss);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2AdminActions\\n    function enableUnderlyingToken(address underlyingToken) external override {\\n        onlyAdmin();\\n        if (_underlyingTokens[underlyingToken].enabled) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert IllegalState(\\\"Underlying token already enabled\\\");\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n        _underlyingTokens[underlyingToken].enabled = true;\\n        emit UnderlyingTokenEnabled(underlyingToken);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2AdminActions\\n    function disableUnderlyingToken(address underlyingToken) external override {\\n        onlySentinelOrAdmin();\\n        if (!_underlyingTokens[underlyingToken].enabled) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert IllegalState(\\\"Underlying token already disabled\\\");\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n        _underlyingTokens[underlyingToken].enabled = false;\\n        emit UnderlyingTokenDisabled(underlyingToken);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2AdminActions\\n    function enableYieldToken(address yieldToken) external override {\\n        onlyAdmin();\\n        if (_yieldTokens[yieldToken].enabled) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert IllegalState(\\\"Yield token already enabled\\\");\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n        _yieldTokens[yieldToken].enabled = true;\\n        emit YieldTokenEnabled(yieldToken);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2AdminActions\\n    function disableYieldToken(address yieldToken) external override {\\n        onlySentinelOrAdmin();\\n        if (!_yieldTokens[yieldToken].enabled) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert IllegalState(\\\"Yield token already disabled\\\");\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n        _yieldTokens[yieldToken].enabled = false;\\n        emit YieldTokenDisabled(yieldToken);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2AdminActions\\n    function configureRepayLimit(address underlyingToken, uint256 maximum, uint256 blocks) external override {\\n        onlyAdmin();\\n        _underlyingTokens[underlyingToken].repayLimiter.update();\\n        _underlyingTokens[underlyingToken].repayLimiter.configure(maximum, blocks);\\n        emit RepayLimitUpdated(underlyingToken, maximum, blocks);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2AdminActions\\n    function configureLiquidationLimit(address underlyingToken, uint256 maximum, uint256 blocks) external override {\\n        onlyAdmin();\\n        _underlyingTokens[underlyingToken].liquidationLimiter.update();\\n        _underlyingTokens[underlyingToken].liquidationLimiter.configure(maximum, blocks);\\n        emit LiquidationLimitUpdated(underlyingToken, maximum, blocks);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2AdminActions\\n    function setTransmuter(address value) external override {\\n        onlyAdmin();\\n        transmuter = value;\\n        emit TransmuterUpdated(value);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2AdminActions\\n    function setMinimumCollateralization(uint256 value) external override {\\n        onlyAdmin();\\n        minimumCollateralization = value;\\n        emit MinimumCollateralizationUpdated(value);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2AdminActions\\n    function setProtocolFee(uint256 value) external override {\\n        onlyAdmin();\\n        protocolFee = value;\\n        emit ProtocolFeeUpdated(value);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2AdminActions\\n    function setProtocolFeeReceiver(address value) external override {\\n        onlyAdmin();\\n        protocolFeeReceiver = value;\\n        emit ProtocolFeeReceiverUpdated(value);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2AdminActions\\n    function configureMintingLimit(uint256 maximum, uint256 rate) external override {\\n        onlyAdmin();\\n        _mintingLimiter.update();\\n        _mintingLimiter.configure(maximum, rate);\\n        emit MintingLimitUpdated(maximum, rate);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2AdminActions\\n    function setMaximumLoss(address yieldToken, uint256 value) external override {\\n        onlyAdmin();\\n        if (value > MAX_BPS) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert IllegalArgument(\\\"Exceeds maximum supported value\\\");\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        if (!_supportedYieldTokens.contains(yieldToken)) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert UnsupportedToken(yieldToken);\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        _yieldTokens[yieldToken].maximumLoss = value;\\n        emit MaximumLossUpdated(yieldToken, value);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2AdminActions\\n    function snap(address yieldToken) external override lock {\\n        onlyAdmin();\\n        if (!_supportedYieldTokens.contains(yieldToken)) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert UnsupportedToken(yieldToken);\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n        uint256 currentBalance = _yieldTokens[yieldToken].balance;\\n        uint256 expectedValue = _convertYieldTokensToUnderlying(yieldToken, currentBalance);\\n        _yieldTokens[yieldToken].expectedValue = expectedValue;\\n        emit Snap(yieldToken, expectedValue);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2Actions\\n    function approveMint(address spender, uint256 amount) external override {\\n        onlyWhitelisted();\\n        _approveMint(msg.sender, spender, amount);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2Actions\\n    function approveWithdraw(address withdrawer, uint256 amount) external override {\\n        onlyWhitelisted();\\n        _approveWithdraw(msg.sender, withdrawer, amount);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2Actions\\n    function poke(address owner) external override lock {\\n        _poke(owner);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2Actions\\n    function deposit(address yieldToken, uint256 amount, address recipient) external override lock {\\n        onlyWhitelisted();\\n        if (!_supportedYieldTokens.contains(yieldToken)) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert UnsupportedToken(yieldToken);\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        _checkEnabled(yieldToken);\\n\\n        // Check to assure that the yieldToken has not experienced a sudden unexpected loss. This prevents users from\\n        // being able to deposit funds and then have them siphoned once the price recovers.\\n        //\\n        // An example of this occurred with Yearn where a bug in a strategy reported a loss where there wasn't.\\n        // Later, the strategy was fixed and users who withdrew during that time lost funds.\\n        _checkLoss(yieldToken);\\n\\n        _poke(recipient, yieldToken);\\n        _issueSharesForAmount(recipient, yieldToken, amount);\\n        _sync(yieldToken, amount, _uadd);\\n\\n        TokenUtils.safeTransferFrom(yieldToken, msg.sender, address(this), amount);\\n\\n        emit Deposit(msg.sender, yieldToken, amount, recipient);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2Actions\\n    function depositUnderlying(address yieldToken, uint256 amount, address recipient, bytes memory data) external override lock {\\n        onlyWhitelisted();\\n        if (!_supportedYieldTokens.contains(yieldToken)) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert UnsupportedToken(yieldToken);\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        uint256 wrapped = _wrap(yieldToken, amount, data);\\n\\n        _checkEnabled(yieldToken);\\n\\n        // See note in deposit.\\n        _checkLoss(yieldToken);\\n\\n        _poke(recipient, yieldToken);\\n        _issueSharesForAmount(recipient, yieldToken, wrapped);\\n        _sync(yieldToken, wrapped, _uadd);\\n\\n        emit Deposit(msg.sender, yieldToken, wrapped, recipient);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2Actions\\n    function withdraw(address yieldToken, uint256 shares, address recipient) external override lock {\\n        onlyWhitelisted();\\n        if (!_supportedYieldTokens.contains(yieldToken)) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert UnsupportedToken(yieldToken);\\n            // #else\\n            require(false, \\\"UnsupportedToken()\\\");\\n            // #endif\\n        }\\n\\n        _poke(msg.sender);\\n\\n        uint256 amount = _convertSharesToYieldTokens(yieldToken, shares);\\n\\n        _burnShares(msg.sender, yieldToken, shares);\\n        _sync(yieldToken, amount, _usub);\\n\\n        _validate(msg.sender);\\n\\n        TokenUtils.safeTransfer(yieldToken, recipient, amount);\\n\\n        emit Withdraw(msg.sender, yieldToken, shares, recipient);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2Actions\\n    function withdrawFrom(address owner, address token, uint256 shares, address recipient) external override lock {\\n        onlyWhitelisted();\\n        if (!_supportedYieldTokens.contains(token)) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert UnsupportedToken(token);\\n            // #else\\n            require(false, \\\"UnsupportedToken()\\\");\\n            // #endif\\n        }\\n\\n        _poke(owner);\\n\\n        uint256 amount = _convertSharesToYieldTokens(token, shares);\\n\\n        _burnShares(owner, token, shares);\\n        _sync(token, amount, _usub);\\n\\n        _validate(owner);\\n\\n        _decreaseWithdrawAllowance(owner, msg.sender, amount);\\n\\n        TokenUtils.safeTransfer(token, recipient, amount);\\n\\n        emit Withdraw(owner, token, shares, recipient);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2Actions\\n    function withdrawUnderlying(address yieldToken, uint256 shares, address recipient, bytes memory data) external override lock {\\n        onlyWhitelisted();\\n        if (!_supportedYieldTokens.contains(yieldToken)) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert UnsupportedToken(yieldToken);\\n            // #else\\n            require(false, \\\"UnsupportedToken()\\\");\\n            // #endif\\n        }\\n\\n        // See note in deposit.\\n        _checkLoss(yieldToken);\\n\\n        _poke(msg.sender);\\n\\n        uint256 amount = _convertSharesToYieldTokens(yieldToken, shares);\\n\\n        _burnShares(msg.sender, yieldToken, shares);\\n        _sync(yieldToken, amount, _usub);\\n\\n        _validate(msg.sender);\\n\\n        _unwrap(yieldToken, amount, recipient, data);\\n\\n        emit Withdraw(msg.sender, yieldToken, shares, recipient);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2Actions\\n    function withdrawUnderlyingFrom(address owner, address token, uint256 shares, address recipient, bytes memory data) external override lock {\\n        onlyWhitelisted();\\n        if (!_supportedYieldTokens.contains(token)) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert UnsupportedToken(token);\\n            // #else\\n            require(false, \\\"UnsupportedToken()\\\");\\n            // #endif\\n        }\\n\\n        // See note in deposit.\\n        _checkLoss(token);\\n\\n        _poke(owner);\\n\\n        uint256 amount = _convertSharesToYieldTokens(token, shares);\\n\\n        _burnShares(owner, token, shares);\\n        _sync(token, amount, _usub);\\n\\n        _validate(owner);\\n\\n        _decreaseWithdrawAllowance(owner, msg.sender, amount);\\n\\n        _unwrap(token, amount, recipient, data);\\n\\n        emit Withdraw(msg.sender, token, shares, recipient);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2Actions\\n    function mint(uint256 amount, address recipient) external override lock {\\n        onlyWhitelisted();\\n        _checkMintingLimit(amount);\\n\\n        _poke(msg.sender);\\n        _updateDebt(msg.sender, SafeCast.toInt256(amount), _sadd);\\n        _validate(msg.sender);\\n\\n        _mintingLimiter.decrease(amount);\\n\\n        TokenUtils.safeMint(debtToken, recipient, amount);\\n\\n        emit Mint(msg.sender, amount, recipient);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2Actions\\n    function mintFrom(address owner, uint256 amount, address recipient) external override lock {\\n        onlyWhitelisted();\\n        _poke(owner);\\n        _updateDebt(owner, SafeCast.toInt256(amount), _sadd);\\n        _validate(owner);\\n\\n        _decreaseMintAllowance(owner, msg.sender, amount);\\n\\n        TokenUtils.safeMint(debtToken, recipient, amount);\\n\\n        emit Mint(owner, amount, recipient);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2Permit\\n    function permitMint(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public override {\\n        onlyWhitelisted();\\n        if (block.timestamp > deadline) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert SignatureDeadlineExceeded();\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR(),\\n                keccak256(abi.encode(PERMIT_MINT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n\\n        address recovered = ecrecover(digest, v, r, s);\\n        if (owner != recovered) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert InvalidSignature();\\n            // #else\\n            require(false, \\\"InvalidSignature()\\\");\\n            // #endif\\n        }\\n\\n        _approveMint(owner, spender, value);\\n    }\\n\\n    function permitWithdraw(\\n        address owner,\\n        address withdrawer,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public override {\\n        onlyWhitelisted();\\n        if (block.timestamp > deadline) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert SignatureDeadlineExceeded();\\n            // #else\\n            require(false, \\\"SignatureDeadlineExceeded()\\\");\\n            // #endif\\n        }\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR(),\\n                keccak256(abi.encode(PERMIT_WITHDRAW_TYPEHASH, owner, withdrawer, value, nonces[owner]++, deadline))\\n            )\\n        );\\n\\n        address recovered = ecrecover(digest, v, r, s);\\n        if (owner != recovered) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert InvalidSignature();\\n            // #else\\n            require(false, \\\"InvalidSignature()\\\");\\n            // #endif\\n        }\\n\\n        _approveWithdraw(owner, withdrawer, value);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2Actions\\n    function burn(uint256 amount, address recipient) external override lock {\\n        onlyWhitelisted();\\n        _poke(recipient);\\n        _updateDebt(recipient, SafeCast.toInt256(amount), _ssub);\\n\\n        TokenUtils.safeBurnFrom(debtToken, msg.sender, amount);\\n\\n        AlchemicTokenV2(debtToken).lowerHasMinted(amount);\\n\\n        emit Burn(msg.sender, amount, recipient);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2Actions\\n    function repay(address underlyingToken, uint256 amount, address recipient) external override lock {\\n        onlyWhitelisted();\\n        if (!_supportedUnderlyingTokens.contains(underlyingToken)) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert UnsupportedToken(underlyingToken);\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        if (!_underlyingTokens[underlyingToken].enabled) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert TokenDisabled(underlyingToken);\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        uint256 repayLimit = _underlyingTokens[underlyingToken].repayLimiter.get();\\n        if (amount > repayLimit) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert RepayLimitExceeded(underlyingToken, amount, repayLimit);\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        _poke(recipient);\\n        _updateDebt(recipient, SafeCast.toInt256(_normalizeUnderlying(underlyingToken, amount)), _ssub);\\n        _underlyingTokens[underlyingToken].repayLimiter.decrease(amount);\\n\\n        TokenUtils.safeTransferFrom(underlyingToken, msg.sender, transmuter, amount);\\n\\n        IERC20TokenReceiver(transmuter).onERC20Received(underlyingToken, amount);\\n\\n        if (_accounts[recipient].debt < 0) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert IllegalState(\\\"Debt overpaid\\\");\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        emit Repay(msg.sender, underlyingToken, amount, recipient);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2Actions\\n    function liquidate(address yieldToken, uint256 shares, bytes memory params) external override lock {\\n        onlyWhitelisted();\\n        if (!_supportedYieldTokens.contains(yieldToken)) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert UnsupportedToken(yieldToken);\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        address underlyingToken = _yieldTokens[yieldToken].underlyingToken;\\n\\n        _checkEnabled(yieldToken);\\n        _checkLoss(yieldToken);\\n\\n        uint256 amountYield = _convertSharesToYieldTokens(yieldToken, shares);\\n        uint256 amountUnderlying = _unwrap(yieldToken, amountYield, address(this), params);\\n\\n        uint256 liquidationLimit = _underlyingTokens[underlyingToken].liquidationLimiter.get();\\n        if (amountUnderlying > liquidationLimit) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert LiquidationLimitExceeded(underlyingToken, amountUnderlying, liquidationLimit);\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        // Enter the critical section where modifications will occur. After this point, external calls should\\n        // be limited solely to read only functions so that external contracts cannot mutate state. This then\\n        // assures that repeated calls to any read only function will return the same result when called repeatedly.\\n        //\\n        // For liquidations a validation check is not required since it is asserted that the debt will always be decreased.\\n        _poke(msg.sender, yieldToken);\\n\\n        _burnShares(msg.sender, yieldToken, shares);\\n        _updateDebt(\\n            msg.sender,\\n            SafeCast.toInt256(_normalizeUnderlying(_yieldTokens[yieldToken].underlyingToken, amountUnderlying)),\\n            _ssub\\n        );\\n        _underlyingTokens[underlyingToken].liquidationLimiter.decrease(amountUnderlying);\\n        _sync(yieldToken, amountYield, _usub);\\n\\n        // Exit out of the critical section. Beyond this point, the state is committed and unsafe external calls can occur.\\n\\n        TokenUtils.safeTransfer(underlyingToken, transmuter, amountUnderlying);\\n\\n        IERC20TokenReceiver(transmuter).onERC20Received(underlyingToken, amountUnderlying);\\n\\n        emit Liquidate(msg.sender, yieldToken, shares);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2Actions\\n    function donate(address yieldToken, uint256 amount) external override lock {\\n        onlyWhitelisted();\\n        _poke(msg.sender);\\n\\n        _yieldTokens[yieldToken].accruedWeight += amount * 1e18 / (_yieldTokens[yieldToken].totalShares - _accounts[msg.sender].balances[yieldToken]);\\n        _accounts[msg.sender].lastAccruedWeights[yieldToken] = _yieldTokens[yieldToken].accruedWeight;\\n\\n        TokenUtils.safeBurnFrom(debtToken, msg.sender, amount);\\n\\n        emit Donate(msg.sender, yieldToken, amount);\\n    }\\n\\n    /// @inheritdoc IAlchemistV2Actions\\n    function harvest(address yieldToken, bytes memory params) external override lock onlyKeeper {\\n        uint256 currentValue  = _convertYieldTokensToUnderlying(yieldToken, _yieldTokens[yieldToken].balance);\\n        uint256 expectedValue = _yieldTokens[yieldToken].expectedValue;\\n        if (currentValue <= expectedValue) {\\n            return;\\n        }\\n\\n        uint256 harvestable = _convertUnderlyingTokensToYield(yieldToken, currentValue - expectedValue);\\n        if (harvestable == 0) {\\n            return;\\n        }\\n\\n        address underlyingToken = _yieldTokens[yieldToken].underlyingToken;\\n        uint256 unwrapped = _unwrap(yieldToken, harvestable, address(this), params);\\n\\n        uint256 fee = unwrapped * protocolFee / MAX_BPS;\\n        uint256 distributeAmt = unwrapped - fee;\\n        uint256 normDistributeAmt = _normalizeUnderlying(underlyingToken, distributeAmt);\\n\\n        _distribute(yieldToken, normDistributeAmt);\\n        _yieldTokens[yieldToken].balance -= harvestable;\\n\\n        TokenUtils.safeTransfer(underlyingToken, protocolFeeReceiver, fee);\\n        TokenUtils.safeTransfer(underlyingToken, transmuter, distributeAmt);\\n\\n        IERC20TokenReceiver(transmuter).onERC20Received(underlyingToken, distributeAmt);\\n\\n        emit Harvest(yieldToken, params);\\n    }\\n\\n    /// @dev Checks if a yield-token and its underlying-token are both enabled.\\n    ///\\n    /// @notice Reverts if either the yield-token or its underlying-token are disabled.\\n    ///\\n    /// @param yieldToken The yield-token to check.\\n    function _checkEnabled(address yieldToken) internal view {\\n        if (!_yieldTokens[yieldToken].enabled) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert TokenDisabled(yieldToken);\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        address underlyingToken = _yieldTokens[yieldToken].underlyingToken;\\n        if (!_underlyingTokens[underlyingToken].enabled) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert TokenDisabled(underlyingToken);\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n    }\\n\\n    /// @dev Checks if an amount can be minted.\\n    ///\\n    /// @notice Reverts if minting `amount` would breach the minting limit.\\n    ///\\n    /// @param amount The amount to check.\\n    function _checkMintingLimit(uint256 amount) internal view {\\n        uint256 limit = _mintingLimiter.get();\\n        if (amount > limit) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert MintingLimitExceeded(amount, limit);\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n    }\\n\\n    /// @dev Checks if there has been a loss of value in a yield-token.\\n    ///\\n    /// @param yieldToken The yield-token to check.\\n    function _checkLoss(address yieldToken) internal view {\\n        uint256 loss = _loss(yieldToken);\\n        uint256 maximumLoss = _yieldTokens[yieldToken].maximumLoss;\\n        if (loss > maximumLoss) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert LossExceeded(yieldToken, loss, maximumLoss);\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n    }\\n\\n    /// @dev Sync the state of the yield-token in the Alchemist.\\n    ///\\n    /// @param yieldToken The yield-token to sync.\\n    /// @param delta The marginal amount of yield-tokens to add or subtract from the Alchemist's balance.\\n    /// @param op    The mathematical operation to peform as part of the sync (ex. add(balance, delta)).\\n    function _sync(\\n        address yieldToken,\\n        uint256 delta,\\n        function(uint256, uint256) internal pure returns (uint256) op\\n    ) internal {\\n        uint256 currentBalance = _yieldTokens[yieldToken].balance;\\n        uint256 currentExpectedValue = _yieldTokens[yieldToken].expectedValue;\\n        uint256 deltaValue = _convertYieldTokensToUnderlying(yieldToken, delta);\\n        uint256 newExpectedValue = op(currentExpectedValue, deltaValue);\\n        _yieldTokens[yieldToken].balance = op(currentBalance, delta);\\n        _yieldTokens[yieldToken].expectedValue = newExpectedValue;\\n\\n        uint256 maximumExpectedValue = _yieldTokens[yieldToken].maximumExpectedValue;\\n        if (newExpectedValue > maximumExpectedValue) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert ExpectedValueExceeded(yieldToken, delta, _yieldTokens[yieldToken].maximumExpectedValue);\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n    }\\n\\n    /// @dev Calculates the amount of loss that a yield-token has suffered.\\n    ///\\n    /// @notice A yield-token could experience a loss by being exploited and having underlying-tokens stolen.\\n    ///\\n    /// @param yieldToken The yield-token to check.\\n    ///\\n    /// @return The total loss experienced by the yield-token, in units of underlying-token.\\n    function _loss(address yieldToken) internal view returns (uint256) {\\n        uint256 currentValue = _convertYieldTokensToUnderlying(yieldToken, _yieldTokens[yieldToken].balance);\\n        uint256 expectedValue = _yieldTokens[yieldToken].expectedValue;\\n        return expectedValue > currentValue ? (expectedValue - currentValue) * 1e4 / currentValue : 0;\\n    }\\n\\n    /// @dev Gives credit / yield to the CDPs holding a given yield-token in the Alchemist.\\n    ///\\n    /// @param yieldToken  The target yield-token.\\n    /// @param amount The amount of underlying-token to distribute as credit / yield.\\n    function _distribute(address yieldToken, uint256 amount) internal {\\n        _yieldTokens[yieldToken].accruedWeight += amount * 1e18 / _yieldTokens[yieldToken].totalShares;\\n    }\\n\\n    /// @dev Deposits an underlying-token into a yield-token.\\n    ///\\n    /// @param yieldToken  The target yield-token.\\n    /// @param amount The amount of underlying-token to deposit.\\n    /// @param data   A packet of bytes sent to the `wrap` function of the yield-token-adapter.  The format of these bytes is dependent on the `deposit` function (or similar) of the target yield-token.\\n    ///\\n    /// @return The amount of yield-tokens received.\\n    function _wrap(address yieldToken, uint256 amount, bytes memory data) internal returns (uint256) {\\n        ITokenAdapter adapter = ITokenAdapter(_yieldTokens[yieldToken].adapter);\\n        address underlyingToken = _yieldTokens[yieldToken].underlyingToken;\\n        TokenUtils.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\\n        return adapter.wrap(amount, address(this), data);\\n    }\\n\\n    /// @dev Deposits an underlying-token into a yield-token.\\n    ///\\n    /// @param yieldToken        The target yield-token.\\n    /// @param amount       The amount of underlying-token to deposit.\\n    /// @param recipient    The account to receive the resulting underlying-tokens.\\n    /// @param data         A packet of bytes sent to the `unwrap` function of the yield-token-adapter.  The format of these bytes is dependent on the `withdraw` function (or similar) of the target yield-token.\\n    ///\\n    /// @return The amount of underlying-tokens received.\\n    function _unwrap(address yieldToken, uint256 amount, address recipient, bytes memory data) internal returns (uint256) {\\n        ITokenAdapter adapter = ITokenAdapter(_yieldTokens[yieldToken].adapter);\\n        return adapter.unwrap(amount, recipient, data);\\n    }\\n\\n    /// @dev Updates an account.\\n    ///\\n    /// @param owner the address that owns the account to update.\\n    function _poke(address owner) internal {\\n        Sets.AddressSet storage depositedTokens = _accounts[owner].depositedTokens;\\n        for (uint256 i = 0; i < depositedTokens.values.length; i++) {\\n            _poke(owner, depositedTokens.values[i]);\\n        }\\n    }\\n\\n    /// @dev Updates an account.\\n    ///\\n    /// @param owner the address that owns the account.\\n    /// @param yieldToken the address of the yield-token to update.\\n    function _poke(address owner, address yieldToken) internal {\\n        uint256 currentAccruedWeight = _yieldTokens[yieldToken].accruedWeight;\\n        uint256 lastAccruedWeight = _accounts[owner].lastAccruedWeights[yieldToken];\\n\\n        if (currentAccruedWeight == lastAccruedWeight) {\\n            return;\\n        }\\n\\n        uint256 balance = _accounts[owner].balances[yieldToken];\\n        uint256 unrealizedCredit = (currentAccruedWeight - lastAccruedWeight) * balance / 1e18;\\n\\n        _accounts[owner].debt -= SafeCast.toInt256(unrealizedCredit);\\n        _accounts[owner].lastAccruedWeights[yieldToken] = currentAccruedWeight;\\n    }\\n\\n    /// @dev Update the debt of a target CDP.\\n    ///\\n    /// @param owner     The owner of the CDP.\\n    /// @param delta     The amount to add to or subract from the current debt.\\n    /// @param operation The mathematical operaiont (add/subtract) to perform for the update.\\n    function _updateDebt(\\n        address owner,\\n        int256 delta,\\n        function(int256, int256) internal pure returns (int256) operation\\n    ) internal {\\n        Account storage account = _accounts[owner];\\n        account.debt = operation(account.debt, delta);\\n    }\\n\\n    /// @dev Set the mintAllowance for a given spender on a CDP.\\n    ///\\n    /// @param owner   The owner of the CDP.\\n    /// @param spender The account that will be allowed to mint debt from the CDP.\\n    /// @param amount  The amount of debt that the spender will be allowed to mint.\\n    function _approveMint(address owner, address spender, uint256 amount) internal {\\n        Account storage account = _accounts[owner];\\n        account.mintAllowances[spender] = amount;\\n        emit ApproveMint(owner, spender, amount);\\n    }\\n\\n    /// @dev Decrease the mintAllowance for a given spender on a CDP.\\n    ///\\n    /// @param owner   The owner of the CDP.\\n    /// @param spender The account that will be allowed to mint debt from the CDP.\\n    /// @param delta   The amount that the spender's allowance will be reduced.\\n    function _decreaseMintAllowance(\\n        address owner,\\n        address spender,\\n        uint256 delta\\n    ) internal {\\n        Account storage account = _accounts[owner];\\n        account.mintAllowances[spender] -= delta;\\n    }\\n\\n    /// @dev Set the withdrawAllowance for a given spender on a CDP.\\n    ///\\n    /// @param owner   The owner of the CDP.\\n    /// @param withdrawer The account that will be allowed to withdraw collateral from the CDP.\\n    /// @param amount  The amount of collateral that the withdrawer will be allowed to withdraw.\\n    function _approveWithdraw(address owner, address withdrawer, uint256 amount) internal {\\n        Account storage account = _accounts[owner];\\n        account.withdrawAllowances[withdrawer] = amount;\\n        emit ApproveWithdraw(owner, withdrawer, amount);\\n    }\\n\\n    /// @dev Decrease the mintAllowance for a given spender on a CDP.\\n    ///\\n    /// @param owner   The owner of the CDP.\\n    /// @param withdrawer The account that will be allowed to mint debt from the CDP.\\n    /// @param delta   The amount that the spender's allowance will be reduced.\\n    function _decreaseWithdrawAllowance(\\n        address owner,\\n        address withdrawer,\\n        uint256 delta\\n    ) internal {\\n        Account storage account = _accounts[owner];\\n        account.withdrawAllowances[withdrawer] -= delta;\\n    }\\n\\n    /// @dev Check that a target CDP has a health collateralization ratio.\\n    ///\\n    /// @notice Reverts if the collateralization ratio is unhealthy.\\n    ///\\n    /// @param owner The owner of the CDP.\\n    function _validate(address owner) internal view {\\n        int256 debt = _accounts[owner].debt;\\n        if (debt <= 0) {\\n            return;\\n        }\\n\\n        uint256 totalValue = _totalValue(owner) ;\\n        uint256 collateralization = totalValue * 1e18 / uint256(debt);\\n\\n        if (collateralization < minimumCollateralization) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert Undercollateralized();\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n    }\\n\\n    /// @dev Gets the total value of a target CDP.\\n    ///\\n    /// @param owner The owner of the CDP.\\n    ///\\n    /// @return The total number of underlying-tokens from all the yield-tokens held by the CDP.\\n    function _totalValue(address owner) internal view returns (uint256) {\\n        uint256 totalValue = 0;\\n        Sets.AddressSet storage activeTokens = _accounts[owner].depositedTokens;\\n        for (uint256 i = 0; i < activeTokens.values.length; i++) {\\n            address yieldToken = activeTokens.values[i];\\n            address underlyingToken = _yieldTokens[yieldToken].underlyingToken;\\n            uint256 value = _convertSharesToUnderlyingTokens(yieldToken, _accounts[owner].balances[yieldToken]);\\n            uint256 normalized = _normalizeUnderlying(underlyingToken, value);\\n            totalValue += normalized;\\n        }\\n        return totalValue;\\n    }\\n\\n    /// @dev Issues proporitonal shares to a CDP for an amount of yield-tokens.\\n    ///\\n    /// @param owner  The owner of the CDP.\\n    /// @param yieldToken  The yield-token used to issue shares.\\n    /// @param amount The amount of yield-tokens that are being used to issue shares.\\n    ///\\n    /// @return The amount of shares issued.\\n    function _issueSharesForAmount(address owner, address yieldToken, uint256 amount) internal returns (uint256) {\\n        uint256 shares = _convertYieldTokensToShares(yieldToken, amount);\\n\\n        assert(shares > 0);\\n\\n        if (_accounts[owner].balances[yieldToken] == 0) {\\n            _accounts[owner].depositedTokens.add(yieldToken);\\n        }\\n\\n        _accounts[owner].balances[yieldToken] += shares;\\n        _yieldTokens[yieldToken].totalShares += shares;\\n\\n        return shares;\\n    }\\n\\n    /// @dev Burns shares in a CDP.\\n    ///\\n    /// @param owner  The owner of the CDP.\\n    /// @param yieldToken  The yield-token used to issue the shares.\\n    /// @param shares The amount of shares to be burned.\\n    function _burnShares(address owner, address yieldToken, uint256 shares) internal {\\n        _accounts[owner].balances[yieldToken] -= shares;\\n        _yieldTokens[yieldToken].totalShares -= shares;\\n\\n        if (_accounts[owner].balances[yieldToken] == 0) {\\n            _accounts[owner].depositedTokens.remove(yieldToken);\\n        }\\n    }\\n\\n    /// @dev Converts a given amount of yield-tokens into shares.\\n    ///\\n    /// @param yieldToken  The target yield-token.\\n    /// @param amount The amount of target yield-token.\\n    ///\\n    /// @return The number of shares represented by the given amount of yield-token.\\n    function _convertYieldTokensToShares(address yieldToken, uint256 amount) internal view returns (uint256) {\\n        if (_yieldTokens[yieldToken].totalShares == 0) {\\n            return amount;\\n        }\\n        return amount * _yieldTokens[yieldToken].totalShares / _yieldTokens[yieldToken].balance;\\n    }\\n\\n    /// @dev Converts a given amount of shares into yield-tokens.\\n    ///\\n    /// @param yieldToken  The target yield-token.\\n    /// @param shares The amount of yield-token shares.\\n    ///\\n    /// @return The number of yield-tokens represented by the given amount of shares.\\n    function _convertSharesToYieldTokens(address yieldToken, uint256 shares) internal view returns (uint256) {\\n        uint256 totalShares = _yieldTokens[yieldToken].totalShares;\\n        if (totalShares == 0) {\\n            return shares;\\n        }\\n        return shares * _yieldTokens[yieldToken].balance / totalShares;\\n    }\\n\\n    /// @dev Converts a given amount of shares into underlying-tokens.\\n    ///\\n    /// @param yieldToken  The target yield-token.\\n    /// @param shares The amount of yield-token shares.\\n    ///\\n    /// @return The number of underlying-tokens represented by the given amount of shares.\\n    function _convertSharesToUnderlyingTokens(address yieldToken, uint256 shares) internal view returns (uint256) {\\n        uint256 amount = _convertSharesToYieldTokens(yieldToken, shares);\\n        return _convertYieldTokensToUnderlying(yieldToken, amount);\\n    }\\n\\n    /// @dev Converts a given amount of yield-tokens into underlying-tokens.\\n    ///\\n    /// @param yieldToken  The target yield-token.\\n    /// @param amount The amount of yield-tokens.\\n    ///\\n    /// @return The number of underlying-tokens represented by the given amount of yield-tokens.\\n    function _convertYieldTokensToUnderlying(address yieldToken, uint256 amount) internal view returns (uint256) {\\n        uint256 price = ITokenAdapter(_yieldTokens[yieldToken].adapter).price();\\n        return amount * price / 10** _yieldTokens[yieldToken].decimals;\\n    }\\n\\n    /// @dev Converts a given amount of underlying-tokens into yield-tokens.\\n    ///\\n    /// @param yieldToken  The target yield-token.\\n    /// @param amount The amount of underlying-tokens (redeemable for yield-token).\\n    ///\\n    /// @return The number of yield-tokens represented by the given amount of underlying-tokens.\\n    function _convertUnderlyingTokensToYield(address yieldToken, uint256 amount) internal view returns (uint256) {\\n        uint256 price = ITokenAdapter(_yieldTokens[yieldToken].adapter).price();\\n        return amount * 10** _yieldTokens[yieldToken].decimals / price;\\n    }\\n\\n    /// @dev Normalize the number of decimals representing a given amount.\\n    ///\\n    /// @param underlyingToken  The target yield-token.\\n    /// @param amount The amount of the target yield-token.\\n    ///\\n    /// @return A decimal-normalized version of `amount`, for use in calculations with other normalized yield-token amounts.\\n    function _normalizeUnderlying(address underlyingToken, uint256 amount) internal view returns (uint256) {\\n        return amount * _underlyingTokens[underlyingToken].conversionFactor;\\n    }\\n\\n    /// @dev Adds two unsigned 256 bit integers together and returns the result.\\n    ///\\n    /// @dev This operation is checked and will fail if the result overflows.\\n    ///\\n    /// @param x the first operand.\\n    /// @param y the second operand.\\n    ///\\n    /// @return z the result.\\n    function _uadd(uint256 x, uint256 y) internal pure returns (uint256 z) { z = x + y; }\\n\\n    /// @dev Subtracts two unsigned 256 bit integers together and returns the result.\\n    ///\\n    /// @dev This operation is checked and will fail if the result overflows.\\n    ///\\n    /// @param x the first operand.\\n    /// @param y the second operand.\\n    ///\\n    /// @return z the result.\\n    function _usub(uint256 x, uint256 y) internal pure returns (uint256 z) { z = x - y; }\\n\\n    /// @dev Adds two signed 256 bit integers together and returns the result.\\n    ///\\n    /// @dev This operation is checked and will fail if the result overflows.\\n    ///\\n    /// @param x the first operand.\\n    /// @param y the second operand.\\n    ///\\n    /// @return z the result.\\n    function _sadd(int256 x, int256 y) internal pure returns (int256 z) { z = x + y; }\\n\\n    /// @dev Subtracts two signed 256 bit integers together and returns the result.\\n    ///\\n    /// @dev This operation is checked and will fail if the result overflows.\\n    ///\\n    /// @param x the first operand.\\n    /// @param y the second operand.\\n    ///\\n    /// @return z the result.\\n    function _ssub(int256 x, int256 y) internal pure returns (int256 z) { z = x - y; }\\n}\",\"keccak256\":\"0x3ff8327e42e06379fe6d77a9357ccd3c0dbd1094ef45848e33396cb0711cd97f\"},\"contracts/ContractWhitelister.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n\\nabstract contract ContractWhitelister {\\n    // #if !(DISABLE_CUSTOM_ERRORS)\\n    /// @dev Thrown when a non-whitelisted contract attempts to access a whitelist-only function.\\n    error NotWhitelisted();\\n    /// @dev Thrown when anyone but a whitelist admin tries to call an admin function.\\n    error UnauthorizedER();\\n    // #endif\\n\\n    /// @dev Emitted when a contract is added to the whitelist.\\n    ///\\n    /// @param account The account that was added to the whitelist.\\n    event AccountAdded(address account);\\n\\n    /// @dev Emitted when a contract is removed from the whitelist.\\n    ///\\n    /// @param account The account that was removed from the whitelist.\\n    event AccountRemoved(address account);\\n\\n    /// @dev Emitted when the whitelist is activated.\\n    event WhitelistEnabled();\\n\\n    /// @dev Emitted when the whitelist is deactivated.\\n    event WhitelistDisabled();\\n\\n    /// @dev Turns whitelist gate on or off.\\n    bool public whitelistActive;\\n\\n    /// @dev A mapping of whitelisted contracts.\\n    mapping(address => bool) public whitelist;\\n\\n    /// @dev When whitelist is active, only allow calls from whitelisted contracts to pass.\\n    function onlyWhitelisted() internal {\\n        if (whitelistActive && msg.sender != tx.origin && !whitelist[msg.sender]) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert NotWhitelisted();\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n    }\\n\\n    function onlyAdmin() internal virtual {\\n        require(false, \\\"override onlyAdmin modifier\\\");\\n    }\\n\\n    /// @dev Adds an contract to the whitelist.\\n    ///\\n    /// @param account the contract to add to the whitelist.\\n    function addToWhitelist(address account) external {\\n        onlyAdmin();\\n        whitelist[account] = true;\\n        emit AccountAdded(account);\\n    }\\n\\n    /// @dev Adds an contract to the whitelist.\\n    ///\\n    /// @param account the contract to remove from the whitelist.\\n    function removeFromWhitelist(address account) external {\\n        onlyAdmin();\\n        whitelist[account] = false;\\n        emit AccountRemoved(account);\\n    }\\n\\n    /// @dev Activates the whitelist.\\n    ///\\n    function enableWhitelist() external {\\n        onlyAdmin();\\n        whitelistActive = true;\\n        emit WhitelistEnabled();\\n    }\\n\\n    /// @dev De-activates the whitelist.\\n    ///\\n    function disableWhitelist() external {\\n        onlyAdmin();\\n        whitelistActive = false;\\n        emit WhitelistDisabled();\\n    }\\n}\",\"keccak256\":\"0x10d325fd135e10ad6561ce98be336b64b4f7115feb325376a03bc4a026ff2c58\"},\"contracts/base/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.9;\\n\\nimport \\\"../interfaces/IMulticall.sol\\\";\\n\\n/// @title Multicall\\n/// @author Uniswap Labs\\n/// @notice Enables calling multiple methods in a single call to the contract\\nabstract contract Multicall is IMulticall {\\n    /// @inheritdoc IMulticall\\n    function multicall(bytes[] calldata data) external payable override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\",\"keccak256\":\"0x930cf24d0beee0eeee470397eea3ef2dcb7ec8ae47ecf8d6310d476c59169e28\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/Mutex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.9;\\n\\n/// @title  Mutex\\n/// @author Alchemix Finance\\n///\\n/// @notice Provides a mutual exclusion lock for implementing contracts.\\nabstract contract Mutex {\\n    /// @notice An error which is thrown when a lock is attempted to be claimed before it has been freed.\\n    // #if !(DISABLE_CUSTOM_ERRORS)\\n    error LockAlreadyClaimed();\\n    // #endif\\n\\n    /// @notice The lock state. Non-zero values indicate the lock has been claimed.\\n    uint256 private _lockState;\\n\\n    /// @dev A modifier which acquires the mutex.\\n    modifier lock() {\\n        _claimLock();\\n\\n        _;\\n\\n        _freeLock();\\n    }\\n\\n    /// @dev Gets if the mutex is locked.\\n    ///\\n    /// @return if the mutex is locked.\\n    function _isLocked() internal returns (bool) {\\n        return _lockState == 1;\\n    }\\n\\n    /// @dev Claims the lock. If the lock is already claimed, then this will revert.\\n    function _claimLock() internal {\\n        // Check that the lock has not been claimed yet.\\n        if (_lockState != 0) {\\n            // #if !(DISABLE_CUSTOM_ERRORS)\\n            revert LockAlreadyClaimed();\\n            // #else\\n            require(false);\\n            // #endif\\n        }\\n\\n        // Claim the lock.\\n        _lockState = 1;\\n    }\\n\\n    /// @dev Frees the lock.\\n    function _freeLock() internal {\\n        _lockState = 0;\\n    }\\n}\",\"keccak256\":\"0x250cb46f1c68975bf349968cb891b4520f3fecb7bd4f7c69a7af56a79258fa76\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IAlchemistV2.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport \\\"./alchemist/IAlchemistV2Actions.sol\\\";\\nimport \\\"./alchemist/IAlchemistV2AdminActions.sol\\\";\\nimport \\\"./alchemist/IAlchemistV2Errors.sol\\\";\\nimport \\\"./alchemist/IAlchemistV2Immutables.sol\\\";\\nimport \\\"./alchemist/IAlchemistV2Events.sol\\\";\\nimport \\\"./alchemist/IAlchemistV2Permit.sol\\\";\\nimport \\\"./alchemist/IAlchemistV2State.sol\\\";\\n\\n/// @title  IAlchemistV2\\n/// @author Alchemix Finance\\ninterface IAlchemistV2 is\\n    IAlchemistV2Actions,\\n    IAlchemistV2AdminActions,\\n    IAlchemistV2Errors,\\n    IAlchemistV2Immutables,\\n    IAlchemistV2Events,\\n    IAlchemistV2Permit,\\n    IAlchemistV2State\\n{ }\",\"keccak256\":\"0xccf676c0122ab9d4d613846c0490371fc34da60a402f8c589d526204d43a5b26\"},\"contracts/interfaces/IDetailedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDetailedERC20 is IERC20 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xb2e28c1335f002a40ab696d0692b9a8393484d0504e3d2751e606b776c9f0833\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20Extensions.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\ninterface IERC20Extensions {\\n    /// @notice TODO\\n    ///\\n    /// @param recipient TODO\\n    /// @param amount   TODO\\n    ///\\n    /// @return TODO\\n    function mint(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice TODO\\n    ///\\n    /// @param owner  TODO\\n    /// @param amount TODO\\n    ///\\n    /// @return TODO\\n    function burnFrom(address owner, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0x19d11cebc42daf4caaf0e322651953d9d08f123f5b925baa52848c4c12cb0b9c\"},\"contracts/interfaces/IERC20Meta.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\ninterface IERC20Meta {\\n    /// @notice TODO\\n    ///\\n    /// @return TODO\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x9d69b9af3b60cb1e499acf733d9cf074e973767c58850f88e58dd84b43975ec4\"},\"contracts/interfaces/IERC20Minimal.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\ninterface IERC20Minimal {\\n    /// @notice TODO\\n    ///\\n    /// @param owner     TODO\\n    /// @param recipient TODO\\n    /// @param amount    TODO\\n    event Transfer(address indexed owner, address indexed recipient, uint256 amount);\\n\\n    /// @notice TODO\\n    ///\\n    /// @param owner   TODO\\n    /// @param spender TODO\\n    /// @param amount  TODO\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /// @notice TODO\\n    ///\\n    /// @return TODo\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice TODO\\n    ///\\n    /// @param account TODO\\n    ///\\n    /// @return TODO\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice TODO\\n    ///\\n    /// @param owner   TODO\\n    /// @param spender TODO\\n    ///\\n    /// @return TODo\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice TODO\\n    ///\\n    /// @param recipient TODO\\n    /// @param amount    TODO\\n    ///\\n    /// @return TODO\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice TODO\\n    ///\\n    /// @param spender TODO\\n    /// @param amount  TODO\\n    ///\\n    /// @return TODO\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice TODO\\n    ///\\n    /// @param owner     TODO\\n    /// @param recipient TODO\\n    /// @param amount    TODO\\n    ///\\n    /// @return TODO\\n    function transferFrom(address owner, address recipient, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0xe5a4d7bf51270be732a31fd1223438d5fe7762904c1ec6ec1018d9d313f147ec\"},\"contracts/interfaces/IERC20TokenReceiver.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\ninterface IERC20TokenReceiver {\\n    /// @notice Hook to be called on a target IERC20TokenReceiver when funds are sent to that address.\\n    ///\\n    /// @param token The token that was sent.\\n    /// @param value The amount of the token that was sent.\\n    function onERC20Received(address token, uint256 value) external;\\n}\",\"keccak256\":\"0xbb084e5c437c6212161d53356a9e6747119aa2450686aceb47421588f4b7163f\"},\"contracts/interfaces/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashBorrower {\\n  /**\\n   * @dev Receive a flash loan.\\n   * @param initiator The initiator of the loan.\\n   * @param token The loan currency.\\n   * @param amount The amount of tokens lent.\\n   * @param fee The additional amount of tokens to repay.\\n   * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n   * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n   */\\n  function onFlashLoan(\\n    address initiator,\\n    address token,\\n    uint256 amount,\\n    uint256 fee,\\n    bytes calldata data\\n  ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9f928cc8707abdbf04339dc4833fc9acea0010d97f47362ebff335e2de77621f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC3156 FlashLender, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashLender {\\n  /**\\n   * @dev The amount of currency available to be lended.\\n   * @param token The loan currency.\\n   * @return The amount of `token` that can be borrowed.\\n   */\\n  function maxFlashLoan(address token) external view returns (uint256);\\n\\n  /**\\n   * @dev The fee to be charged for a given loan.\\n   * @param token The loan currency.\\n   * @param amount The amount of tokens lent.\\n   * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n   */\\n  function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n  /**\\n   * @dev Initiate a flash loan.\\n   * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n   * @param token The loan currency.\\n   * @param amount The amount of tokens lent.\\n   * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n   */\\n  function flashLoan(\\n    IERC3156FlashBorrower receiver,\\n    address token,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x6d06400e35c0b154dfb086992389c777f46ce8ba88941839f5d3b8917b2a1766\",\"license\":\"MIT\"},\"contracts/interfaces/IMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Multicall interface\\n/// @author Uniswap Labs\\n/// @notice Enables calling multiple methods in a single call to the contract\\ninterface IMulticall {\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n}\",\"keccak256\":\"0x84a0df8570f274bb4cbcc93a591ac18bd7b3a72b1f5fbab1b40aa1eb5d815fe4\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ITokenAdapter.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/// @title  ITokenAdapter\\n/// @author Alchemix Finance\\ninterface ITokenAdapter {\\n    /// @notice Gets the address of the yield-token used by the adapter.\\n    ///\\n    /// @return The address of the yield-token.\\n    function token() external view returns (address);\\n\\n    /// @notice Gets the address of the underlying-token used by the adapter.\\n    ///\\n    /// @return The address of the underlying-token.\\n    function underlyingToken() external view returns (address);\\n\\n    /// @notice Gets the current price of yield-token in underlying-tokens.\\n    ///\\n    /// @return The price (yield-tokens per underlying-token).\\n    function price() external view returns (uint256);\\n\\n    /// @notice Deposits underlying-token into yield-token.\\n    ///\\n    /// @param amount    The amount of underlying-token to deposit.\\n    /// @param recipient The recipient of the resulting yield-tokens.\\n    /// @param data      A packet of bytes used by the adapter to complete the deposit action.  The format of these bytes is dependent on the `deposit` function (or similar) of the target yield-token.\\n    ///\\n    /// @return The amount of yield-token received.\\n    function wrap(uint256 amount, address recipient, bytes memory data) external returns (uint256);\\n\\n    /// @notice Withdraws underlying-token from yield-token.\\n    ///\\n    /// @param amount    The amount of yield-tokens to redeem.\\n    /// @param recipient The recipient of the resulting underlying-tokens.\\n    /// @param data      A packet of bytes used by the adapter to complete the withdraw action.  The format of these bytes is dependent on the `withdraw` function (or similar) of the target yield-token.\\n    ///\\n    /// @return The amount of underlying-token received.\\n    function unwrap(uint256 amount, address recipient, bytes memory data) external returns (uint256);\\n\\n    /// @notice Returns a default packet of bytes for use with the `wrap` function.\\n    ///\\n    /// @return A packet of bytes that can be used with the `wrap` function.\\n    function defaultWrapData() external returns (bytes memory);\\n\\n    /// @notice Returns a default packet of bytes for use with the `unwrap` function.\\n    ///\\n    /// @return A packet of bytes that can be used with the `unwrap` function.\\n    function defaultUnWrapData() external returns (bytes memory);\\n}\",\"keccak256\":\"0x90f5b9e8854027d15b740c4274ea92111dc2cc4f6d58368da3f76c80fd67e998\"},\"contracts/interfaces/alchemist/IAlchemistV2Actions.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/// @title  IAlchemistV2Actions\\n/// @author Alchemix Finance\\ninterface IAlchemistV2Actions {\\n    /// @notice Approve an address to mint debt from the CDP owned by msg.sender;\\n    ///\\n    /// This function is intented to be used as a way to delegate a user's credit to a third party,\\n    /// likely another lego.\\n    ///\\n    /// @param spender The address that will be approved to mint.\\n    /// @param amount  The amount of the approval.\\n    function approveMint(address spender, uint256 amount) external;\\n\\n    /// @notice Approve an address to withdraw collateral from the CDP owned by msg.sender;\\n    ///\\n    /// This function is intented to be used as a way to delegate a user's collatearl to a third party,\\n    /// likely another lego.\\n    ///\\n    /// @param withdrawer The address that will be approved to withdraw.\\n    /// @param amount  The amount of the approval.\\n    function approveWithdraw(address withdrawer, uint256 amount) external;\\n\\n    /// @notice Sync the weights of all yieldTokens in a user's CDP. \\n    ///\\n    /// @param owner The owner of the CDP.\\n    function poke(address owner) external;\\n\\n    /// @notice Deposit a yield-token into a user's CDP.\\n    ///\\n    /// @param yieldToken     The yield-token to deposit.\\n    /// @param amount    The amount of yield-tokens to deposit.\\n    /// @param recipient The owner of the CDP that will receive the resulting shares.\\n    function deposit(address yieldToken, uint256 amount, address recipient) external;\\n\\n    /// @notice Deposit an underlying-token into a user's CDP.\\n    ///\\n    /// @param yieldToken     The yield-token that accepts the target underlying-token.\\n    /// @param amount    The amount of the target underlying-token to deposit.\\n    /// @param recipient The owner of the CDP that will receive the resulting shares.\\n    /// @param data      A packet of bytes sent to the `wrap` function of the yield-token-adapter.  The format of these bytes is dependent on the `deposit` function (or similar) of the target yield-token.\\n    function depositUnderlying(address yieldToken, uint256 amount, address recipient, bytes memory data) external;\\n\\n    /// @notice Withdraw a yield-token from the CDP owned by msg.sender.\\n    ///\\n    /// @param yieldToken     The yield-token to withdraw.\\n    /// @param shares    The number of shares to withdraw.\\n    /// @param recipient The recipient of the yield-tokens that are withdrawn.\\n    function withdraw(address yieldToken, uint256 shares, address recipient) external;\\n\\n    /// @notice Withdraw a yield-token from the CDP owned by owner.\\n    ///\\n    /// @param owner     The owner of the CDP\\n    /// @param token     The yield-token to withdraw.\\n    /// @param shares    The number of shares to withdraw.\\n    /// @param recipient The recipient of the yield-tokens that are withdrawn.\\n    function withdrawFrom(address owner, address token, uint256 shares, address recipient) external;\\n\\n    /// @notice Withdraw an underlying-token from the CDP owned by msg.sender.\\n    ///\\n    /// @param yieldToken     The yield-token that can be redeemed for the target underlying-token.\\n    /// @param shares    The number of shares to withdraw.\\n    /// @param recipient The recipient of the underlying-tokens that are withdrawn.\\n    /// @param data      A packet of bytes sent to the `unwrap` function of the yield-token-adapter.  The format of these bytes is dependent on the `withdraw` function (or similar) of the target yield-token.\\n    function withdrawUnderlying(address yieldToken, uint256 shares, address recipient, bytes memory data) external;\\n\\n    /// @notice Withdraw an underlying-token from the CDP owned by owner.\\n    ///\\n    /// @param owner     The owner of hte CDP\\n    /// @param token     The yield-token that can be redeemed for the target underlying-token.\\n    /// @param shares    The number of shares to withdraw.\\n    /// @param recipient The recipient of the underlying-tokens that are withdrawn.\\n    /// @param data      A packet of bytes sent to the `unwrap` function of the yield-token-adapter.  The format of these bytes is dependent on the `withdraw` function (or similar) of the target yield-token.\\n    function withdrawUnderlyingFrom(address owner, address token, uint256 shares, address recipient, bytes memory data) external;\\n\\n    /// @notice Mint debt from the CDP owned by msg.sender.\\n    ///\\n    /// @param amount    The amount of debt-token to mint.\\n    /// @param recipient The recipient of the minted debt-token.\\n    function mint(uint256 amount, address recipient) external;\\n\\n    /// @notice Mint debt from the CDP owned by owner.\\n    ///\\n    /// @param owner     The owner of the CDP.\\n    /// @param amount    The amount of debt-token to mint.\\n    /// @param recipient The recipient of the minted debt-token.\\n    function mintFrom(address owner, uint256 amount, address recipient) external;\\n\\n    /// @notice Burn debt-token to pay back debt in the CDP owned by recipient.\\n    ///\\n    /// @param amount    The amount of debt-token to burn.\\n    /// @param recipient The recipient of the credit.\\n    function burn(uint256 amount, address recipient) external;\\n\\n    /// @notice Repay debt with an underlying-token.\\n    ///\\n    /// @param underlyingToken     The underlying-token used to repay.\\n    /// @param amount    The amount of underlying-token to send for debt repayment (also the amount of debt repaid).\\n    /// @param recipient The owner of the CDP that will receive the credit.\\n    function repay(address underlyingToken, uint256 amount, address recipient) external;\\n\\n    /// @notice Liquidate funds from the CDP owned by msg.sender.\\n    ///\\n    /// @param yieldToken  The yield-token to liquidate.\\n    /// @param shares The amount of shares to liquidate.\\n    /// @param params A packet of bytes sent to the `unwrap` function of the yield-token-adapter.  The format of these bytes is dependent on the `withdraw` function (or similar) of the target yield-token.\\n    function liquidate(address yieldToken, uint256 shares, bytes memory params) external;\\n\\n    /// @notice Donate credit weight to a target yield-token by burning debt-tokens.\\n    ///\\n    /// @param yieldToken  The target yield-token.\\n    /// @param amount The amount of debt-tokens to burn.\\n    function donate(address yieldToken, uint256 amount) external;\\n\\n    /// @notice Harvest any pending yield from the target yield-token.\\n    ///\\n    /// @param yieldToken  The target yield-token.\\n    /// @param params A packet of bytes sent to the `unwrap` function of the yield-token-adapter.  The format of these bytes is dependent on the `withdraw` function (or similar) of the target yield-token.\\n    function harvest(address yieldToken, bytes memory params) external;\\n}\",\"keccak256\":\"0x516351b33bd1fcb57e667234af35cb568f7171a29cf5cc17c691eb9987d04e9a\"},\"contracts/interfaces/alchemist/IAlchemistV2AdminActions.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport \\\"../ITokenAdapter.sol\\\";\\n\\n/// @title  IAlchemistV2AdminActions\\n/// @author Alchemix Finance\\ninterface IAlchemistV2AdminActions {\\n    /// @notice Configuration parameters for an underlying-token\\n    struct UnderlyingTokenConfig {\\n        uint256 repayLimitMaximum;          /// The maximum value for the repay LGF.\\n        uint256 repayLimitBlocks;           /// The number of recovery blocks for the repay LGF.\\n        uint256 liquidationLimitMaximum;    /// The maximum value for the liquidation LGF.\\n        uint256 liquidationLimitBlocks;     /// The number of recovery blocks for the liquidation LGF.\\n    }\\n\\n    /// @notice Parameters used to register a yield-token in the Alchemsit.\\n    struct YieldTokenConfig {\\n        address adapter;                /// The adapter used by the alchemist to interact with the yield-token's deposit/withraw functions.\\n        uint256 maximumLoss;            /// The maximum % loss in expected value that can occur before a yield-token is automatically disabled.\\n        uint256 maximumExpectedValue;   /// The maximum value (in underlying-tokens) of yield-tokens that the Alchemist can hold.\\n    }\\n\\n    /// @notice Sets the pending administrator.\\n    ///\\n    /// @dev This is the first step in the 2-step process of setting a new administrator. After this function is called,\\n    ///      the pending administrator will then need to call `acceptAdmin` to complete the process.\\n    ///\\n    /// @param value the address to set the pending admin to.\\n    function setPendingAdmin(address value) external;\\n\\n    /// @notice Accepts the role of administrator.\\n    ///\\n    /// @dev This is the second step in the 2-step process of setting a new administrator.\\n    function acceptAdmin() external;\\n\\n    /// @notice Add an underlying-token to the list of supported underlying-tokens.\\n    ///\\n    /// @param underlyingToken  The underlying-token to add.\\n    /// @param config A set of initial configuration parameters for the underlying-token.\\n    function addUnderlyingToken(address underlyingToken, UnderlyingTokenConfig calldata config) external;\\n\\n    /// @notice Add a yield-token to the list of supported yield-tokens.\\n    ///\\n    /// @param yieldToken  The yield-token to add.\\n    /// @param config A set of initial configuration parameters for the yield-token.\\n    function addYieldToken(address yieldToken, YieldTokenConfig calldata config) external;\\n\\n    /// @notice Enable an underlying-token.\\n    ///\\n    /// @param underlyingToken The underlying-token to enable.\\n    function enableUnderlyingToken(address underlyingToken) external;\\n\\n    /// @notice Disable an underlying-token.\\n    ///\\n    /// @param underlyingToken The underlying-token to disable.\\n    function disableUnderlyingToken(address underlyingToken) external;\\n\\n    /// @notice Enable a yield-token.\\n    ///\\n    /// @param yieldToken The yield-token to enable.\\n    function enableYieldToken(address yieldToken) external;\\n\\n    /// @notice Disable a yield-token.\\n    ///\\n    /// @param yieldToken The yield-token to disable.\\n    function disableYieldToken(address yieldToken) external;\\n\\n    /// @notice Configure a repay limiter.\\n    ///\\n    /// @param underlyingToken The underlying-token to configure.\\n    /// @param maximum         The maximum repay limit for the underlying-token.\\n    /// @param blocks          The number of blocks determining the recovery rate of the repay limit of the underlying-token.\\n    function configureRepayLimit(address underlyingToken, uint256 maximum, uint256 blocks) external;\\n\\n    /// @notice Configure a liquidation limiter.\\n    ///\\n    /// @param underlyingToken The underlying-token to configure.\\n    /// @param maximum         The maximum liquidation limit for the underlying-token.\\n    /// @param blocks          The number of blocks determining the recovery rate of the liquidation limit of the underlying-token.\\n    function configureLiquidationLimit(address underlyingToken, uint256 maximum, uint256 blocks) external;\\n\\n    /// @notice Set the address of the transmuter.\\n    ///\\n    /// The address set here will likely be a TransmuterBuffer contract, and not the Transmuter itself,\\n    /// but the Alchemist does not know nor does it care.\\n    ///\\n    /// @param value The address of the transmuter.\\n    function setTransmuter(address value) external;\\n\\n    /// @notice Set the minimum collateralization ratio for the debt-token.\\n    ///\\n    /// @param value The new minimum collateralization ratio.\\n    function setMinimumCollateralization(uint256 value) external;\\n\\n    /// @notice Sets the fee that the protocol will take from harvests.\\n    ///\\n    /// @param value the value to set the protocol fee to. This is in units of basis points.\\n    function setProtocolFee(uint256 value) external;\\n\\n    /// @notice Sets the address which will receive protocol fees.\\n    ///\\n    /// @param value the address to set the protocol fee receiver to.\\n    function setProtocolFeeReceiver(address value) external;\\n\\n    /// @notice Configure the minting limiter.\\n    ///\\n    /// @param maximum  The maximum minting limit for the Alchemist.\\n    /// @param rate   The number of blocks determining the recovery rate of the minting limit.\\n    function configureMintingLimit(uint256 maximum, uint256 rate) external;\\n\\n    /// @notice Sets the maximum loss that a yield bearing token will permit before restricting certain actions.\\n    ///\\n    /// @dev There are two types of loss of value for yield bearing assets: temporary or permanent. The system will\\n    ///      restrict actions which are sensitive to both forms of loss. For example, deposits must be restricted\\n    ///      when an excessive loss is encountered to prevent users from having their collateral harvested from them.\\n    ///      While the user would receive credit, which then could be exchanged for value equal to the collateral\\n    ///      that was harvested from them, it is seen as a negative user experience because the value of their\\n    ///      collateral should have been higher than what was originally recorded when they made their deposit.\\n    ///\\n    /// @param yieldToken the address of the yield bearing token.\\n    /// @param value the value to set the maximum loss to. This is in units of basis points.\\n    function setMaximumLoss(address yieldToken, uint256 value) external;\\n\\n    /// @notice Snap the expected value of a token to the current value.\\n    ///\\n    /// This function would only be used in the event of a loss in the target yield-token.\\n    /// For example, say a third-party vault experiences a 50% loss.  The expected value (amount of underlying-tokens)\\n    /// of the yield-tokens being held by the Alchemist would be 2X the real value that those yield-tokens could be\\n    /// redeemed for.  The `snap` function gives governance a way to realize those losses so that users can continue\\n    /// using the strategy as normal.\\n    ///\\n    /// @param yieldToken The target yield-token to snap.\\n    function snap(address yieldToken) external;\\n}\",\"keccak256\":\"0x4656d43cc0ba75c7fb34abf64f1551bfacf948f1082e55224716a20ab5e8a7e1\"},\"contracts/interfaces/alchemist/IAlchemistV2Errors.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/// @title  IAlchemistV2Errors\\n/// @author Alchemix Finance\\ninterface IAlchemistV2Errors {\\n    // #if !(DISABLE_CUSTOM_ERRORS)\\n    error SlippageExceeded();\\n    error ExpectedValueExceeded(address yieldToken, uint256 expectedValue, uint256 maximumExpectedValue);\\n    error LossExceeded(address yieldToken, uint256 loss, uint256 maximumLoss);\\n    error MintingLimitExceeded(uint256 amount, uint256 mintingLimit);\\n    error RepayLimitExceeded(address underlyingToken, uint256 amount, uint256 repayLimit);\\n    error LiquidationLimitExceeded(address underlyingToken, uint256 amount, uint256 repayLimit);\\n    error Undercollateralized();\\n    error UnsupportedToken(address token);\\n    error IllegalState(string message);\\n    error IllegalArgument(string message);\\n    error Unauthorized(string message);\\n    error TokenDisabled(address token);\\n    error OnlyKeeper();\\n    // #endif\\n}\",\"keccak256\":\"0xbdcfaf23d66f5de4b81713d746471758cdce89c80cbfc4b9e2e5feb3d303d1e2\"},\"contracts/interfaces/alchemist/IAlchemistV2Events.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/// @title  IAlchemistV2Events\\n/// @author Alchemix Finance\\ninterface IAlchemistV2Events {\\n    /// @notice Emitted when the admin updates the pendingAdmin.\\n    ///\\n    /// @param value The new pendingAdmin.\\n    event PendingAdminUpdated(address value);\\n\\n    /// @notice Emitted when the pendingAdmin accepts the admin role.\\n    ///\\n    /// @param value The new admin.\\n    event AdminUpdated(address value);\\n\\n    /// @notice Emitted when a sentinel is added.\\n    ///\\n    /// @param value The new sentinel.\\n    event SentinelAdded(address value);\\n\\n    /// @notice Emitted when a sentinel is removed.\\n    ///\\n    /// @param value The old sentinel.\\n    event SentinelRemoved(address value);\\n\\n    /// @notice Emitted when a keeper is added.\\n    ///\\n    /// @param value The new keeper.\\n    event KeeperAdded(address value);\\n\\n    /// @notice Emitted when a keeper is removed.\\n    ///\\n    /// @param value The old keeper.\\n    event KeeperRemoved(address value);\\n\\n    /// @notice Emitted when an underlying-token is added to the Alchemist.\\n    ///\\n    /// @param token The underlying-token that was added.\\n    event AddUnderlyingToken(address indexed token);\\n\\n    /// @notice Emitted when a yield-token is added to the Alchemist.\\n    ///\\n    /// @param token The yield-token that was added.\\n    /// @param adapter The adapter for the yield-token.\\n    event AddYieldToken(address indexed token, address adapter);\\n\\n    /// @notice Emitted when an underlying-token is enabled in the Alchemist.\\n    ///\\n    /// @param underlyingToken The underlying-token that was enabled.\\n    event UnderlyingTokenEnabled(address indexed underlyingToken);\\n\\n    /// @notice Emitted when an underlying-token is disabled in the Alchemist.\\n    ///\\n    /// @param underlyingToken The underlying-token that was disabled.\\n    event UnderlyingTokenDisabled(address indexed underlyingToken);\\n\\n    /// @notice Emitted when a yield-token is enabled in the Alchemist.\\n    ///\\n    /// @param yieldToken The yield-token that was enabled.\\n    event YieldTokenEnabled(address indexed yieldToken);\\n\\n    /// @notice Emitted when a yield-token is disabled in the Alchemist.\\n    ///\\n    /// @param yieldToken The yield-token that was disabled.\\n    event YieldTokenDisabled(address indexed yieldToken);\\n\\n\\n    /// @notice Emitted when a repay limiter is updated.\\n    ///\\n    /// @param underlyingToken    The underlying-token that had its repay limiter updated.\\n    /// @param maximum  The new maximum repay limit for the underlying-token.\\n    /// @param blocks   The new number of blocks determining the recovery rate of the repay limit for the underlying-token.\\n    event RepayLimitUpdated(address indexed underlyingToken, uint256 maximum, uint256 blocks);\\n\\n    /// @notice Emitted when a liquidation limiter is updated.\\n    ///\\n    /// @param underlyingToken    The underlying-token that had its liquidation limiter updated.\\n    /// @param maximum  The new maximum liquidation limit for the underlying-token.\\n    /// @param blocks   The new number of blocks determining the recovery rate of the liquidation limit for the underlying-token.\\n    event LiquidationLimitUpdated(address indexed underlyingToken, uint256 maximum, uint256 blocks);\\n\\n    /// @notice Emitted with the address of the Transmuter is updated.\\n    ///\\n    /// @param value The new address of the Transmuter.\\n    event TransmuterUpdated(address value);\\n\\n    /// @notice Emitted when the minimum collateralization ratio is updated.\\n    ///\\n    /// @param value The new minimum collateralization ratio.\\n    event MinimumCollateralizationUpdated(uint256 value);\\n\\n    /// @notice Emitted when the protocol fee is updated.\\n    ///\\n    /// @param value The new protocol fee.\\n    event ProtocolFeeUpdated(uint256 value);\\n    \\n    /// @notice Emitted when the protocol fee receiver is updated.\\n    ///\\n    /// @param value The new protocol fee receiver.\\n    event ProtocolFeeReceiverUpdated(address value);\\n\\n    /// @notice Emitted when an underyling-token's minting limit is updated.\\n    ///\\n    /// @param maximum The new maximum minting limit.\\n    /// @param blocks  The number of blocks determining the recover rate.\\n    event MintingLimitUpdated(uint256 maximum, uint256 blocks);\\n\\n    /// @notice Emitted when a yield-token's maximum loss is updated.\\n    ///\\n    /// @param yieldToken   The target yield-token.\\n    /// @param value        The new maximum loss.\\n    event MaximumLossUpdated(address indexed yieldToken, uint256 value);\\n\\n    /// @notice Emitted when a yield-token's expected value is snapped to the current value.\\n    ///\\n    /// @param yieldToken    The target yield-token.\\n    /// @param expectedValue The new expected value of the yield-token.\\n    event Snap(address indexed yieldToken, uint256 expectedValue);\\n\\n    /// @notice Emitted when a CDP owner approves a spender to mint debt from their CDP.\\n    ///\\n    /// @param owner   The owner of the CDP.\\n    /// @param spender The spender that is approved to mint debt.\\n    /// @param amount  The amount of debt that the spender is approved to mint.\\n    event ApproveMint(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /// @notice Emitted when a CDP owner approves a withdrawer to withdraw collateral from their CDP.\\n    ///\\n    /// @param owner   The owner of the CDP.\\n    /// @param withdrawer The withdrawer that is approved to withdraw collateral.\\n    /// @param amount  The amount of collateral that the withdrawer is approved to withdraw.\\n    event ApproveWithdraw(address indexed owner, address indexed withdrawer, uint256 amount);\\n\\n    /// @notice Emitted when a yield-token is successfully harvested.\\n    ///\\n    /// @param yieldToken   The yield-token that was harvested.\\n    /// @param params       The packet of bytes that was sent to the `unwrap` function of the yield-token-adapter.  The format of these bytes is dependent on the `withdraw` function (or similar) of the target yield-token.\\n    event Harvest(address indexed yieldToken, bytes params);\\n\\n    /// @notice Emitted when a user deposits funds (yield-tokens or underlying-tokens) into a CDP.\\n    ///\\n    /// @param sender       The msg.sender that deposited funds.\\n    /// @param yieldToken   The yield-token that was deposited.\\n    /// @param amount       The amount of yield-tokens that were deposited.\\n    /// @param recipient    The owner of the CDP that recieved the deposit.\\n    event Deposit(address indexed sender, address indexed yieldToken, uint256 amount, address recipient);\\n\\n    /// @notice Emitted when a user withdraws funds (yield-tokens or underlying-tokens) from a CDP.\\n    ///\\n    /// @param sender       The owner of the CDP, msg.sender.\\n    /// @param yieldToken   The yield-token that was withdrawn.\\n    /// @param shares       The amount of shares that were withdrawn.\\n    /// @param recipient    The address that received the withdrawn funds.\\n    event Withdraw(address indexed sender, address indexed yieldToken, uint256 shares, address recipient);\\n\\n    /// @notice Emitted when debt-tokens are minted.\\n    ///\\n    /// @param owner     The owner of the CDP.\\n    /// @param amount    The amount of debt-tokens minted.\\n    /// @param recipient The recipient of the minted debt-tokens.\\n    event Mint(address indexed owner, uint256 amount, address recipient);\\n\\n    /// @notice Emitted when debt-tokens are burned to repay debt.\\n    ///\\n    /// @param sender    The user that burned the debt-tokens, msg.sender.\\n    /// @param amount    The amount of debt-tokens burned.\\n    /// @param recipient The recipient of the resulting credit gained.\\n    event Burn(address indexed sender, uint256 amount, address recipient);\\n\\n    /// @notice Emitted when underlying-tokens are used to repay a CDP's debt.\\n    ///\\n    /// @param sender               The user that repaid the debt.\\n    /// @param underlyingToken      The underlying-token used to repay the debt.\\n    /// @param amount               The amount of underlying-tokens paid to wipe debt.\\n    /// @param recipient            The recipient of the resulting credit gained.\\n    event Repay(address indexed sender, address indexed underlyingToken, uint256 amount, address recipient);\\n\\n    /// @notice Emitted when a user liquidates shares from their CDP.\\n    ///\\n    /// @param sender       The owner of the CDP, msg.sender.\\n    /// @param yieldToken   The yield-token to liquidate.\\n    /// @param shares       The number of shares to liquidate.\\n    event Liquidate(address indexed sender, address indexed yieldToken, uint256 shares);\\n\\n    /// @notice Emitted when a user donates credit (via burning debt-tokens) to a yield-token.\\n    ///\\n    /// @param sender The user that donated the credit, msg.sender.\\n    /// @param yieldToken  The yield-token to which credit was donated.\\n    /// @param amount The amount of debt-token burned to donate credit.\\n    event Donate(address indexed sender, address indexed yieldToken, uint256 amount);\\n}\",\"keccak256\":\"0xde99b98fcafee9be73d12e4cf7fc1199f4ee8c5fd2e16fd8fae1f23698f1f5b4\"},\"contracts/interfaces/alchemist/IAlchemistV2Immutables.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/// @title  IAlchemistV2Immutables\\n/// @author Alchemix Finance\\ninterface IAlchemistV2Immutables {\\n    /// @notice Returns the address of the debt-token used by the Alchemist.\\n    ///\\n    /// @return The address of the debt-token.\\n    function debtToken() external view returns (address);\\n}\",\"keccak256\":\"0xbd1cc86a7e0558d8554b5756006c9bd8c976890bf33fbb2bf30d2c8b31dbaaca\"},\"contracts/interfaces/alchemist/IAlchemistV2Permit.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/// @title  IAlchemistV2Permit\\n/// @author Alchemix Finance\\ninterface IAlchemistV2Permit {\\n    // #if !(DISABLE_CUSTOM_ERRORS)\\n    /// @notice An error which is thrown when a permit signature deadline is exceeded.\\n    error SignatureDeadlineExceeded();\\n\\n    /// @notice An error which is thrown when an invalid signature is given.\\n    error InvalidSignature();\\n    // #endif\\n\\n    /// @notice Calculates the EIP-712 domain separator used in permits.\\n    ///\\n    /// @dev The domain separator is calculated instead of being cached because of the potential for replay attack\\n    ///      when a chain split occurs. This domain separator is expected to be unique as per the EIP-712 specification.\\n    ///\\n    /// @return the domain separator.\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Gets the type hash used in the permit minting signature verification.\\n    ///\\n    /// @return the permit mint typehash.\\n    function PERMIT_MINT_TYPEHASH() external view returns (bytes32);\\n\\n    /// @notice Gets the type hash used in the permit withdrawing signature verification.\\n    ///\\n    /// @return the permit withdraw typehash.\\n    function PERMIT_WITHDRAW_TYPEHASH() external view returns (bytes32);\\n\\n    /// @notice Gets the current permit nonce of `account`.\\n    ///\\n    /// @dev This is used to prevent replay attacks. All permit schemes share the same nonce.\\n    ///\\n    /// @param account the account to get the nonce of.\\n    /// @return the nonce.\\n    function nonces(address account) external view returns (uint256);\\n\\n    /// @notice Approves `spender` to spend `value` tokens on the behalf of `owner`..\\n    ///\\n    /// The permit message should be signed off-chain by the owner of the position and the resulting v, r, and s\\n    /// parameters are used to verify the approval signature.\\n    ///\\n    /// @param owner    the account that is being approved.\\n    /// @param spender  the account which is being permitted to spend.\\n    /// @param value    the amount to permit the spender to spend on behalf of the owner.\\n    /// @param deadline the deadline timestamp by which the call must be mined for the approve to work.\\n    /// @param v        must produce valid secp256k1 signature from the holder along with `r` and `s`.\\n    /// @param r        must produce valid secp256k1 signature from the holder along with `v` and `s`.\\n    /// @param s        must produce valid secp256k1 signature from the holder along with `r` and `v`.\\n    function permitMint(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /// @notice Approves `withdrawer` to withdraw `value` tokens on the behalf of `owner`..\\n    ///\\n    /// The permit message should be signed off-chain by the owner of the position and the resulting v, r, and s\\n    /// parameters are used to verify the approval signature.\\n    ///\\n    /// @param owner    the account that is being approved.\\n    /// @param withdrawer the account which is being permitted to swithdraw.\\n    /// @param value    the amount to permit the spender to spend on behalf of the owner.\\n    /// @param deadline the deadline timestamp by which the call must be mined for the approve to work.\\n    /// @param v        must produce valid secp256k1 signature from the holder along with `r` and `s`.\\n    /// @param r        must produce valid secp256k1 signature from the holder along with `v` and `s`.\\n    /// @param s        must produce valid secp256k1 signature from the holder along with `r` and `v`.\\n    function permitWithdraw(\\n        address owner,\\n        address withdrawer,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\",\"keccak256\":\"0xbb3988dad2c2c886b251e29c6ec51e8d62360f86042bb385fc0ba86c93818711\"},\"contracts/interfaces/alchemist/IAlchemistV2State.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/// @title  IAlchemistV2State\\n/// @author Alchemix Finance\\ninterface IAlchemistV2State {\\n    /// @notice Gets the admin of the Alchemist.\\n    ///\\n    /// @return the admin.\\n    function admin() external view returns (address);\\n\\n    /// @notice Gets the pending administrator of the Alchemist.\\n    ///\\n    /// @return the pending administrator.\\n    function pendingAdmin() external view returns (address);\\n\\n    /// @notice Checks if an address is a sentinel.\\n    ///\\n    /// @return the true or false.\\n    function sentinels(address value) external view returns (bool);\\n\\n    /// @notice Checks if an address is a keeper.\\n    ///\\n    /// @return the true or false.\\n    function keepers(address value) external view returns (bool);\\n\\n    /// @notice Gets the transmuter.\\n    ///\\n    /// @return the transmuter.\\n    function transmuter() external view returns (address);\\n\\n    /// @notice Gets the minimum collateralization that the system supports.\\n    ///\\n    /// Collateralization is determined by taking the total value of collateral that a user has deposited into their\\n    /// account and dividing it by the debt that they have taken out.\\n    ///\\n    /// @dev The value returned is a 18 decimal fixed point integer.\\n    ///\\n    /// @return the minimum collateralization.\\n    function minimumCollateralization() external view returns (uint256);\\n\\n    /// @notice Gets the protocol fee.\\n    ///\\n    /// @return the protocol fee.\\n    function protocolFee() external view returns (uint256);\\n\\n    /// @notice Gets the protocol fee receiver.\\n    ///\\n    /// @return the protocol fee receiver.\\n    function protocolFeeReceiver() external view returns (address);\\n\\n    /// @notice Gets the rate of the underlying tokens per share.\\n    ///\\n    /// @param yieldToken the token to check.\\n    ///\\n    /// @return the rate of the underlying tokens per share.\\n    function underlyingTokensPerShare(address yieldToken) external view returns (uint256);\\n\\n    /// @notice Gets the rate of the yield tokens per share.\\n    ///\\n    /// @param yieldToken the yield-token to check.\\n    ///\\n    /// @return the rate of the yield tokens per share.\\n    function yieldTokensPerShare(address yieldToken) external view returns (uint256);\\n\\n    /// @notice Gets the supported underlying tokens.\\n    ///\\n    /// @dev The order of the entries returned by this function is not guaranteed to be consistent between calls.\\n    ///\\n    /// @return the supported underlying tokens.\\n    function getSupportedUnderlyingTokens() external view returns (address[] memory);\\n\\n    /// @notice Gets the supported yield tokens.\\n    ///\\n    /// @dev The order of the entries returned by this function is not guaranteed to be consistent between calls.\\n    ///\\n    /// @return the supported yield tokens.\\n    function getSupportedYieldTokens() external view returns (address[] memory);\\n\\n    /// @notice Gets if an underlying token is supported.\\n    ///\\n    /// @param underlyingToken the token to check.\\n    ///\\n    /// @return if the token is supported.\\n    function isSupportedUnderlyingToken(address underlyingToken) external view returns (bool);\\n\\n    /// @notice Gets if a yield token is supported.\\n    ///\\n    /// @param yieldToken the token to check.\\n    ///\\n    /// @return if the token is supported.\\n    function isSupportedYieldToken(address yieldToken) external view returns (bool);\\n\\n    /// @notice Gets the debt and deposited tokens of an account.\\n    ///\\n    /// @param owner the address that owns the account.\\n    ///\\n    /// @return debt            the last recorded amount of debt that the account had incurred.\\n    /// @return depositedTokens the yield tokens that the owner has deposited into the system.\\n    function accounts(address owner) external view returns (int256 debt, address[] memory depositedTokens);\\n\\n    /// @notice Gets the balance and lastAccruedWeight of a given yield-token in a user's CDP\\n    ///\\n    /// @param owner The CDP owner.\\n    /// @param yieldToken The yield-token.\\n    ///\\n    /// @return balance           The amount of shares of the yield-token in the CDP.\\n    /// @return lastAccruedWeight The last-accrued-weight of the yield-token in the CDP.\\n    function positions(address owner, address yieldToken) external view returns (uint256 balance, uint256 lastAccruedWeight);\\n\\n    /// @notice Gets parameters for an underlying token.\\n    ///\\n    /// @param underlyingToken the address of the underlying token.\\n    ///\\n    /// @return decimals      the number of decimals that the token has.\\n    /// @return scalingFactor the scaling factor used to convert the token into units of the decimal token.\\n    /// @return enabled       a flag indicating if the token is enabled.\\n    function getUnderlyingTokenParameters(address underlyingToken)\\n        external view\\n        returns (\\n            uint8 decimals,\\n            uint256 scalingFactor,\\n            bool enabled\\n        );\\n\\n    /// @notice Get the parameters and state of a yield-token.\\n    ///\\n    /// @param yieldToken the address of the yield token.\\n    ///\\n    /// @return decimals        The amount of decimals the yield-token has.\\n    /// @return underlyingToken The underlying-token.\\n    /// @return adapter         The adapter for the underlying-token.\\n    /// @return maximumLoss     The maximum loss that the yield-token can experience before being automatically disabled.\\n    /// @return balance         The amount of yield-tokens held by the Alchemist.\\n    /// @return totalShares     The total amount of shares for of the yield-token.\\n    /// @return expectedValue   The expected amount of underlying-tokens that the Alchemist would receive from redeeming its balance of yield-token.\\n    /// @return accruedWeight   The accured weight of shares of the yield-token.\\n    /// @return enabled         A flag indicating if the yield-token is enabled.\\n    function getYieldTokenParameters(address yieldToken)\\n        external view\\n        returns (\\n            uint8 decimals,\\n            address underlyingToken,\\n            address adapter,\\n            uint256 maximumLoss,\\n            uint256 balance,\\n            uint256 totalShares,\\n            uint256 expectedValue,\\n            uint256 accruedWeight,\\n            bool enabled\\n        );\\n\\n    /// @notice Gets the amount of tokens an account that has been delegated credit can mint.\\n    ///\\n    /// @param owner the owner of a position in alchemix that has delegated credit.\\n    /// @param spender the account which has been delegated credit.\\n    ///\\n    /// @return the amount of tokens the account that has been delegated credit can mint.\\n    function mintAllowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Gets the amount of tokens an account has been permitted can withdraw.\\n    ///\\n    /// @param owner the owner of a position in alchemix.\\n    /// @param spender the account which has been permitted to withdraw.\\n    ///\\n    /// @return the amount of tokens the account that has been permitted to withdraw can withdraw.\\n    function withdrawAllowance(address owner, address spender) external view returns (uint256);\\n}\",\"keccak256\":\"0xa2c6f698bd18d7db49186eb5417b986c9133bac675bb8eb591073c04e1dec63e\"},\"contracts/libraries/Limiters.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/// @title  Functions\\n/// @author Alchemix Finance\\nlibrary Limiters {\\n    using Limiters for LinearGrowthLimiter;\\n\\n    /// @dev The configuration and state of a linear growth function (LGF).\\n    struct LinearGrowthLimiter {\\n        uint256 maximum;        /// The maximum limit of the function.\\n        uint256 rate;           /// The rate at which the function increases back to its maximum.\\n        uint256 lastValue;      /// The most recently saved value of the function.\\n        uint256 lastBlock;      /// The block that `lastValue` was recorded.\\n    }\\n\\n    /// @dev Instantiates a new linear growth function.\\n    ///\\n    /// @param maximum The maximum value for the LGF.\\n    /// @param blocks  The number of blocks that determins the rate of the LGF.\\n    ///\\n    /// @return The LGF struct.\\n    function createLinearGrowthLimiter(uint256 maximum, uint256 blocks) internal view returns (LinearGrowthLimiter memory) {\\n        return LinearGrowthLimiter({\\n            maximum: maximum,\\n            rate: maximum * 1e18 / blocks,\\n            lastValue: maximum,\\n            lastBlock: block.number\\n        });\\n    }\\n\\n    /// @dev Configure an LGF.\\n    ///\\n    /// @param self    The LGF to configure.\\n    /// @param maximum The maximum value of the LFG.\\n    /// @param blocks  The number of recovery blocks of the LGF.\\n    function configure(LinearGrowthLimiter storage self, uint256 maximum, uint256 blocks) internal {\\n        if (self.lastValue > maximum) {\\n            self.lastValue = maximum;\\n        }\\n\\n        self.maximum = maximum;\\n        self.rate = maximum * 1e18 / blocks;\\n    }\\n\\n    /// @dev Updates the state of an LGF by updating `lastValue` and `lastBlock`.\\n    ///\\n    /// @param self the LGF to update.\\n    function update(LinearGrowthLimiter storage self) internal {\\n        uint256 value = self.get();\\n        self.lastValue = value > self.maximum ? self.maximum : value;\\n        self.lastBlock = block.number;\\n    }\\n\\n    /// @dev Decrease the value of the LGF.\\n    ///\\n    /// @param self   The LGF.\\n    /// @param amount The amount to decrease `lastValue`.\\n    function decrease(LinearGrowthLimiter storage self, uint256 amount) internal {\\n        uint256 value = self.get();\\n        self.lastValue = value - amount;\\n        self.lastBlock = block.number;\\n    }\\n\\n    /// @dev Get the current value of the LGF.\\n    ///\\n    /// @return The LGF.\\n    function get(LinearGrowthLimiter storage self) internal view returns (uint256) {\\n        uint256 elapsed = block.number - self.lastBlock;\\n        if (elapsed == 0) {\\n            return self.lastValue;\\n        }\\n        uint256 delta = elapsed * self.rate / 1e18;\\n        uint256 value = self.lastValue + delta;\\n        return value > self.maximum ? self.maximum : value;\\n    }\\n}\",\"keccak256\":\"0x48682c66c7d34d6ad6eb7636b97450ff561c6b88b8ee51279754b94654c8d379\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n  /// @notice Cast a uint256 to a int256, revert on overflow\\n  /// @param y The uint256 to be casted\\n  /// @return z The casted integer, now type int256\\n  function toInt256(uint256 y) internal pure returns (int256 z) {\\n    require(y < 2**255, \\\"SafeCast: bad int256\\\");\\n    z = int256(y);\\n  }\\n\\n  /// @notice Cast a uint256 to a int256, revert on overflow\\n  /// @param y The uint256 to be casted\\n  /// @return z The casted integer, now type int256\\n  function toUint256(int256 y) internal pure returns (uint256 z) {\\n    require(y > 0, \\\"SafeCast: bad uint256\\\");\\n    z = uint256(y);\\n  }\\n}\\n\",\"keccak256\":\"0xc11be9253cd5a0bc8be607429727b740e71939a8d46b70b3cf463d59dc1c6d2c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Sets.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/// @title  Sets\\n/// @author Alchemix Finance\\nlibrary Sets {\\n    using Sets for AddressSet;\\n\\n    /// @notice A data structure holding an array of values with an index mapping for O(1) lookup.\\n    struct AddressSet {\\n        address[] values;\\n        mapping(address => uint256) indexes;\\n    }\\n\\n    /// @dev Add a value to a Set\\n    ///\\n    /// @param self  The Set.\\n    /// @param value The value to add.\\n    ///\\n    /// @return Whether the operation was successful (unsuccessful if the value is already contained in the Set)\\n    function add(AddressSet storage self, address value) internal returns (bool) {\\n        if (self.contains(value)) {\\n            return false;\\n        }\\n        self.values.push(value);\\n        self.indexes[value] = self.values.length;\\n        return true;\\n    }\\n\\n    /// @dev Remove a value from a Set\\n    ///\\n    /// @param self  The Set.\\n    /// @param value The value to remove.\\n    ///\\n    /// @return Whether the operation was successful (unsuccessful if the value was not contained in the Set)\\n    function remove(AddressSet storage self, address value) internal returns (bool) {\\n        uint256 index = self.indexes[value];\\n        if (index == 0) {\\n            return false;\\n        }\\n\\n        // Normalize the index since we know that the element is in the set.\\n        index--;\\n\\n        uint256 lastIndex = self.values.length - 1;\\n\\n        if (index != lastIndex) {\\n            address lastValue = self.values[lastIndex];\\n            self.values[index] = lastValue;\\n            self.indexes[lastValue] = index;\\n        }\\n\\n        self.values.pop();\\n\\n        delete self.indexes[value];\\n\\n        return true;\\n    }\\n\\n    /// @dev Returns true if the value exists in the Set\\n    ///\\n    /// @param self  The Set.\\n    /// @param value The value to check.\\n    ///\\n    /// @return True if the value is contained in the Set, False if it is not.\\n    function contains(AddressSet storage self, address value) internal view returns (bool) {\\n        return self.indexes[value] != 0;\\n    }\\n}\",\"keccak256\":\"0xd25c34307e64176c2ccc750e9e356a27ad411c3fdaad2fad846d8aea62938dfe\"},\"contracts/libraries/TokenUtils.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IERC20Extensions.sol\\\";\\nimport \\\"../interfaces/IERC20Meta.sol\\\";\\nimport \\\"../interfaces/IERC20Minimal.sol\\\";\\nlibrary TokenUtils {\\n    /// @dev A safe function to get the decimals of an ERC20 token.\\n    ///\\n    /// @param token The target token.\\n    ///\\n    /// @return The amount of decimals of the token.\\n    function expectDecimals(address token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(IERC20Meta.decimals.selector));\\n        require(success && data.length >= 32); // FIXME: Error\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    /// @dev Gets the balance of tokens held by an account.\\n    ///\\n    /// @param token The token to check the balance of.\\n    /// @param account The address of the token holder.\\n    ///\\n    /// @return The balance of the tokens held by an account.\\n    function safeBalanceOf(address token, address account) internal view returns (uint256) {\\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, account));\\n        require(success && data.length >= 32); // FIXME: Error\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Transfers tokens to another address.\\n    ///\\n    /// @param token The token to transfer.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount The amount of tokens to transfer.\\n    function safeTransfer(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20Minimal.transfer.selector, recipient, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TF'); // FIXME: Error\\n    }\\n\\n    /// @dev Approves tokens for the smart contract.\\n    ///\\n    /// @param token The token to approve.\\n    /// @param spender The contract to spend the tokens.\\n    /// @param value The amount of tokens to approve.\\n    function safeApprove(address token, address spender, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20Minimal.approve.selector, spender, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TF'); // FIXME: Error\\n    }\\n\\n    /// @dev Transfer tokens from one address to another address.\\n    ///\\n    /// @param token The token to transfer.\\n    /// @param owner The address of the owner.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount The amount of tokens to transfer.\\n    function safeTransferFrom(address token, address owner, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20Minimal.transferFrom.selector, owner, recipient, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TF'); // FIXME: Error\\n    }\\n\\n    /// @dev Mints tokens to an address.\\n    ///\\n    /// @param token The token to mint.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount The amount of tokens to mint.\\n    function safeMint(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20Extensions.mint.selector, recipient, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TF'); // FIXME: Error\\n    }\\n\\n    /// @dev Burns tokens from its total supply.\\n    ///\\n    /// @param token  The token to burn.\\n    /// @param owner  The owner of the tokens.\\n    /// @param amount The amount of tokens to burn.\\n    function safeBurnFrom(address token, address owner, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20Extensions.burnFrom.selector, owner, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TF'); // FIXME: Error\\n    }\\n}\",\"keccak256\":\"0x610fd477abc3e0a9df1ee9cfc40170708c0fa18bb89f7f5b483c8d31d344c0e1\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162005f3538038062005f358339810160408190526200003491620002fd565b6020808201516001600160a01b0390811660809081528351600380549184166001600160a01b031992831617905560408501516007805491851691831691909117905560608501516008559084015160095560a0840151600a805491909316911617905560c082015160e0830151620000b69262003b1662000269821b17901c565b8051600c55602080820151600d55604080830151600e55606090920151600f556001805460ff19168117905560035491516001600160a01b0390921682527f54e4612788f90384e6843298d7854436f3a585b2c3831ab66abf1de63bfa6c2d910160405180910390a16007546040516001600160a01b0390911681527fe42bb1780117f5788c6e0042e955291223819875891ddf465b8e4fbb85a933e99060200160405180910390a17f6f428e543b1146a0996303f0250c6fe0682874c690989e63ae53bf75bed8ef6f6008546040516200019391815260200190565b60405180910390a17fd10d75876659a287a59a6ccfa2e3fff42f84d94b542837acd30bc184d562de40600954604051620001cf91815260200190565b60405180910390a1600a546040516001600160a01b0390911681527f76203fab169061f503a4139455a7dfc20cc2d5a59c97d5bb810e431f4059aad79060200160405180910390a17f8353d6f6057b53994c31faf6112674bd84b37caab3af81c269080ae9904ebbeb8160c001518260e001516040516200025a929190918252602082015260400190565b60405180910390a15062000411565b620002956040518060800160405280600081526020016000815260200160008152602001600081525090565b60405180608001604052808481526020018385670de0b6b3a7640000620002bd9190620003c0565b620002c99190620003ee565b815260200184815260200143815250905092915050565b80516001600160a01b0381168114620002f857600080fd5b919050565b60006101008083850312156200031257600080fd5b604051908101906001600160401b03821181831017156200034357634e487b7160e01b600052604160045260246000fd5b816040526200035284620002e0565b81526200036260208501620002e0565b60208201526200037560408501620002e0565b604082015260608401516060820152608084015160808201526200039c60a08501620002e0565b60a082015260c084015160c082015260e084015160e0820152809250505092915050565b6000816000190483118215151615620003e957634e487b7160e01b600052601160045260246000fd5b500290565b6000826200040c57634e487b7160e01b600052601260045260246000fd5b500490565b608051615ade6200045760003960008181610e70015281816117bc01528181612476015281816129490152818161357201528181613a360152613a720152615ade6000f3fe60806040526004361061041b5760003560e01c80637239d2b91161021e578063b1a997ac11610123578063e8c93fed116100ab578063f851a4401161007a578063f851a44014610e0a578063f8931bb214610e2a578063f8d8989814610e5e578063fcd3533c14610e92578063fd967f4714610eb257600080fd5b8063e8c93fed14610d8a578063edca201b14610daa578063f45346dc14610dca578063f781d8a114610dea57600080fd5b8063d6737ccf116100f2578063d6737ccf14610cff578063d6b0f48414610d1f578063e43252d714610d34578063e69d849d14610d54578063e8b6571b14610d7457600080fd5b8063b1a997ac14610c8a578063c2bb1b6b14610caa578063ca9e8ad614610cca578063cdfb2b4e14610cea57600080fd5b80638ab1d681116101a65780639f62f22a116101755780639f62f22a14610bf4578063a96cb06914610c14578063ac9650d814610c34578063adb4a9ad14610c54578063b0e21e8a14610c7457600080fd5b80638ab1d68114610b6457806394bf804d14610b845780639b19251a14610ba45780639f02e91714610bd457600080fd5b80637b991041116101ed5780637b99104114610ab75780637ecebe0014610ad75780638105f44314610b04578063825625a714610b245780638734887f14610b4457600080fd5b80637239d2b914610a375780637399bfe814610a5757806373a0015a14610a77578063787dce3d14610a9757600080fd5b80634032b72b116103245780635b987baa116102ac5780635ee553021161027b5780635ee553021461099757806363c92490146109b757806366d88ff6146109d757806369328dec146109f75780636bcdd28a14610a1757600080fd5b80635b987baa146109095780635c34586c146109295780635ceae9c4146109495780635e5c06e21461096957600080fd5b80634bd21445116102f35780634bd21445146107a15780634dd18bf5146107d65780634e1ca120146107f657806351044b8e146108165780635a5efc8b1461083657600080fd5b80634032b72b1461072c578063405f4c4c1461074c57806346877b1a1461076c5780634a2226351461078c57600080fd5b806319815a32116103a7578063233ac00811610376578063233ac00814610645578063267822471461068f5780633644e515146106c757806339a51be5146106dc5780633bbd64bc146106fc57600080fd5b806319815a32146105c357806319a158d0146105e35780631b962c781461060357806322448de71461062557600080fd5b80630fab9906116103ee5780630fab9906146104c457806313b39b9c146104e457806314ae9f2e1461050457806314b2533e1461052457806315f8b3ec1461055857600080fd5b806302892d701461042057806302ce58131461046557806307e3a3af1461047f5780630e18b681146104ad575b600080fd5b34801561042c57600080fd5b5061045061043b366004614fac565b60056020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561047157600080fd5b506001546104509060ff1681565b34801561048b57600080fd5b5061049f61049a366004614fc9565b610ec8565b60405190815260200161045c565b3480156104b957600080fd5b506104c2610ef9565b005b3480156104d057600080fd5b506104c26104df3660046150c7565b611044565b3480156104f057600080fd5b506104c26104ff366004615133565b61111b565b34801561051057600080fd5b506104c261051f366004614fac565b611132565b34801561053057600080fd5b5061049f7f4e69b929e93dac11cc23d4346204322b15f9aeb082793d7c74e14af3073a48c981565b34801561056457600080fd5b506105a2610573366004614fac565b6001600160a01b0316600090815260116020526040902080546001820154600a9092015460ff91821693911690565b6040805160ff9094168452602084019290925215159082015260600161045c565b3480156105cf57600080fd5b506104c26105de36600461515f565b6111f2565b3480156105ef57600080fd5b506104c26105fe366004615178565b61122f565b34801561060f57600080fd5b506106186112cb565b60405161045c91906151f1565b34801561063157600080fd5b506104c2610640366004614fac565b611330565b34801561065157600080fd5b5061049f610660366004614fc9565b6001600160a01b0391821660009081526010602090815260408083209390941682526006909201909152205490565b34801561069b57600080fd5b506004546106af906001600160a01b031681565b6040516001600160a01b03909116815260200161045c565b3480156106d357600080fd5b5061049f6113ef565b3480156106e857600080fd5b50600a546106af906001600160a01b031681565b34801561070857600080fd5b50610450610717366004614fac565b60066020526000908152604090205460ff1681565b34801561073857600080fd5b506104c2610747366004614fac565b611494565b34801561075857600080fd5b506104c2610767366004614fac565b611551565b34801561077857600080fd5b506104c2610787366004614fac565b611615565b34801561079857600080fd5b5061061861166b565b3480156107ad57600080fd5b506107c16107bc366004614fc9565b6116ce565b6040805192835260208301919091520161045c565b3480156107e257600080fd5b506104c26107f1366004614fac565b61170c565b34801561080257600080fd5b506104c2610811366004615133565b611762565b34801561082257600080fd5b506104c2610831366004615204565b611775565b34801561084257600080fd5b506108b2610851366004614fac565b6001600160a01b039081166000908152601260205260409020805460018201546002830154600484015460058501546006860154600787015460089097015460ff8088169a6101009098048a16999690961697949693959294919391921690565b6040805160ff9a909a168a526001600160a01b0398891660208b015296909716958801959095526060870193909352608086019190915260a085015260c084015260e083015215156101008201526101200161045c565b34801561091557600080fd5b506104c2610924366004615255565b611835565b34801561093557600080fd5b506104c2610944366004615133565b6119ee565b34801561095557600080fd5b506104c2610964366004615204565b611ad8565b34801561097557600080fd5b50610989610984366004614fac565b611d25565b60405161045c9291906152c6565b3480156109a357600080fd5b506104506109b2366004614fac565b611dae565b3480156109c357600080fd5b506104c26109d2366004615178565b611dbb565b3480156109e357600080fd5b5061049f6109f2366004614fac565b611e4e565b348015610a0357600080fd5b506104c2610a12366004615204565b611e80565b348015610a2357600080fd5b506104c2610a32366004614fac565b611f38565b348015610a4357600080fd5b506007546106af906001600160a01b031681565b348015610a6357600080fd5b506104c2610a723660046152df565b611ffc565b348015610a8357600080fd5b506104c2610a923660046150c7565b61223b565b348015610aa357600080fd5b506104c2610ab236600461515f565b612306565b348015610ac357600080fd5b506104c2610ad2366004614fac565b612343565b348015610ae357600080fd5b5061049f610af2366004614fac565b600b6020526000908152604090205481565b348015610b1057600080fd5b506104c2610b1f36600461532f565b612403565b348015610b3057600080fd5b506104c2610b3f366004615370565b61264e565b348015610b5057600080fd5b5061049f610b5f366004614fac565b612876565b348015610b7057600080fd5b506104c2610b7f366004614fac565b6128a8565b348015610b9057600080fd5b506104c2610b9f3660046153c9565b612901565b348015610bb057600080fd5b50610450610bbf366004614fac565b60026020526000908152604090205460ff1681565b348015610be057600080fd5b506104c2610bef366004614fac565b6129bc565b348015610c0057600080fd5b506104c2610c0f3660046153ee565b612a86565b348015610c2057600080fd5b50610450610c2f366004614fac565b612ffa565b610c47610c42366004615421565b613007565b60405161045c91906154ee565b348015610c6057600080fd5b506104c2610c6f366004614fac565b61315f565b348015610c8057600080fd5b5061049f60095481565b348015610c9657600080fd5b506104c2610ca5366004614fac565b6131b5565b348015610cb657600080fd5b506104c2610cc5366004614fac565b6131d2565b348015610cd657600080fd5b506104c2610ce5366004615550565b61328d565b348015610cf657600080fd5b506104c26132e8565b348015610d0b57600080fd5b506104c2610d1a366004614fac565b613327565b348015610d2b57600080fd5b506104c26133f8565b348015610d4057600080fd5b506104c2610d4f366004614fac565b613435565b348015610d6057600080fd5b506104c2610d6f366004615133565b613491565b348015610d8057600080fd5b5061049f60085481565b348015610d9657600080fd5b506104c2610da5366004615572565b6135e1565b348015610db657600080fd5b506104c2610dc53660046155f1565b6136c3565b348015610dd657600080fd5b506104c2610de5366004615204565b613789565b348015610df657600080fd5b506104c2610e05366004615255565b61385d565b348015610e1657600080fd5b506003546106af906001600160a01b031681565b348015610e3657600080fd5b5061049f7f75597f45d20ee38c23b459da2dc911cec482e56521830ddc96918afde28f35e281565b348015610e6a57600080fd5b506106af7f000000000000000000000000000000000000000000000000000000000000000081565b348015610e9e57600080fd5b506104c2610ead3660046153c9565b613a0b565b348015610ebe57600080fd5b5061049f61271081565b6001600160a01b03808316600090815260106020908152604080832093851683526005909301905220545b92915050565b6004546001600160a01b0316610f575760405163c50656df60e01b815260206004820152601760248201527f4e6f2070656e64696e672061646d696e2069732073657400000000000000000060448201526064015b60405180910390fd5b6004546001600160a01b03163314610fb25760405163973d02cb60e01b815260206004820152601b60248201527f4f6e6c792070656e64696e672061646d696e206d61792063616c6c00000000006044820152606401610f4e565b60048054600380546001600160a01b0383166001600160a01b031991821681179092559091169091556040519081527f54e4612788f90384e6843298d7854436f3a585b2c3831ab66abf1de63bfa6c2d9060200160405180910390a1604051600081527fa728e84b447788a55ff664fbfb5c3983925f88b80b672a1b0b8271c94b22df359060200160405180910390a1565b61104c613b88565b611054613bb0565b61105f601585613bfe565b61108757604051635f8b555b60e11b81526001600160a01b0385166004820152602401610f4e565b61109084613c1f565b61109933613c70565b60006110a58585613cdb565b90506110b2338686613d3f565b6110bf8582613e02613e15565b6110c833613ede565b6110d485828585613f53565b50604080518581526001600160a01b0385811660208301528716913391600080516020615a8983398151915291015b60405180910390a35061111560008055565b50505050565b611123613bb0565b61112e338383613ff7565b5050565b61113a61405f565b6001600160a01b03811660009081526006602052604090205460ff1661119a5760405163c50656df60e01b815260206004820152601460248201527312d9595c195c881b9bdd081859191959081e595d60621b6044820152606401610f4e565b6001600160a01b038116600081815260066020908152604091829020805460ff1916905590519182527fa7a775c2c8141f7985c111748ec31c11e5e44b83528e105c8d1d4e8e6b81cf8091015b60405180910390a150565b6111fa61405f565b60088190556040518181527f6f428e543b1146a0996303f0250c6fe0682874c690989e63ae53bf75bed8ef6f906020016111e7565b61123761405f565b6001600160a01b038316600090815260116020526040902061125b906006016140a6565b6001600160a01b03831660009081526011602052604090206112819060060183836140d4565b60408051838152602081018390526001600160a01b038516917f0f3828e75ac2c1d15158acbdaab952f19d3a532547df5baf02f3fbbde1336d7191015b60405180910390a2505050565b6060601560000180548060200260200160405190810160405280929190818152602001828054801561132657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611308575b5050505050905090565b61133861405f565b6001600160a01b03811660009081526005602052604090205460ff161561139b5760405163c50656df60e01b815260206004820152601660248201527514d95b9d1a5b995b08185b1c9958591e48185919195960521b6044820152606401610f4e565b6001600160a01b038116600081815260056020908152604091829020805460ff1916600117905590519182527f5b1d64390e3cf191313044f30f2b4f86cbb296ce80a06ba04a189326d6bad6bb91016111e7565b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527ffc01e36e23316d5c2b9890d52c673e909cb50865d3d49aeed293bb9a5fb8d888918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b61149c61405f565b6001600160a01b03811660009081526006602052604090205460ff16156114fd5760405163c50656df60e01b815260206004820152601460248201527312d9595c195c88185b1c9958591e48185919195960621b6044820152606401610f4e565b6001600160a01b038116600081815260066020908152604091829020805460ff1916600117905590519182527f1584773458d98c71b34a270ee1100b3a42889bf91e3b7a858563b684c24d838e91016111e7565b61155961405f565b6001600160a01b03811660009081526012602052604090206008015460ff16156115c65760405163c50656df60e01b815260206004820152601b60248201527f5969656c6420746f6b656e20616c726561647920656e61626c656400000000006044820152606401610f4e565b6001600160a01b038116600081815260126020526040808220600801805460ff19166001179055517ff3870e6d7b8099a1c57edb6e665b6984dec6a64d93bad4025308e0e08ed22e6f9190a250565b61161d61405f565b600a80546001600160a01b0319166001600160a01b0383169081179091556040519081527f76203fab169061f503a4139455a7dfc20cc2d5a59c97d5bb810e431f4059aad7906020016111e7565b60606013600001805480602002602001604051908101604052809291908181526020018280548015611326576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611308575050505050905090565b6001600160a01b03808316600090815260106020908152604080832093851683526001840182528083205460029094019091529020545b9250929050565b61171461405f565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527fa728e84b447788a55ff664fbfb5c3983925f88b80b672a1b0b8271c94b22df35906020016111e7565b61176a613bb0565b61112e338383614115565b61177d613b88565b611785613bb0565b61178e83613c70565b6117a38361179b84614173565b6141c36141cf565b6117ac83613ede565b6117b78333846141fe565b6117e27f00000000000000000000000000000000000000000000000000000000000000008284614243565b604080518381526001600160a01b0383811660208301528516917fbcad3d7d3dfccb90d49c6063bf70f828901fefc88937d90af74e58e6e55bc39d910160405180910390a261183060008055565b505050565b61183d613bb0565b8342111561185e5760405163ec492e6760e01b815260040160405180910390fd5b60006118686113ef565b6001600160a01b0389166000908152600b6020526040812080547f4e69b929e93dac11cc23d4346204322b15f9aeb082793d7c74e14af3073a48c9928c928c928c929091906118b68361565a565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161192f92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa15801561199a573d6000803e3d6000fd5b505050602060405103519050806001600160a01b0316896001600160a01b0316146119d857604051638baa579f60e01b815260040160405180910390fd5b6119e3898989614115565b505050505050505050565b6119f661405f565b612710811115611a49576040516354a1577760e11b815260206004820152601f60248201527f45786365656473206d6178696d756d20737570706f727465642076616c7565006044820152606401610f4e565b611a54601583613bfe565b611a7c57604051635f8b555b60e11b81526001600160a01b0383166004820152602401610f4e565b6001600160a01b03821660008181526012602052604090819020600201839055517f75bfe099d672835dbb3c09443e8493c7f306b46d695f749eb0bcf7352bef014790611acc9084815260200190565b60405180910390a25050565b611ae0613b88565b611ae8613bb0565b611af3601384613bfe565b611b1b57604051635f8b555b60e11b81526001600160a01b0384166004820152602401610f4e565b6001600160a01b0383166000908152601160205260409020600a015460ff16611b62576040516303f585af60e31b81526001600160a01b0384166004820152602401610f4e565b6001600160a01b0383166000908152601160205260408120611b869060020161434d565b905080831115611baf578383826040516395e6194b60e01b8152600401610f4e93929190615675565b611bb882613c70565b611bd682611bce611bc987876143c6565b614173565b6143ec6141cf565b6001600160a01b0384166000908152601160205260409020611bfb90600201846143f8565b600754611c1590859033906001600160a01b03168661441f565b60075460405163bc04f0af60e01b81526001600160a01b038681166004830152602482018690529091169063bc04f0af90604401600060405180830381600087803b158015611c6357600080fd5b505af1158015611c77573d6000803e3d6000fd5b505050506001600160a01b0382166000908152601060205260408120541215611cd35760405163c50656df60e01b815260206004820152600d60248201526c1119589d081bdd995c9c185a59609a1b6044820152606401610f4e565b604080518481526001600160a01b03848116602083015286169133917fce19c3e21a8e06ec6b2c542fd707ed6c742d5dd9b947310759a8e369b36f614c91015b60405180910390a35061183060008055565b6001600160a01b0381166000908152601060209081526040808320805460038201805484518187028101870190955280855260609593949293919291839190830182828015611d9d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611d7f575b505050505090509250925050915091565b6000610ef3601383613bfe565b611dc361405f565b6001600160a01b0383166000908152601160205260409020611de7906002016140a6565b6001600160a01b0383166000908152601160205260409020611e0d9060020183836140d4565b60408051838152602081018390526001600160a01b038516917f86d00f048da605f1d0b35d86d59306a26293721713d9d41eef94518316eb183491016112be565b6001600160a01b038116600090815260126020526040812054610ef3908390611e7b9060ff16600a61577a565b613cdb565b611e88613b88565b611e90613bb0565b611e9b601584613bfe565b611ec357604051635f8b555b60e11b81526001600160a01b0384166004820152602401610f4e565b611ecc33613c70565b6000611ed88484613cdb565b9050611ee5338585613d3f565b611ef28482613e02613e15565b611efb33613ede565b611f06848383614528565b604080518481526001600160a01b0384811660208301528616913391600080516020615a898339815191529101611d13565b611f4061405f565b6001600160a01b0381166000908152601160205260409020600a015460ff1615611fad5760405163c50656df60e01b815260206004820181905260248201527f556e6465726c79696e6720746f6b656e20616c726561647920656e61626c65646044820152606401610f4e565b6001600160a01b038116600081815260116020526040808220600a01805460ff19166001179055517fca9381c17577b2d0094e8b051655bcdbfdeadc4e4877c4c2be12477f00e6e7b09190a250565b612004613b88565b3360009081526006602052604090205460ff166120345760405163c60eb33560e01b815260040160405180910390fd5b6001600160a01b03821660009081526012602052604081206004015461205b90849061455b565b6001600160a01b038416600090815260126020526040902060060154909150808211612088575050612232565b600061209d856120988486615789565b61461d565b9050806120ac57505050612232565b6001600160a01b038086166000908152601260205260408120546101009004909116906120db87843089613f53565b90506000612710600954836120f091906157a0565b6120fa91906157bf565b905060006121088284615789565b9050600061211685836143c6565b90506121228a826146e1565b6001600160a01b038a166000908152601260205260408120600401805488929061214d908490615789565b9091555050600a5461216a9086906001600160a01b031685614528565b6007546121829086906001600160a01b031684614528565b60075460405163bc04f0af60e01b81526001600160a01b038781166004830152602482018590529091169063bc04f0af90604401600060405180830381600087803b1580156121d057600080fd5b505af11580156121e4573d6000803e3d6000fd5b50505050896001600160a01b03167fa510e1e71426a8edb9c5411b14cf1f5ed7e3157bfac4e5ce69e47a6c97b70c008a60405161222191906157e1565b60405180910390a250505050505050505b61112e60008055565b612243613b88565b61224b613bb0565b612256601585613bfe565b61227e57604051635f8b555b60e11b81526001600160a01b0385166004820152602401610f4e565b600061228b85858461474d565b9050612296856147b5565b61229f85613c1f565b6122a9838661485b565b6122b4838683614961565b506122c28582614a4e613e15565b604080518281526001600160a01b03858116602083015287169133917f364bb76a44233df8584c690de6da7810626a5e77192f3ebc942c35bcb1add24f9101611103565b61230e61405f565b60098190556040518181527fd10d75876659a287a59a6ccfa2e3fff42f84d94b542837acd30bc184d562de40906020016111e7565b61234b614a5a565b6001600160a01b03811660009081526012602052604090206008015460ff166123b75760405163c50656df60e01b815260206004820152601c60248201527f5969656c6420746f6b656e20616c72656164792064697361626c6564000000006044820152606401610f4e565b6001600160a01b038116600081815260126020526040808220600801805460ff19169055517f03c47a80dc0e98b1d128cfb8fc41da46e0249ce1303aeedb6d76e8184814aaf89190a250565b61240b613b88565b61241361405f565b61241e601383613bfe565b156124625760405163c50656df60e01b8152602060048201526013602482015272151bdad95b88185b1c9958591e481859191959606a1b6044820152606401610f4e565b600061246d83614ac2565b9050600061249a7f0000000000000000000000000000000000000000000000000000000000000000614ac2565b90508060ff168260ff161115612504576040516354a1577760e11b815260206004820152602860248201527f546f6b656e2068617320756e737570706f72746564206e756d626572206f6620604482015267646563696d616c7360c01b6064820152608401610f4e565b6040518060a001604052808360ff168152602001838361252491906157f4565b61252f90600a61577a565b815260200161254685600001358660200135613b16565b815260200161255d85604001358660600135613b16565b8152600060209182018190526001600160a01b0387168152601182526040908190208351815460ff90911660ff1991821617825584840151600183015584830151805160028401558085015160038401558084015160048401556060908101516005840155808601518051600685015594850151600784015592840151600883015592909101516009820155608090920151600a90920180549215159290911691909117905561260e601385614b79565b506040516001600160a01b038516907f3a0e2b79f1e0c4867b78173318e64bad2dbf7be510d51198d37900e52de2bb8c90600090a2505061112e60008055565b612656613b88565b61265e613bb0565b612669601584613bfe565b61269157604051635f8b555b60e11b81526001600160a01b0384166004820152602401610f4e565b6001600160a01b038084166000908152601260205260409020546101009004166126ba846147b5565b6126c384613c1f565b60006126cf8585613cdb565b905060006126df86833087613f53565b6001600160a01b0384166000908152601160205260408120919250906127079060060161434d565b9050808211156127305783828260405163637e01ad60e01b8152600401610f4e93929190615675565b61273a338861485b565b612745338888613d3f565b6001600160a01b03808816600090815260126020526040902054612779913391611bce91611bc991610100900416866143c6565b6001600160a01b038416600090815260116020526040902061279e90600601836143f8565b6127ab8784613e02613e15565b6007546127c39085906001600160a01b031684614528565b60075460405163bc04f0af60e01b81526001600160a01b038681166004830152602482018590529091169063bc04f0af90604401600060405180830381600087803b15801561281157600080fd5b505af1158015612825573d6000803e3d6000fd5b50506040518881526001600160a01b038a1692503391507faef3faf684172084346f7dc2cc3bb1328d1cc23caec12dd9a82d4a4e56c00b179060200160405180910390a35050505061183060008055565b6001600160a01b038116600090815260126020526040812054610ef39083906128a39060ff16600a61577a565b614bda565b6128b061405f565b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527fbf2e373b8263f701e10efcac80ea442afcb29c6852b3a42b0b46cc8edaaf54a791016111e7565b612909613b88565b612911613bb0565b61291a82614bf3565b61292333613c70565b6129303361179b84614173565b61293933613ede565b612944600c836143f8565b61296f7f00000000000000000000000000000000000000000000000000000000000000008284614243565b604080518381526001600160a01b038316602082015233917fbcad3d7d3dfccb90d49c6063bf70f828901fefc88937d90af74e58e6e55bc39d91015b60405180910390a261112e60008055565b6129c4614a5a565b6001600160a01b0381166000908152601160205260409020600a015460ff16612a3a5760405163c50656df60e01b815260206004820152602160248201527f556e6465726c79696e6720746f6b656e20616c72656164792064697361626c656044820152601960fa1b6064820152608401610f4e565b6001600160a01b038116600081815260116020526040808220600a01805460ff19169055517fe22044804ce2ea75faf2748f7f88aecfa58265269c2c57ca28b5030da28ab13f9190a250565b612a8e613b88565b612a9661405f565b61271081602001351115612b02576040516354a1577760e11b815260206004820152602c60248201527f4d6178696d756d206c6f73732065786365656473206d6178696d756d2073757060448201526b706f727465642076616c756560a01b6064820152608401610f4e565b6000612b116020830183614fac565b9050806001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b4c57600080fd5b505afa158015612b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b849190615817565b6001600160a01b0316836001600160a01b031614612bde5760405163c50656df60e01b8152602060048201526016602482015275082c8c2e0e8cae440e8ded6cadc40dad2e6dac2e8c6d60531b6044820152606401610f4e565b612be9601584613bfe565b15612c375760405163c50656df60e01b815260206004820152601c60248201527f5969656c6420746f6b656e20697320616c7265616479206164646564000000006044820152606401610f4e565b612cb3816001600160a01b0316632495a5996040518163ffffffff1660e01b815260040160206040518083038186803b158015612c7357600080fd5b505afa158015612c87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cab9190615817565b601390613bfe565b612d195760405163c50656df60e01b815260206004820152603060248201527f556e6465726c79696e6720746f6b656e206f66207969656c6420746f6b656e2060448201526f1a5cc81b9bdd081cdd5c1c1bdc9d195960821b6064820152608401610f4e565b604051806101400160405280612d2e85614ac2565b60ff168152602001826001600160a01b0316632495a5996040518163ffffffff1660e01b815260040160206040518083038186803b158015612d6f57600080fd5b505afa158015612d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da79190615817565b6001600160a01b03168152602090810190612dc490850185614fac565b6001600160a01b039081168252602085810135818401526040808701358185015260006060808601829052608080870183905260a080880184905260c080890185905260e09889018590528c88168552601287529385902089518154978b015160ff9091166001600160a81b0319909816979097176101009789168802178155948901516001860180546001600160a01b03191691909816179096559087015160028401558601516003830155928501516004820155918401516005830155918301516006820155908201516007820155610120909101516008909101805460ff1916911515919091179055612ebb601584614b79565b50612ed583612ecd6020850185614fac565b600019614c2c565b612f56816001600160a01b0316632495a5996040518163ffffffff1660e01b815260040160206040518083038186803b158015612f1157600080fd5b505afa158015612f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f499190615817565b612ecd6020850185614fac565b6001600160a01b0383167f11b5474c898003d5e6757a1ac88184c8b015d483c1a7b92ca88e71fe343465f4612f8e6020850185614fac565b6040516001600160a01b03909116815260200160405180910390a2826001600160a01b03167f75bfe099d672835dbb3c09443e8493c7f306b46d695f749eb0bcf7352bef01478360200135604051612fe891815260200190565b60405180910390a25061112e60008055565b6000610ef3601583613bfe565b60608167ffffffffffffffff81111561302257613022615002565b60405190808252806020026020018201604052801561305557816020015b60608152602001906001900390816130405790505b50905060005b82811015613158576000803086868581811061307957613079615834565b905060200281019061308b919061584a565b604051613099929190615891565b600060405180830381855af49150503d80600081146130d4576040519150601f19603f3d011682016040523d82523d6000602084013e6130d9565b606091505b509150915081613125576044815110156130f257600080fd5b6004810190508080602001905181019061310c91906158a1565b60405162461bcd60e51b8152600401610f4e91906157e1565b8084848151811061313857613138615834565b6020026020010181905250505080806131509061565a565b91505061305b565b5092915050565b61316761405f565b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527fe42bb1780117f5788c6e0042e955291223819875891ddf465b8e4fbb85a933e9906020016111e7565b6131bd613b88565b6131c681613c70565b6131cf60008055565b50565b6131da61405f565b6001600160a01b03811660009081526005602052604090205460ff1661323c5760405163c50656df60e01b815260206004820152601660248201527514d95b9d1a5b995b081b9bdd081859191959081e595d60521b6044820152606401610f4e565b6001600160a01b038116600081815260056020908152604091829020805460ff1916905590519182527f8e7ac62951d0ff2590efb434e0adfbb6b9c0f784993a523c48b42751bab6c5e891016111e7565b61329561405f565b61329f600c6140a6565b6132ab600c83836140d4565b60408051838152602081018390527f8353d6f6057b53994c31faf6112674bd84b37caab3af81c269080ae9904ebbeb910160405180910390a15050565b6132f061405f565b6001805460ff1916811790556040517fe5e5846f783279948f6ec5faad38318cde86fe5be7ea845ede56d62f16c3743490600090a1565b61332f613b88565b61333761405f565b613342601582613bfe565b61336a57604051635f8b555b60e11b81526001600160a01b0382166004820152602401610f4e565b6001600160a01b03811660009081526012602052604081206004015490613391838361455b565b6001600160a01b0384166000818152601260205260409081902060060183905551919250907fccda4b864ea094cd2323d3a440088f1171a7c3e5c46d87f6baafabe470d614da906133e59084815260200190565b60405180910390a250506131cf60008055565b61340061405f565b6001805460ff191690556040517f212c6e1d3045c9581ef0adf2504dbb1d137f52f38162ccf77a16c69d14eba5c390600090a1565b61343d61405f565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527f8f42195a0bbfa58954be4349deb9efc38bdb9c298e529f705f8bc1e38bce039991016111e7565b613499613b88565b6134a1613bb0565b6134aa33613c70565b3360009081526010602090815260408083206001600160a01b03861684526001018252808320546012909252909120600501546134e79190615789565b6134f982670de0b6b3a76400006157a0565b61350391906157bf565b6001600160a01b0383166000908152601260205260408120600701805490919061352e90849061590f565b90915550506001600160a01b0382166000818152601260209081526040808320600701543380855260108452828520958552600290950190925290912055613598907f00000000000000000000000000000000000000000000000000000000000000009083614c5f565b6040518181526001600160a01b0383169033907f88dcaca629d63d86330e97adc358b13dd0ebd703239aea96b7ea2fb331b16f4e9060200160405180910390a361112e60008055565b6135e9613b88565b6135f1613bb0565b6135fc601585613bfe565b61362457604051635f8b555b60e11b81526001600160a01b0385166004820152602401610f4e565b61362d84613c1f565b61363685613c70565b60006136428585613cdb565b905061364f868686613d3f565b61365c8582613e02613e15565b61366586613ede565b613670863383614c92565b61367c85828585613f53565b50604080518581526001600160a01b0385811660208301528716913391600080516020615a89833981519152910160405180910390a3506136bc60008055565b5050505050565b6136cb613b88565b6136d3613bb0565b6136de601584613bfe565b61370657604051635f8b555b60e11b81526001600160a01b0384166004820152602401610f4e565b61370f84613c70565b600061371b8484613cdb565b9050613728858585613d3f565b6137358482613e02613e15565b61373e85613ede565b613749853383614c92565b613754848383614528565b604080518481526001600160a01b0384811660208301528087169290881691600080516020615a898339815191529101611103565b613791613b88565b613799613bb0565b6137a4601584613bfe565b6137cc57604051635f8b555b60e11b81526001600160a01b0384166004820152602401610f4e565b6137d5836147b5565b6137de83613c1f565b6137e8818461485b565b6137f3818484614961565b506138018383614a4e613e15565b61380d8333308561441f565b604080518381526001600160a01b03838116602083015285169133917f364bb76a44233df8584c690de6da7810626a5e77192f3ebc942c35bcb1add24f910160405180910390a361183060008055565b613865613bb0565b834211156138865760405163ec492e6760e01b815260040160405180910390fd5b60006138906113ef565b6001600160a01b0389166000908152600b6020526040812080547f75597f45d20ee38c23b459da2dc911cec482e56521830ddc96918afde28f35e2928c928c928c929091906138de8361565a565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161395792919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156139c2573d6000803e3d6000fd5b505050602060405103519050806001600160a01b0316896001600160a01b031614613a0057604051638baa579f60e01b815260040160405180910390fd5b6119e3898989613ff7565b613a13613b88565b613a1b613bb0565b613a2481613c70565b613a3181611bce84614173565b613a5c7f00000000000000000000000000000000000000000000000000000000000000003384614c5f565b60405163288aafcb60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063288aafcb90602401600060405180830381600087803b158015613abe57600080fd5b505af1158015613ad2573d6000803e3d6000fd5b5050604080518581526001600160a01b03851660208201523393507fdbdf9b8e4b75e75b162d151ec8fc7f0561cabab5fcccfa2600be62223e4300c49250016129ab565b613b416040518060800160405280600081526020016000815260200160008152602001600081525090565b60405180608001604052808481526020018385670de0b6b3a7640000613b6791906157a0565b613b7191906157bf565b815260200184815260200143815250905092915050565b60005415613ba957604051632ecfcaf960e01b815260040160405180910390fd5b6001600055565b60015460ff168015613bc25750333214155b8015613bde57503360009081526002602052604090205460ff16155b15613bfc57604051630b094f2760e31b815260040160405180910390fd5b565b6001600160a01b031660009081526001919091016020526040902054151590565b6000613c2a82614ccc565b6001600160a01b0383166000908152601260205260409020600201549091508082111561183057828282604051635c1bc28160e01b8152600401610f4e93929190615675565b6001600160a01b0381166000908152601060205260408120600301905b815481101561183057613cc983836000018381548110613caf57613caf615834565b6000918252602090912001546001600160a01b031661485b565b80613cd38161565a565b915050613c8d565b6001600160a01b03821660009081526012602052604081206005015480613d055782915050610ef3565b6001600160a01b0384166000908152601260205260409020600401548190613d2d90856157a0565b613d3791906157bf565b949350505050565b6001600160a01b0380841660009081526010602090815260408083209386168352600190930190529081208054839290613d7a908490615789565b90915550506001600160a01b03821660009081526012602052604081206005018054839290613daa908490615789565b90915550506001600160a01b0380841660009081526010602090815260408083209386168352600190930190522054611830576001600160a01b03831660009081526010602052604090206111159060030183614d39565b6000613e0e8284615789565b9392505050565b6001600160a01b038316600090815260126020526040812060048101546006909101549091613e44868661455b565b90506000613e5683838763ffffffff16565b9050613e6684878763ffffffff16565b6001600160a01b03881660009081526012602052604090206004810191909155600681018290556003015480821115613ed4576001600160a01b0388166000908152601260205260409081902060030154905163a3528cf560e01b8152610f4e918a918a9190600401615675565b5050505050505050565b6001600160a01b038116600090815260106020526040812054908113613f02575050565b6000613f0d83614e69565b9050600082613f2483670de0b6b3a76400006157a0565b613f2e91906157bf565b90506008548110156111155760405163fddafdf560e01b815260040160405180910390fd5b6001600160a01b03808516600090815260126020526040808220600101549051631b9efa0160e21b8152919216908190636e7be80490613f9b90889088908890600401615927565b602060405180830381600087803b158015613fb557600080fd5b505af1158015613fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fed9190615951565b9695505050505050565b6001600160a01b03838116600081815260106020908152604080832094871680845260058601835292819020869055518581529192917f09cd9a2cf8d0dd3936aef63dae78b3085d8abaaec9311145115b15e5e3eaea4191015b60405180910390a350505050565b6003546001600160a01b03163314613bfc5760405163973d02cb60e01b81526020600482015260096024820152682737ba1030b236b4b760b91b6044820152606401610f4e565b60006140b18261434d565b825490915081116140c257806140c5565b81545b60028301555043600390910155565b81836002015411156140e857600283018290555b818355806140fe83670de0b6b3a76400006157a0565b61410891906157bf565b8360010181905550505050565b6001600160a01b03838116600081815260106020908152604080832094871680845260068601835292819020869055518581529192917f1c6434ded5c8badcab3e8bb92e5cc66d78f4d88ff5e81846bd329f2f81d0d2749101614051565b6000600160ff1b82106141bf5760405162461bcd60e51b815260206004820152601460248201527329b0b332a1b0b9ba1d103130b21034b73a191a9b60611b6044820152606401610f4e565b5090565b6000613e0e828461596a565b6001600160a01b038316600090815260106020526040902080546141f7908463ffffffff8516565b9055505050565b6001600160a01b03808416600090815260106020908152604080832093861683526005840190915281208054849290614238908490615789565b909155505050505050565b6040516001600160a01b0383811660248301526044820183905260009182918616906340c10f1960e01b906064015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516142b091906159ab565b6000604051808303816000865af19150503d80600081146142ed576040519150601f19603f3d011682016040523d82523d6000602084013e6142f2565b606091505b509150915081801561431c57508051158061431c57508080602001905181019061431c91906159c7565b6136bc5760405162461bcd60e51b81526020600482015260026024820152612a2360f11b6044820152606401610f4e565b6000808260030154436143609190615789565b9050806143705750506002015490565b6000670de0b6b3a764000084600101548361438b91906157a0565b61439591906157bf565b905060008185600201546143a9919061590f565b855490915081116143ba57806143bd565b84545b95945050505050565b6001600160a01b038216600090815260116020526040812060010154613e0e90836157a0565b6000613e0e82846159e9565b60006144038361434d565b905061440f8282615789565b6002840155505043600390910155565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161448391906159ab565b6000604051808303816000865af19150503d80600081146144c0576040519150601f19603f3d011682016040523d82523d6000602084013e6144c5565b606091505b50915091508180156144ef5750805115806144ef5750808060200190518101906144ef91906159c7565b6145205760405162461bcd60e51b81526020600482015260026024820152612a2360f11b6044820152606401610f4e565b505050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063a9059cbb60e01b90606401614272565b6001600160a01b03808316600090815260126020908152604080832060010154815163501ad8ff60e11b815291519394859491169263a035b1fe9260048082019391829003018186803b1580156145b157600080fd5b505afa1580156145c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145e99190615951565b6001600160a01b0385166000908152601260205260409020549091506146139060ff16600a61577a565b613d2d82856157a0565b6001600160a01b03808316600090815260126020908152604080832060010154815163501ad8ff60e11b815291519394859491169263a035b1fe9260048082019391829003018186803b15801561467357600080fd5b505afa158015614687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146ab9190615951565b6001600160a01b03851660009081526012602052604090205490915081906146d79060ff16600a61577a565b613d2d90856157a0565b6001600160a01b03821660009081526012602052604090206005015461470f82670de0b6b3a76400006157a0565b61471991906157bf565b6001600160a01b0383166000908152601260205260408120600701805490919061474490849061590f565b90915550505050565b6001600160a01b038084166000908152601260205260408120600181015490549192908116916101009004166147858133308861441f565b6040516318e19bc160e01b81526001600160a01b038316906318e19bc190613f9b90889030908990600401615927565b6001600160a01b03811660009081526012602052604090206008015460ff166147fc576040516303f585af60e31b81526001600160a01b0382166004820152602401610f4e565b6001600160a01b0380821660009081526012602090815260408083205461010090049093168083526011909152919020600a015460ff1661112e576040516303f585af60e31b81526001600160a01b0382166004820152602401610f4e565b6001600160a01b03808216600081815260126020908152604080832060070154948716835260108252808320938352600290930190522054808214156148a15750505050565b6001600160a01b0380851660009081526010602090815260408083209387168352600190930190529081205490670de0b6b3a7640000826148e28587615789565b6148ec91906157a0565b6148f691906157bf565b905061490181614173565b6001600160a01b038716600090815260106020526040812080549091906149299084906159e9565b9091555050506001600160a01b0394851660009081526010602090815260408083209690971682526002909501909452505091902055565b60008061496e8484614f39565b90506000811161498057614980615a28565b6001600160a01b03808616600090815260106020908152604080832093881683526001909301905220546149d5576001600160a01b03851660009081526010602052604090206149d39060030185614b79565b505b6001600160a01b0380861660009081526010602090815260408083209388168352600190930190529081208054839290614a1090849061590f565b90915550506001600160a01b03841660009081526012602052604081206005018054839290614a4090849061590f565b909155509095945050505050565b6000613e0e828461590f565b3360009081526005602052604090205460ff16158015614a8557506003546001600160a01b03163314155b15613bfc5760405163973d02cb60e01b815260206004820152600c60248201526b139bdd081cd95b9d1a5b995b60a21b6044820152606401610f4e565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b03861691614b0891906159ab565b600060405180830381855afa9150503d8060008114614b43576040519150601f19603f3d011682016040523d82523d6000602084013e614b48565b606091505b5091509150818015614b5c57506020815110155b614b6557600080fd5b80806020019051810190613d379190615a3e565b6000614b858383613bfe565b15614b9257506000610ef3565b508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b03959095169485179055845493815293810190915260409092205590565b600080614be78484613cdb565b9050613d37848261455b565b6000614bff600c61434d565b90508082111561112e576040516313d73d6b60e01b81526004810183905260248101829052604401610f4e565b6040516001600160a01b03838116602483015260448201839052600091829186169063095ea7b360e01b90606401614272565b6040516001600160a01b03838116602483015260448201839052600091829186169063079cc67960e41b90606401614272565b6001600160a01b03808416600090815260106020908152604080832093861683526006840190915281208054849290614238908490615789565b6001600160a01b0381166000908152601260205260408120600401548190614cf590849061455b565b6001600160a01b038416600090815260126020526040902060060154909150818111614d22576000613d37565b81614d2d8183615789565b613d2d906127106157a0565b6001600160a01b038116600090815260018301602052604081205480614d63576000915050610ef3565b80614d6d81615a5b565b855490925060009150614d8290600190615789565b9050808214614e0e576000856000018281548110614da257614da2615834565b60009182526020909120015486546001600160a01b0390911691508190879085908110614dd157614dd1615834565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815260018701909152604090208290555b8454859080614e1f57614e1f615a72565b60008281526020808220600019908401810180546001600160a01b03191690559092019092556001600160a01b039590951681526001958601909452505060408220919091555090565b6001600160a01b03811660009081526010602052604081208190600301815b8154811015614f30576000826000018281548110614ea857614ea8615834565b60009182526020808320909101546001600160a01b03908116808452601283526040808520548b8416865260108552818620838752600101909452842054909450610100909204169190614efd908490614bda565b90506000614f0b83836143c6565b9050614f17818861590f565b9650505050508080614f289061565a565b915050614e88565b50909392505050565b6001600160a01b038216600090815260126020526040812060050154614f60575080610ef3565b6001600160a01b03831660009081526012602052604090206004810154600590910154614f8d90846157a0565b613e0e91906157bf565b6001600160a01b03811681146131cf57600080fd5b600060208284031215614fbe57600080fd5b8135613e0e81614f97565b60008060408385031215614fdc57600080fd5b8235614fe781614f97565b91506020830135614ff781614f97565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561504157615041615002565b604052919050565b600067ffffffffffffffff82111561506357615063615002565b50601f01601f191660200190565b600082601f83011261508257600080fd5b813561509561509082615049565b615018565b8181528460208386010111156150aa57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156150dd57600080fd5b84356150e881614f97565b93506020850135925060408501356150ff81614f97565b9150606085013567ffffffffffffffff81111561511b57600080fd5b61512787828801615071565b91505092959194509250565b6000806040838503121561514657600080fd5b823561515181614f97565b946020939093013593505050565b60006020828403121561517157600080fd5b5035919050565b60008060006060848603121561518d57600080fd5b833561519881614f97565b95602085013595506040909401359392505050565b600081518084526020808501945080840160005b838110156151e65781516001600160a01b0316875295820195908201906001016151c1565b509495945050505050565b602081526000613e0e60208301846151ad565b60008060006060848603121561521957600080fd5b833561522481614f97565b925060208401359150604084013561523b81614f97565b809150509250925092565b60ff811681146131cf57600080fd5b600080600080600080600060e0888a03121561527057600080fd5b873561527b81614f97565b9650602088013561528b81614f97565b9550604088013594506060880135935060808801356152a981615246565b9699959850939692959460a0840135945060c09093013592915050565b828152604060208201526000613d3760408301846151ad565b600080604083850312156152f257600080fd5b82356152fd81614f97565b9150602083013567ffffffffffffffff81111561531957600080fd5b61532585828601615071565b9150509250929050565b60008082840360a081121561534357600080fd5b833561534e81614f97565b92506080601f198201121561536257600080fd5b506020830190509250929050565b60008060006060848603121561538557600080fd5b833561539081614f97565b925060208401359150604084013567ffffffffffffffff8111156153b357600080fd5b6153bf86828701615071565b9150509250925092565b600080604083850312156153dc57600080fd5b823591506020830135614ff781614f97565b600080828403608081121561540257600080fd5b833561540d81614f97565b92506060601f198201121561536257600080fd5b6000806020838503121561543457600080fd5b823567ffffffffffffffff8082111561544c57600080fd5b818501915085601f83011261546057600080fd5b81358181111561546f57600080fd5b8660208260051b850101111561548457600080fd5b60209290920196919550909350505050565b60005b838110156154b1578181015183820152602001615499565b838111156111155750506000910152565b600081518084526154da816020860160208601615496565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561554357603f198886030184526155318583516154c2565b94509285019290850190600101615515565b5092979650505050505050565b6000806040838503121561556357600080fd5b50508035926020909101359150565b600080600080600060a0868803121561558a57600080fd5b853561559581614f97565b945060208601356155a581614f97565b93506040860135925060608601356155bc81614f97565b9150608086013567ffffffffffffffff8111156155d857600080fd5b6155e488828901615071565b9150509295509295909350565b6000806000806080858703121561560757600080fd5b843561561281614f97565b9350602085013561562281614f97565b925060408501359150606085013561563981614f97565b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561566e5761566e615644565b5060010190565b6001600160a01b039390931683526020830191909152604082015260600190565b600181815b808511156156d15781600019048211156156b7576156b7615644565b808516156156c457918102915b93841c939080029061569b565b509250929050565b6000826156e857506001610ef3565b816156f557506000610ef3565b816001811461570b576002811461571557615731565b6001915050610ef3565b60ff84111561572657615726615644565b50506001821b610ef3565b5060208310610133831016604e8410600b8410161715615754575081810a610ef3565b61575e8383615696565b806000190482111561577257615772615644565b029392505050565b6000613e0e60ff8416836156d9565b60008282101561579b5761579b615644565b500390565b60008160001904831182151516156157ba576157ba615644565b500290565b6000826157dc57634e487b7160e01b600052601260045260246000fd5b500490565b602081526000613e0e60208301846154c2565b600060ff821660ff84168082101561580e5761580e615644565b90039392505050565b60006020828403121561582957600080fd5b8151613e0e81614f97565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261586157600080fd5b83018035915067ffffffffffffffff82111561587c57600080fd5b60200191503681900382131561170557600080fd5b8183823760009101908152919050565b6000602082840312156158b357600080fd5b815167ffffffffffffffff8111156158ca57600080fd5b8201601f810184136158db57600080fd5b80516158e961509082615049565b8181528560208385010111156158fe57600080fd5b6143bd826020830160208601615496565b6000821982111561592257615922615644565b500190565b8381526001600160a01b03831660208201526060604082018190526000906143bd908301846154c2565b60006020828403121561596357600080fd5b5051919050565b600080821280156001600160ff1b038490038513161561598c5761598c615644565b600160ff1b83900384128116156159a5576159a5615644565b50500190565b600082516159bd818460208701615496565b9190910192915050565b6000602082840312156159d957600080fd5b81518015158114613e0e57600080fd5b60008083128015600160ff1b850184121615615a0757615a07615644565b6001600160ff1b0384018313811615615a2257615a22615644565b50500390565b634e487b7160e01b600052600160045260246000fd5b600060208284031215615a5057600080fd5b8151613e0e81615246565b600081615a6a57615a6a615644565b506000190190565b634e487b7160e01b600052603160045260246000fdfe3ed4ee04a905a278b050a856bbe7ddaaf327a30514373e65aa6103beeae488c3a26469706673582212203bdd650fa6606afc5434db7a3f312b1f0075763195b463119cc739c1136420d764736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061041b5760003560e01c80637239d2b91161021e578063b1a997ac11610123578063e8c93fed116100ab578063f851a4401161007a578063f851a44014610e0a578063f8931bb214610e2a578063f8d8989814610e5e578063fcd3533c14610e92578063fd967f4714610eb257600080fd5b8063e8c93fed14610d8a578063edca201b14610daa578063f45346dc14610dca578063f781d8a114610dea57600080fd5b8063d6737ccf116100f2578063d6737ccf14610cff578063d6b0f48414610d1f578063e43252d714610d34578063e69d849d14610d54578063e8b6571b14610d7457600080fd5b8063b1a997ac14610c8a578063c2bb1b6b14610caa578063ca9e8ad614610cca578063cdfb2b4e14610cea57600080fd5b80638ab1d681116101a65780639f62f22a116101755780639f62f22a14610bf4578063a96cb06914610c14578063ac9650d814610c34578063adb4a9ad14610c54578063b0e21e8a14610c7457600080fd5b80638ab1d68114610b6457806394bf804d14610b845780639b19251a14610ba45780639f02e91714610bd457600080fd5b80637b991041116101ed5780637b99104114610ab75780637ecebe0014610ad75780638105f44314610b04578063825625a714610b245780638734887f14610b4457600080fd5b80637239d2b914610a375780637399bfe814610a5757806373a0015a14610a77578063787dce3d14610a9757600080fd5b80634032b72b116103245780635b987baa116102ac5780635ee553021161027b5780635ee553021461099757806363c92490146109b757806366d88ff6146109d757806369328dec146109f75780636bcdd28a14610a1757600080fd5b80635b987baa146109095780635c34586c146109295780635ceae9c4146109495780635e5c06e21461096957600080fd5b80634bd21445116102f35780634bd21445146107a15780634dd18bf5146107d65780634e1ca120146107f657806351044b8e146108165780635a5efc8b1461083657600080fd5b80634032b72b1461072c578063405f4c4c1461074c57806346877b1a1461076c5780634a2226351461078c57600080fd5b806319815a32116103a7578063233ac00811610376578063233ac00814610645578063267822471461068f5780633644e515146106c757806339a51be5146106dc5780633bbd64bc146106fc57600080fd5b806319815a32146105c357806319a158d0146105e35780631b962c781461060357806322448de71461062557600080fd5b80630fab9906116103ee5780630fab9906146104c457806313b39b9c146104e457806314ae9f2e1461050457806314b2533e1461052457806315f8b3ec1461055857600080fd5b806302892d701461042057806302ce58131461046557806307e3a3af1461047f5780630e18b681146104ad575b600080fd5b34801561042c57600080fd5b5061045061043b366004614fac565b60056020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561047157600080fd5b506001546104509060ff1681565b34801561048b57600080fd5b5061049f61049a366004614fc9565b610ec8565b60405190815260200161045c565b3480156104b957600080fd5b506104c2610ef9565b005b3480156104d057600080fd5b506104c26104df3660046150c7565b611044565b3480156104f057600080fd5b506104c26104ff366004615133565b61111b565b34801561051057600080fd5b506104c261051f366004614fac565b611132565b34801561053057600080fd5b5061049f7f4e69b929e93dac11cc23d4346204322b15f9aeb082793d7c74e14af3073a48c981565b34801561056457600080fd5b506105a2610573366004614fac565b6001600160a01b0316600090815260116020526040902080546001820154600a9092015460ff91821693911690565b6040805160ff9094168452602084019290925215159082015260600161045c565b3480156105cf57600080fd5b506104c26105de36600461515f565b6111f2565b3480156105ef57600080fd5b506104c26105fe366004615178565b61122f565b34801561060f57600080fd5b506106186112cb565b60405161045c91906151f1565b34801561063157600080fd5b506104c2610640366004614fac565b611330565b34801561065157600080fd5b5061049f610660366004614fc9565b6001600160a01b0391821660009081526010602090815260408083209390941682526006909201909152205490565b34801561069b57600080fd5b506004546106af906001600160a01b031681565b6040516001600160a01b03909116815260200161045c565b3480156106d357600080fd5b5061049f6113ef565b3480156106e857600080fd5b50600a546106af906001600160a01b031681565b34801561070857600080fd5b50610450610717366004614fac565b60066020526000908152604090205460ff1681565b34801561073857600080fd5b506104c2610747366004614fac565b611494565b34801561075857600080fd5b506104c2610767366004614fac565b611551565b34801561077857600080fd5b506104c2610787366004614fac565b611615565b34801561079857600080fd5b5061061861166b565b3480156107ad57600080fd5b506107c16107bc366004614fc9565b6116ce565b6040805192835260208301919091520161045c565b3480156107e257600080fd5b506104c26107f1366004614fac565b61170c565b34801561080257600080fd5b506104c2610811366004615133565b611762565b34801561082257600080fd5b506104c2610831366004615204565b611775565b34801561084257600080fd5b506108b2610851366004614fac565b6001600160a01b039081166000908152601260205260409020805460018201546002830154600484015460058501546006860154600787015460089097015460ff8088169a6101009098048a16999690961697949693959294919391921690565b6040805160ff9a909a168a526001600160a01b0398891660208b015296909716958801959095526060870193909352608086019190915260a085015260c084015260e083015215156101008201526101200161045c565b34801561091557600080fd5b506104c2610924366004615255565b611835565b34801561093557600080fd5b506104c2610944366004615133565b6119ee565b34801561095557600080fd5b506104c2610964366004615204565b611ad8565b34801561097557600080fd5b50610989610984366004614fac565b611d25565b60405161045c9291906152c6565b3480156109a357600080fd5b506104506109b2366004614fac565b611dae565b3480156109c357600080fd5b506104c26109d2366004615178565b611dbb565b3480156109e357600080fd5b5061049f6109f2366004614fac565b611e4e565b348015610a0357600080fd5b506104c2610a12366004615204565b611e80565b348015610a2357600080fd5b506104c2610a32366004614fac565b611f38565b348015610a4357600080fd5b506007546106af906001600160a01b031681565b348015610a6357600080fd5b506104c2610a723660046152df565b611ffc565b348015610a8357600080fd5b506104c2610a923660046150c7565b61223b565b348015610aa357600080fd5b506104c2610ab236600461515f565b612306565b348015610ac357600080fd5b506104c2610ad2366004614fac565b612343565b348015610ae357600080fd5b5061049f610af2366004614fac565b600b6020526000908152604090205481565b348015610b1057600080fd5b506104c2610b1f36600461532f565b612403565b348015610b3057600080fd5b506104c2610b3f366004615370565b61264e565b348015610b5057600080fd5b5061049f610b5f366004614fac565b612876565b348015610b7057600080fd5b506104c2610b7f366004614fac565b6128a8565b348015610b9057600080fd5b506104c2610b9f3660046153c9565b612901565b348015610bb057600080fd5b50610450610bbf366004614fac565b60026020526000908152604090205460ff1681565b348015610be057600080fd5b506104c2610bef366004614fac565b6129bc565b348015610c0057600080fd5b506104c2610c0f3660046153ee565b612a86565b348015610c2057600080fd5b50610450610c2f366004614fac565b612ffa565b610c47610c42366004615421565b613007565b60405161045c91906154ee565b348015610c6057600080fd5b506104c2610c6f366004614fac565b61315f565b348015610c8057600080fd5b5061049f60095481565b348015610c9657600080fd5b506104c2610ca5366004614fac565b6131b5565b348015610cb657600080fd5b506104c2610cc5366004614fac565b6131d2565b348015610cd657600080fd5b506104c2610ce5366004615550565b61328d565b348015610cf657600080fd5b506104c26132e8565b348015610d0b57600080fd5b506104c2610d1a366004614fac565b613327565b348015610d2b57600080fd5b506104c26133f8565b348015610d4057600080fd5b506104c2610d4f366004614fac565b613435565b348015610d6057600080fd5b506104c2610d6f366004615133565b613491565b348015610d8057600080fd5b5061049f60085481565b348015610d9657600080fd5b506104c2610da5366004615572565b6135e1565b348015610db657600080fd5b506104c2610dc53660046155f1565b6136c3565b348015610dd657600080fd5b506104c2610de5366004615204565b613789565b348015610df657600080fd5b506104c2610e05366004615255565b61385d565b348015610e1657600080fd5b506003546106af906001600160a01b031681565b348015610e3657600080fd5b5061049f7f75597f45d20ee38c23b459da2dc911cec482e56521830ddc96918afde28f35e281565b348015610e6a57600080fd5b506106af7f000000000000000000000000000000000000000000000000000000000000000081565b348015610e9e57600080fd5b506104c2610ead3660046153c9565b613a0b565b348015610ebe57600080fd5b5061049f61271081565b6001600160a01b03808316600090815260106020908152604080832093851683526005909301905220545b92915050565b6004546001600160a01b0316610f575760405163c50656df60e01b815260206004820152601760248201527f4e6f2070656e64696e672061646d696e2069732073657400000000000000000060448201526064015b60405180910390fd5b6004546001600160a01b03163314610fb25760405163973d02cb60e01b815260206004820152601b60248201527f4f6e6c792070656e64696e672061646d696e206d61792063616c6c00000000006044820152606401610f4e565b60048054600380546001600160a01b0383166001600160a01b031991821681179092559091169091556040519081527f54e4612788f90384e6843298d7854436f3a585b2c3831ab66abf1de63bfa6c2d9060200160405180910390a1604051600081527fa728e84b447788a55ff664fbfb5c3983925f88b80b672a1b0b8271c94b22df359060200160405180910390a1565b61104c613b88565b611054613bb0565b61105f601585613bfe565b61108757604051635f8b555b60e11b81526001600160a01b0385166004820152602401610f4e565b61109084613c1f565b61109933613c70565b60006110a58585613cdb565b90506110b2338686613d3f565b6110bf8582613e02613e15565b6110c833613ede565b6110d485828585613f53565b50604080518581526001600160a01b0385811660208301528716913391600080516020615a8983398151915291015b60405180910390a35061111560008055565b50505050565b611123613bb0565b61112e338383613ff7565b5050565b61113a61405f565b6001600160a01b03811660009081526006602052604090205460ff1661119a5760405163c50656df60e01b815260206004820152601460248201527312d9595c195c881b9bdd081859191959081e595d60621b6044820152606401610f4e565b6001600160a01b038116600081815260066020908152604091829020805460ff1916905590519182527fa7a775c2c8141f7985c111748ec31c11e5e44b83528e105c8d1d4e8e6b81cf8091015b60405180910390a150565b6111fa61405f565b60088190556040518181527f6f428e543b1146a0996303f0250c6fe0682874c690989e63ae53bf75bed8ef6f906020016111e7565b61123761405f565b6001600160a01b038316600090815260116020526040902061125b906006016140a6565b6001600160a01b03831660009081526011602052604090206112819060060183836140d4565b60408051838152602081018390526001600160a01b038516917f0f3828e75ac2c1d15158acbdaab952f19d3a532547df5baf02f3fbbde1336d7191015b60405180910390a2505050565b6060601560000180548060200260200160405190810160405280929190818152602001828054801561132657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611308575b5050505050905090565b61133861405f565b6001600160a01b03811660009081526005602052604090205460ff161561139b5760405163c50656df60e01b815260206004820152601660248201527514d95b9d1a5b995b08185b1c9958591e48185919195960521b6044820152606401610f4e565b6001600160a01b038116600081815260056020908152604091829020805460ff1916600117905590519182527f5b1d64390e3cf191313044f30f2b4f86cbb296ce80a06ba04a189326d6bad6bb91016111e7565b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527ffc01e36e23316d5c2b9890d52c673e909cb50865d3d49aeed293bb9a5fb8d888918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b61149c61405f565b6001600160a01b03811660009081526006602052604090205460ff16156114fd5760405163c50656df60e01b815260206004820152601460248201527312d9595c195c88185b1c9958591e48185919195960621b6044820152606401610f4e565b6001600160a01b038116600081815260066020908152604091829020805460ff1916600117905590519182527f1584773458d98c71b34a270ee1100b3a42889bf91e3b7a858563b684c24d838e91016111e7565b61155961405f565b6001600160a01b03811660009081526012602052604090206008015460ff16156115c65760405163c50656df60e01b815260206004820152601b60248201527f5969656c6420746f6b656e20616c726561647920656e61626c656400000000006044820152606401610f4e565b6001600160a01b038116600081815260126020526040808220600801805460ff19166001179055517ff3870e6d7b8099a1c57edb6e665b6984dec6a64d93bad4025308e0e08ed22e6f9190a250565b61161d61405f565b600a80546001600160a01b0319166001600160a01b0383169081179091556040519081527f76203fab169061f503a4139455a7dfc20cc2d5a59c97d5bb810e431f4059aad7906020016111e7565b60606013600001805480602002602001604051908101604052809291908181526020018280548015611326576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611308575050505050905090565b6001600160a01b03808316600090815260106020908152604080832093851683526001840182528083205460029094019091529020545b9250929050565b61171461405f565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527fa728e84b447788a55ff664fbfb5c3983925f88b80b672a1b0b8271c94b22df35906020016111e7565b61176a613bb0565b61112e338383614115565b61177d613b88565b611785613bb0565b61178e83613c70565b6117a38361179b84614173565b6141c36141cf565b6117ac83613ede565b6117b78333846141fe565b6117e27f00000000000000000000000000000000000000000000000000000000000000008284614243565b604080518381526001600160a01b0383811660208301528516917fbcad3d7d3dfccb90d49c6063bf70f828901fefc88937d90af74e58e6e55bc39d910160405180910390a261183060008055565b505050565b61183d613bb0565b8342111561185e5760405163ec492e6760e01b815260040160405180910390fd5b60006118686113ef565b6001600160a01b0389166000908152600b6020526040812080547f4e69b929e93dac11cc23d4346204322b15f9aeb082793d7c74e14af3073a48c9928c928c928c929091906118b68361565a565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161192f92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa15801561199a573d6000803e3d6000fd5b505050602060405103519050806001600160a01b0316896001600160a01b0316146119d857604051638baa579f60e01b815260040160405180910390fd5b6119e3898989614115565b505050505050505050565b6119f661405f565b612710811115611a49576040516354a1577760e11b815260206004820152601f60248201527f45786365656473206d6178696d756d20737570706f727465642076616c7565006044820152606401610f4e565b611a54601583613bfe565b611a7c57604051635f8b555b60e11b81526001600160a01b0383166004820152602401610f4e565b6001600160a01b03821660008181526012602052604090819020600201839055517f75bfe099d672835dbb3c09443e8493c7f306b46d695f749eb0bcf7352bef014790611acc9084815260200190565b60405180910390a25050565b611ae0613b88565b611ae8613bb0565b611af3601384613bfe565b611b1b57604051635f8b555b60e11b81526001600160a01b0384166004820152602401610f4e565b6001600160a01b0383166000908152601160205260409020600a015460ff16611b62576040516303f585af60e31b81526001600160a01b0384166004820152602401610f4e565b6001600160a01b0383166000908152601160205260408120611b869060020161434d565b905080831115611baf578383826040516395e6194b60e01b8152600401610f4e93929190615675565b611bb882613c70565b611bd682611bce611bc987876143c6565b614173565b6143ec6141cf565b6001600160a01b0384166000908152601160205260409020611bfb90600201846143f8565b600754611c1590859033906001600160a01b03168661441f565b60075460405163bc04f0af60e01b81526001600160a01b038681166004830152602482018690529091169063bc04f0af90604401600060405180830381600087803b158015611c6357600080fd5b505af1158015611c77573d6000803e3d6000fd5b505050506001600160a01b0382166000908152601060205260408120541215611cd35760405163c50656df60e01b815260206004820152600d60248201526c1119589d081bdd995c9c185a59609a1b6044820152606401610f4e565b604080518481526001600160a01b03848116602083015286169133917fce19c3e21a8e06ec6b2c542fd707ed6c742d5dd9b947310759a8e369b36f614c91015b60405180910390a35061183060008055565b6001600160a01b0381166000908152601060209081526040808320805460038201805484518187028101870190955280855260609593949293919291839190830182828015611d9d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611d7f575b505050505090509250925050915091565b6000610ef3601383613bfe565b611dc361405f565b6001600160a01b0383166000908152601160205260409020611de7906002016140a6565b6001600160a01b0383166000908152601160205260409020611e0d9060020183836140d4565b60408051838152602081018390526001600160a01b038516917f86d00f048da605f1d0b35d86d59306a26293721713d9d41eef94518316eb183491016112be565b6001600160a01b038116600090815260126020526040812054610ef3908390611e7b9060ff16600a61577a565b613cdb565b611e88613b88565b611e90613bb0565b611e9b601584613bfe565b611ec357604051635f8b555b60e11b81526001600160a01b0384166004820152602401610f4e565b611ecc33613c70565b6000611ed88484613cdb565b9050611ee5338585613d3f565b611ef28482613e02613e15565b611efb33613ede565b611f06848383614528565b604080518481526001600160a01b0384811660208301528616913391600080516020615a898339815191529101611d13565b611f4061405f565b6001600160a01b0381166000908152601160205260409020600a015460ff1615611fad5760405163c50656df60e01b815260206004820181905260248201527f556e6465726c79696e6720746f6b656e20616c726561647920656e61626c65646044820152606401610f4e565b6001600160a01b038116600081815260116020526040808220600a01805460ff19166001179055517fca9381c17577b2d0094e8b051655bcdbfdeadc4e4877c4c2be12477f00e6e7b09190a250565b612004613b88565b3360009081526006602052604090205460ff166120345760405163c60eb33560e01b815260040160405180910390fd5b6001600160a01b03821660009081526012602052604081206004015461205b90849061455b565b6001600160a01b038416600090815260126020526040902060060154909150808211612088575050612232565b600061209d856120988486615789565b61461d565b9050806120ac57505050612232565b6001600160a01b038086166000908152601260205260408120546101009004909116906120db87843089613f53565b90506000612710600954836120f091906157a0565b6120fa91906157bf565b905060006121088284615789565b9050600061211685836143c6565b90506121228a826146e1565b6001600160a01b038a166000908152601260205260408120600401805488929061214d908490615789565b9091555050600a5461216a9086906001600160a01b031685614528565b6007546121829086906001600160a01b031684614528565b60075460405163bc04f0af60e01b81526001600160a01b038781166004830152602482018590529091169063bc04f0af90604401600060405180830381600087803b1580156121d057600080fd5b505af11580156121e4573d6000803e3d6000fd5b50505050896001600160a01b03167fa510e1e71426a8edb9c5411b14cf1f5ed7e3157bfac4e5ce69e47a6c97b70c008a60405161222191906157e1565b60405180910390a250505050505050505b61112e60008055565b612243613b88565b61224b613bb0565b612256601585613bfe565b61227e57604051635f8b555b60e11b81526001600160a01b0385166004820152602401610f4e565b600061228b85858461474d565b9050612296856147b5565b61229f85613c1f565b6122a9838661485b565b6122b4838683614961565b506122c28582614a4e613e15565b604080518281526001600160a01b03858116602083015287169133917f364bb76a44233df8584c690de6da7810626a5e77192f3ebc942c35bcb1add24f9101611103565b61230e61405f565b60098190556040518181527fd10d75876659a287a59a6ccfa2e3fff42f84d94b542837acd30bc184d562de40906020016111e7565b61234b614a5a565b6001600160a01b03811660009081526012602052604090206008015460ff166123b75760405163c50656df60e01b815260206004820152601c60248201527f5969656c6420746f6b656e20616c72656164792064697361626c6564000000006044820152606401610f4e565b6001600160a01b038116600081815260126020526040808220600801805460ff19169055517f03c47a80dc0e98b1d128cfb8fc41da46e0249ce1303aeedb6d76e8184814aaf89190a250565b61240b613b88565b61241361405f565b61241e601383613bfe565b156124625760405163c50656df60e01b8152602060048201526013602482015272151bdad95b88185b1c9958591e481859191959606a1b6044820152606401610f4e565b600061246d83614ac2565b9050600061249a7f0000000000000000000000000000000000000000000000000000000000000000614ac2565b90508060ff168260ff161115612504576040516354a1577760e11b815260206004820152602860248201527f546f6b656e2068617320756e737570706f72746564206e756d626572206f6620604482015267646563696d616c7360c01b6064820152608401610f4e565b6040518060a001604052808360ff168152602001838361252491906157f4565b61252f90600a61577a565b815260200161254685600001358660200135613b16565b815260200161255d85604001358660600135613b16565b8152600060209182018190526001600160a01b0387168152601182526040908190208351815460ff90911660ff1991821617825584840151600183015584830151805160028401558085015160038401558084015160048401556060908101516005840155808601518051600685015594850151600784015592840151600883015592909101516009820155608090920151600a90920180549215159290911691909117905561260e601385614b79565b506040516001600160a01b038516907f3a0e2b79f1e0c4867b78173318e64bad2dbf7be510d51198d37900e52de2bb8c90600090a2505061112e60008055565b612656613b88565b61265e613bb0565b612669601584613bfe565b61269157604051635f8b555b60e11b81526001600160a01b0384166004820152602401610f4e565b6001600160a01b038084166000908152601260205260409020546101009004166126ba846147b5565b6126c384613c1f565b60006126cf8585613cdb565b905060006126df86833087613f53565b6001600160a01b0384166000908152601160205260408120919250906127079060060161434d565b9050808211156127305783828260405163637e01ad60e01b8152600401610f4e93929190615675565b61273a338861485b565b612745338888613d3f565b6001600160a01b03808816600090815260126020526040902054612779913391611bce91611bc991610100900416866143c6565b6001600160a01b038416600090815260116020526040902061279e90600601836143f8565b6127ab8784613e02613e15565b6007546127c39085906001600160a01b031684614528565b60075460405163bc04f0af60e01b81526001600160a01b038681166004830152602482018590529091169063bc04f0af90604401600060405180830381600087803b15801561281157600080fd5b505af1158015612825573d6000803e3d6000fd5b50506040518881526001600160a01b038a1692503391507faef3faf684172084346f7dc2cc3bb1328d1cc23caec12dd9a82d4a4e56c00b179060200160405180910390a35050505061183060008055565b6001600160a01b038116600090815260126020526040812054610ef39083906128a39060ff16600a61577a565b614bda565b6128b061405f565b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527fbf2e373b8263f701e10efcac80ea442afcb29c6852b3a42b0b46cc8edaaf54a791016111e7565b612909613b88565b612911613bb0565b61291a82614bf3565b61292333613c70565b6129303361179b84614173565b61293933613ede565b612944600c836143f8565b61296f7f00000000000000000000000000000000000000000000000000000000000000008284614243565b604080518381526001600160a01b038316602082015233917fbcad3d7d3dfccb90d49c6063bf70f828901fefc88937d90af74e58e6e55bc39d91015b60405180910390a261112e60008055565b6129c4614a5a565b6001600160a01b0381166000908152601160205260409020600a015460ff16612a3a5760405163c50656df60e01b815260206004820152602160248201527f556e6465726c79696e6720746f6b656e20616c72656164792064697361626c656044820152601960fa1b6064820152608401610f4e565b6001600160a01b038116600081815260116020526040808220600a01805460ff19169055517fe22044804ce2ea75faf2748f7f88aecfa58265269c2c57ca28b5030da28ab13f9190a250565b612a8e613b88565b612a9661405f565b61271081602001351115612b02576040516354a1577760e11b815260206004820152602c60248201527f4d6178696d756d206c6f73732065786365656473206d6178696d756d2073757060448201526b706f727465642076616c756560a01b6064820152608401610f4e565b6000612b116020830183614fac565b9050806001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b4c57600080fd5b505afa158015612b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b849190615817565b6001600160a01b0316836001600160a01b031614612bde5760405163c50656df60e01b8152602060048201526016602482015275082c8c2e0e8cae440e8ded6cadc40dad2e6dac2e8c6d60531b6044820152606401610f4e565b612be9601584613bfe565b15612c375760405163c50656df60e01b815260206004820152601c60248201527f5969656c6420746f6b656e20697320616c7265616479206164646564000000006044820152606401610f4e565b612cb3816001600160a01b0316632495a5996040518163ffffffff1660e01b815260040160206040518083038186803b158015612c7357600080fd5b505afa158015612c87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cab9190615817565b601390613bfe565b612d195760405163c50656df60e01b815260206004820152603060248201527f556e6465726c79696e6720746f6b656e206f66207969656c6420746f6b656e2060448201526f1a5cc81b9bdd081cdd5c1c1bdc9d195960821b6064820152608401610f4e565b604051806101400160405280612d2e85614ac2565b60ff168152602001826001600160a01b0316632495a5996040518163ffffffff1660e01b815260040160206040518083038186803b158015612d6f57600080fd5b505afa158015612d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da79190615817565b6001600160a01b03168152602090810190612dc490850185614fac565b6001600160a01b039081168252602085810135818401526040808701358185015260006060808601829052608080870183905260a080880184905260c080890185905260e09889018590528c88168552601287529385902089518154978b015160ff9091166001600160a81b0319909816979097176101009789168802178155948901516001860180546001600160a01b03191691909816179096559087015160028401558601516003830155928501516004820155918401516005830155918301516006820155908201516007820155610120909101516008909101805460ff1916911515919091179055612ebb601584614b79565b50612ed583612ecd6020850185614fac565b600019614c2c565b612f56816001600160a01b0316632495a5996040518163ffffffff1660e01b815260040160206040518083038186803b158015612f1157600080fd5b505afa158015612f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f499190615817565b612ecd6020850185614fac565b6001600160a01b0383167f11b5474c898003d5e6757a1ac88184c8b015d483c1a7b92ca88e71fe343465f4612f8e6020850185614fac565b6040516001600160a01b03909116815260200160405180910390a2826001600160a01b03167f75bfe099d672835dbb3c09443e8493c7f306b46d695f749eb0bcf7352bef01478360200135604051612fe891815260200190565b60405180910390a25061112e60008055565b6000610ef3601583613bfe565b60608167ffffffffffffffff81111561302257613022615002565b60405190808252806020026020018201604052801561305557816020015b60608152602001906001900390816130405790505b50905060005b82811015613158576000803086868581811061307957613079615834565b905060200281019061308b919061584a565b604051613099929190615891565b600060405180830381855af49150503d80600081146130d4576040519150601f19603f3d011682016040523d82523d6000602084013e6130d9565b606091505b509150915081613125576044815110156130f257600080fd5b6004810190508080602001905181019061310c91906158a1565b60405162461bcd60e51b8152600401610f4e91906157e1565b8084848151811061313857613138615834565b6020026020010181905250505080806131509061565a565b91505061305b565b5092915050565b61316761405f565b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527fe42bb1780117f5788c6e0042e955291223819875891ddf465b8e4fbb85a933e9906020016111e7565b6131bd613b88565b6131c681613c70565b6131cf60008055565b50565b6131da61405f565b6001600160a01b03811660009081526005602052604090205460ff1661323c5760405163c50656df60e01b815260206004820152601660248201527514d95b9d1a5b995b081b9bdd081859191959081e595d60521b6044820152606401610f4e565b6001600160a01b038116600081815260056020908152604091829020805460ff1916905590519182527f8e7ac62951d0ff2590efb434e0adfbb6b9c0f784993a523c48b42751bab6c5e891016111e7565b61329561405f565b61329f600c6140a6565b6132ab600c83836140d4565b60408051838152602081018390527f8353d6f6057b53994c31faf6112674bd84b37caab3af81c269080ae9904ebbeb910160405180910390a15050565b6132f061405f565b6001805460ff1916811790556040517fe5e5846f783279948f6ec5faad38318cde86fe5be7ea845ede56d62f16c3743490600090a1565b61332f613b88565b61333761405f565b613342601582613bfe565b61336a57604051635f8b555b60e11b81526001600160a01b0382166004820152602401610f4e565b6001600160a01b03811660009081526012602052604081206004015490613391838361455b565b6001600160a01b0384166000818152601260205260409081902060060183905551919250907fccda4b864ea094cd2323d3a440088f1171a7c3e5c46d87f6baafabe470d614da906133e59084815260200190565b60405180910390a250506131cf60008055565b61340061405f565b6001805460ff191690556040517f212c6e1d3045c9581ef0adf2504dbb1d137f52f38162ccf77a16c69d14eba5c390600090a1565b61343d61405f565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527f8f42195a0bbfa58954be4349deb9efc38bdb9c298e529f705f8bc1e38bce039991016111e7565b613499613b88565b6134a1613bb0565b6134aa33613c70565b3360009081526010602090815260408083206001600160a01b03861684526001018252808320546012909252909120600501546134e79190615789565b6134f982670de0b6b3a76400006157a0565b61350391906157bf565b6001600160a01b0383166000908152601260205260408120600701805490919061352e90849061590f565b90915550506001600160a01b0382166000818152601260209081526040808320600701543380855260108452828520958552600290950190925290912055613598907f00000000000000000000000000000000000000000000000000000000000000009083614c5f565b6040518181526001600160a01b0383169033907f88dcaca629d63d86330e97adc358b13dd0ebd703239aea96b7ea2fb331b16f4e9060200160405180910390a361112e60008055565b6135e9613b88565b6135f1613bb0565b6135fc601585613bfe565b61362457604051635f8b555b60e11b81526001600160a01b0385166004820152602401610f4e565b61362d84613c1f565b61363685613c70565b60006136428585613cdb565b905061364f868686613d3f565b61365c8582613e02613e15565b61366586613ede565b613670863383614c92565b61367c85828585613f53565b50604080518581526001600160a01b0385811660208301528716913391600080516020615a89833981519152910160405180910390a3506136bc60008055565b5050505050565b6136cb613b88565b6136d3613bb0565b6136de601584613bfe565b61370657604051635f8b555b60e11b81526001600160a01b0384166004820152602401610f4e565b61370f84613c70565b600061371b8484613cdb565b9050613728858585613d3f565b6137358482613e02613e15565b61373e85613ede565b613749853383614c92565b613754848383614528565b604080518481526001600160a01b0384811660208301528087169290881691600080516020615a898339815191529101611103565b613791613b88565b613799613bb0565b6137a4601584613bfe565b6137cc57604051635f8b555b60e11b81526001600160a01b0384166004820152602401610f4e565b6137d5836147b5565b6137de83613c1f565b6137e8818461485b565b6137f3818484614961565b506138018383614a4e613e15565b61380d8333308561441f565b604080518381526001600160a01b03838116602083015285169133917f364bb76a44233df8584c690de6da7810626a5e77192f3ebc942c35bcb1add24f910160405180910390a361183060008055565b613865613bb0565b834211156138865760405163ec492e6760e01b815260040160405180910390fd5b60006138906113ef565b6001600160a01b0389166000908152600b6020526040812080547f75597f45d20ee38c23b459da2dc911cec482e56521830ddc96918afde28f35e2928c928c928c929091906138de8361565a565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161395792919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156139c2573d6000803e3d6000fd5b505050602060405103519050806001600160a01b0316896001600160a01b031614613a0057604051638baa579f60e01b815260040160405180910390fd5b6119e3898989613ff7565b613a13613b88565b613a1b613bb0565b613a2481613c70565b613a3181611bce84614173565b613a5c7f00000000000000000000000000000000000000000000000000000000000000003384614c5f565b60405163288aafcb60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063288aafcb90602401600060405180830381600087803b158015613abe57600080fd5b505af1158015613ad2573d6000803e3d6000fd5b5050604080518581526001600160a01b03851660208201523393507fdbdf9b8e4b75e75b162d151ec8fc7f0561cabab5fcccfa2600be62223e4300c49250016129ab565b613b416040518060800160405280600081526020016000815260200160008152602001600081525090565b60405180608001604052808481526020018385670de0b6b3a7640000613b6791906157a0565b613b7191906157bf565b815260200184815260200143815250905092915050565b60005415613ba957604051632ecfcaf960e01b815260040160405180910390fd5b6001600055565b60015460ff168015613bc25750333214155b8015613bde57503360009081526002602052604090205460ff16155b15613bfc57604051630b094f2760e31b815260040160405180910390fd5b565b6001600160a01b031660009081526001919091016020526040902054151590565b6000613c2a82614ccc565b6001600160a01b0383166000908152601260205260409020600201549091508082111561183057828282604051635c1bc28160e01b8152600401610f4e93929190615675565b6001600160a01b0381166000908152601060205260408120600301905b815481101561183057613cc983836000018381548110613caf57613caf615834565b6000918252602090912001546001600160a01b031661485b565b80613cd38161565a565b915050613c8d565b6001600160a01b03821660009081526012602052604081206005015480613d055782915050610ef3565b6001600160a01b0384166000908152601260205260409020600401548190613d2d90856157a0565b613d3791906157bf565b949350505050565b6001600160a01b0380841660009081526010602090815260408083209386168352600190930190529081208054839290613d7a908490615789565b90915550506001600160a01b03821660009081526012602052604081206005018054839290613daa908490615789565b90915550506001600160a01b0380841660009081526010602090815260408083209386168352600190930190522054611830576001600160a01b03831660009081526010602052604090206111159060030183614d39565b6000613e0e8284615789565b9392505050565b6001600160a01b038316600090815260126020526040812060048101546006909101549091613e44868661455b565b90506000613e5683838763ffffffff16565b9050613e6684878763ffffffff16565b6001600160a01b03881660009081526012602052604090206004810191909155600681018290556003015480821115613ed4576001600160a01b0388166000908152601260205260409081902060030154905163a3528cf560e01b8152610f4e918a918a9190600401615675565b5050505050505050565b6001600160a01b038116600090815260106020526040812054908113613f02575050565b6000613f0d83614e69565b9050600082613f2483670de0b6b3a76400006157a0565b613f2e91906157bf565b90506008548110156111155760405163fddafdf560e01b815260040160405180910390fd5b6001600160a01b03808516600090815260126020526040808220600101549051631b9efa0160e21b8152919216908190636e7be80490613f9b90889088908890600401615927565b602060405180830381600087803b158015613fb557600080fd5b505af1158015613fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fed9190615951565b9695505050505050565b6001600160a01b03838116600081815260106020908152604080832094871680845260058601835292819020869055518581529192917f09cd9a2cf8d0dd3936aef63dae78b3085d8abaaec9311145115b15e5e3eaea4191015b60405180910390a350505050565b6003546001600160a01b03163314613bfc5760405163973d02cb60e01b81526020600482015260096024820152682737ba1030b236b4b760b91b6044820152606401610f4e565b60006140b18261434d565b825490915081116140c257806140c5565b81545b60028301555043600390910155565b81836002015411156140e857600283018290555b818355806140fe83670de0b6b3a76400006157a0565b61410891906157bf565b8360010181905550505050565b6001600160a01b03838116600081815260106020908152604080832094871680845260068601835292819020869055518581529192917f1c6434ded5c8badcab3e8bb92e5cc66d78f4d88ff5e81846bd329f2f81d0d2749101614051565b6000600160ff1b82106141bf5760405162461bcd60e51b815260206004820152601460248201527329b0b332a1b0b9ba1d103130b21034b73a191a9b60611b6044820152606401610f4e565b5090565b6000613e0e828461596a565b6001600160a01b038316600090815260106020526040902080546141f7908463ffffffff8516565b9055505050565b6001600160a01b03808416600090815260106020908152604080832093861683526005840190915281208054849290614238908490615789565b909155505050505050565b6040516001600160a01b0383811660248301526044820183905260009182918616906340c10f1960e01b906064015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516142b091906159ab565b6000604051808303816000865af19150503d80600081146142ed576040519150601f19603f3d011682016040523d82523d6000602084013e6142f2565b606091505b509150915081801561431c57508051158061431c57508080602001905181019061431c91906159c7565b6136bc5760405162461bcd60e51b81526020600482015260026024820152612a2360f11b6044820152606401610f4e565b6000808260030154436143609190615789565b9050806143705750506002015490565b6000670de0b6b3a764000084600101548361438b91906157a0565b61439591906157bf565b905060008185600201546143a9919061590f565b855490915081116143ba57806143bd565b84545b95945050505050565b6001600160a01b038216600090815260116020526040812060010154613e0e90836157a0565b6000613e0e82846159e9565b60006144038361434d565b905061440f8282615789565b6002840155505043600390910155565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161448391906159ab565b6000604051808303816000865af19150503d80600081146144c0576040519150601f19603f3d011682016040523d82523d6000602084013e6144c5565b606091505b50915091508180156144ef5750805115806144ef5750808060200190518101906144ef91906159c7565b6145205760405162461bcd60e51b81526020600482015260026024820152612a2360f11b6044820152606401610f4e565b505050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063a9059cbb60e01b90606401614272565b6001600160a01b03808316600090815260126020908152604080832060010154815163501ad8ff60e11b815291519394859491169263a035b1fe9260048082019391829003018186803b1580156145b157600080fd5b505afa1580156145c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145e99190615951565b6001600160a01b0385166000908152601260205260409020549091506146139060ff16600a61577a565b613d2d82856157a0565b6001600160a01b03808316600090815260126020908152604080832060010154815163501ad8ff60e11b815291519394859491169263a035b1fe9260048082019391829003018186803b15801561467357600080fd5b505afa158015614687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146ab9190615951565b6001600160a01b03851660009081526012602052604090205490915081906146d79060ff16600a61577a565b613d2d90856157a0565b6001600160a01b03821660009081526012602052604090206005015461470f82670de0b6b3a76400006157a0565b61471991906157bf565b6001600160a01b0383166000908152601260205260408120600701805490919061474490849061590f565b90915550505050565b6001600160a01b038084166000908152601260205260408120600181015490549192908116916101009004166147858133308861441f565b6040516318e19bc160e01b81526001600160a01b038316906318e19bc190613f9b90889030908990600401615927565b6001600160a01b03811660009081526012602052604090206008015460ff166147fc576040516303f585af60e31b81526001600160a01b0382166004820152602401610f4e565b6001600160a01b0380821660009081526012602090815260408083205461010090049093168083526011909152919020600a015460ff1661112e576040516303f585af60e31b81526001600160a01b0382166004820152602401610f4e565b6001600160a01b03808216600081815260126020908152604080832060070154948716835260108252808320938352600290930190522054808214156148a15750505050565b6001600160a01b0380851660009081526010602090815260408083209387168352600190930190529081205490670de0b6b3a7640000826148e28587615789565b6148ec91906157a0565b6148f691906157bf565b905061490181614173565b6001600160a01b038716600090815260106020526040812080549091906149299084906159e9565b9091555050506001600160a01b0394851660009081526010602090815260408083209690971682526002909501909452505091902055565b60008061496e8484614f39565b90506000811161498057614980615a28565b6001600160a01b03808616600090815260106020908152604080832093881683526001909301905220546149d5576001600160a01b03851660009081526010602052604090206149d39060030185614b79565b505b6001600160a01b0380861660009081526010602090815260408083209388168352600190930190529081208054839290614a1090849061590f565b90915550506001600160a01b03841660009081526012602052604081206005018054839290614a4090849061590f565b909155509095945050505050565b6000613e0e828461590f565b3360009081526005602052604090205460ff16158015614a8557506003546001600160a01b03163314155b15613bfc5760405163973d02cb60e01b815260206004820152600c60248201526b139bdd081cd95b9d1a5b995b60a21b6044820152606401610f4e565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b03861691614b0891906159ab565b600060405180830381855afa9150503d8060008114614b43576040519150601f19603f3d011682016040523d82523d6000602084013e614b48565b606091505b5091509150818015614b5c57506020815110155b614b6557600080fd5b80806020019051810190613d379190615a3e565b6000614b858383613bfe565b15614b9257506000610ef3565b508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b03959095169485179055845493815293810190915260409092205590565b600080614be78484613cdb565b9050613d37848261455b565b6000614bff600c61434d565b90508082111561112e576040516313d73d6b60e01b81526004810183905260248101829052604401610f4e565b6040516001600160a01b03838116602483015260448201839052600091829186169063095ea7b360e01b90606401614272565b6040516001600160a01b03838116602483015260448201839052600091829186169063079cc67960e41b90606401614272565b6001600160a01b03808416600090815260106020908152604080832093861683526006840190915281208054849290614238908490615789565b6001600160a01b0381166000908152601260205260408120600401548190614cf590849061455b565b6001600160a01b038416600090815260126020526040902060060154909150818111614d22576000613d37565b81614d2d8183615789565b613d2d906127106157a0565b6001600160a01b038116600090815260018301602052604081205480614d63576000915050610ef3565b80614d6d81615a5b565b855490925060009150614d8290600190615789565b9050808214614e0e576000856000018281548110614da257614da2615834565b60009182526020909120015486546001600160a01b0390911691508190879085908110614dd157614dd1615834565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815260018701909152604090208290555b8454859080614e1f57614e1f615a72565b60008281526020808220600019908401810180546001600160a01b03191690559092019092556001600160a01b039590951681526001958601909452505060408220919091555090565b6001600160a01b03811660009081526010602052604081208190600301815b8154811015614f30576000826000018281548110614ea857614ea8615834565b60009182526020808320909101546001600160a01b03908116808452601283526040808520548b8416865260108552818620838752600101909452842054909450610100909204169190614efd908490614bda565b90506000614f0b83836143c6565b9050614f17818861590f565b9650505050508080614f289061565a565b915050614e88565b50909392505050565b6001600160a01b038216600090815260126020526040812060050154614f60575080610ef3565b6001600160a01b03831660009081526012602052604090206004810154600590910154614f8d90846157a0565b613e0e91906157bf565b6001600160a01b03811681146131cf57600080fd5b600060208284031215614fbe57600080fd5b8135613e0e81614f97565b60008060408385031215614fdc57600080fd5b8235614fe781614f97565b91506020830135614ff781614f97565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561504157615041615002565b604052919050565b600067ffffffffffffffff82111561506357615063615002565b50601f01601f191660200190565b600082601f83011261508257600080fd5b813561509561509082615049565b615018565b8181528460208386010111156150aa57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156150dd57600080fd5b84356150e881614f97565b93506020850135925060408501356150ff81614f97565b9150606085013567ffffffffffffffff81111561511b57600080fd5b61512787828801615071565b91505092959194509250565b6000806040838503121561514657600080fd5b823561515181614f97565b946020939093013593505050565b60006020828403121561517157600080fd5b5035919050565b60008060006060848603121561518d57600080fd5b833561519881614f97565b95602085013595506040909401359392505050565b600081518084526020808501945080840160005b838110156151e65781516001600160a01b0316875295820195908201906001016151c1565b509495945050505050565b602081526000613e0e60208301846151ad565b60008060006060848603121561521957600080fd5b833561522481614f97565b925060208401359150604084013561523b81614f97565b809150509250925092565b60ff811681146131cf57600080fd5b600080600080600080600060e0888a03121561527057600080fd5b873561527b81614f97565b9650602088013561528b81614f97565b9550604088013594506060880135935060808801356152a981615246565b9699959850939692959460a0840135945060c09093013592915050565b828152604060208201526000613d3760408301846151ad565b600080604083850312156152f257600080fd5b82356152fd81614f97565b9150602083013567ffffffffffffffff81111561531957600080fd5b61532585828601615071565b9150509250929050565b60008082840360a081121561534357600080fd5b833561534e81614f97565b92506080601f198201121561536257600080fd5b506020830190509250929050565b60008060006060848603121561538557600080fd5b833561539081614f97565b925060208401359150604084013567ffffffffffffffff8111156153b357600080fd5b6153bf86828701615071565b9150509250925092565b600080604083850312156153dc57600080fd5b823591506020830135614ff781614f97565b600080828403608081121561540257600080fd5b833561540d81614f97565b92506060601f198201121561536257600080fd5b6000806020838503121561543457600080fd5b823567ffffffffffffffff8082111561544c57600080fd5b818501915085601f83011261546057600080fd5b81358181111561546f57600080fd5b8660208260051b850101111561548457600080fd5b60209290920196919550909350505050565b60005b838110156154b1578181015183820152602001615499565b838111156111155750506000910152565b600081518084526154da816020860160208601615496565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561554357603f198886030184526155318583516154c2565b94509285019290850190600101615515565b5092979650505050505050565b6000806040838503121561556357600080fd5b50508035926020909101359150565b600080600080600060a0868803121561558a57600080fd5b853561559581614f97565b945060208601356155a581614f97565b93506040860135925060608601356155bc81614f97565b9150608086013567ffffffffffffffff8111156155d857600080fd5b6155e488828901615071565b9150509295509295909350565b6000806000806080858703121561560757600080fd5b843561561281614f97565b9350602085013561562281614f97565b925060408501359150606085013561563981614f97565b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561566e5761566e615644565b5060010190565b6001600160a01b039390931683526020830191909152604082015260600190565b600181815b808511156156d15781600019048211156156b7576156b7615644565b808516156156c457918102915b93841c939080029061569b565b509250929050565b6000826156e857506001610ef3565b816156f557506000610ef3565b816001811461570b576002811461571557615731565b6001915050610ef3565b60ff84111561572657615726615644565b50506001821b610ef3565b5060208310610133831016604e8410600b8410161715615754575081810a610ef3565b61575e8383615696565b806000190482111561577257615772615644565b029392505050565b6000613e0e60ff8416836156d9565b60008282101561579b5761579b615644565b500390565b60008160001904831182151516156157ba576157ba615644565b500290565b6000826157dc57634e487b7160e01b600052601260045260246000fd5b500490565b602081526000613e0e60208301846154c2565b600060ff821660ff84168082101561580e5761580e615644565b90039392505050565b60006020828403121561582957600080fd5b8151613e0e81614f97565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261586157600080fd5b83018035915067ffffffffffffffff82111561587c57600080fd5b60200191503681900382131561170557600080fd5b8183823760009101908152919050565b6000602082840312156158b357600080fd5b815167ffffffffffffffff8111156158ca57600080fd5b8201601f810184136158db57600080fd5b80516158e961509082615049565b8181528560208385010111156158fe57600080fd5b6143bd826020830160208601615496565b6000821982111561592257615922615644565b500190565b8381526001600160a01b03831660208201526060604082018190526000906143bd908301846154c2565b60006020828403121561596357600080fd5b5051919050565b600080821280156001600160ff1b038490038513161561598c5761598c615644565b600160ff1b83900384128116156159a5576159a5615644565b50500190565b600082516159bd818460208701615496565b9190910192915050565b6000602082840312156159d957600080fd5b81518015158114613e0e57600080fd5b60008083128015600160ff1b850184121615615a0757615a07615644565b6001600160ff1b0384018313811615615a2257615a22615644565b50500390565b634e487b7160e01b600052600160045260246000fd5b600060208284031215615a5057600080fd5b8151613e0e81615246565b600081615a6a57615a6a615644565b506000190190565b634e487b7160e01b600052603160045260246000fdfe3ed4ee04a905a278b050a856bbe7ddaaf327a30514373e65aa6103beeae488c3a26469706673582212203bdd650fa6606afc5434db7a3f312b1f0075763195b463119cc739c1136420d764736f6c63430008090033",
  "devdoc": {
    "author": "Alchemix Finance",
    "errors": {
      "NotWhitelisted()": [
        {
          "details": "Thrown when a non-whitelisted contract attempts to access a whitelist-only function."
        }
      ],
      "UnauthorizedER()": [
        {
          "details": "Thrown when anyone but a whitelist admin tries to call an admin function."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "The domain separator is calculated instead of being cached because of the potential for replay attack      when a chain split occurs. This domain separator is expected to be unique as per the EIP-712 specification.",
        "returns": {
          "_0": "the domain separator."
        }
      },
      "acceptAdmin()": {
        "details": "This is the second step in the 2-step process of setting a new administrator."
      },
      "accounts(address)": {
        "params": {
          "owner": "the address that owns the account."
        },
        "returns": {
          "debt": "           the last recorded amount of debt that the account had incurred.",
          "depositedTokens": "the yield tokens that the owner has deposited into the system."
        }
      },
      "addToWhitelist(address)": {
        "details": "Adds an contract to the whitelist.",
        "params": {
          "account": "the contract to add to the whitelist."
        }
      },
      "addUnderlyingToken(address,(uint256,uint256,uint256,uint256))": {
        "params": {
          "config": "A set of initial configuration parameters for the underlying-token.",
          "underlyingToken": "The underlying-token to add."
        }
      },
      "addYieldToken(address,(address,uint256,uint256))": {
        "params": {
          "config": "A set of initial configuration parameters for the yield-token.",
          "yieldToken": "The yield-token to add."
        }
      },
      "approveMint(address,uint256)": {
        "params": {
          "amount": "The amount of the approval.",
          "spender": "The address that will be approved to mint."
        }
      },
      "approveWithdraw(address,uint256)": {
        "params": {
          "amount": "The amount of the approval.",
          "withdrawer": "The address that will be approved to withdraw."
        }
      },
      "burn(uint256,address)": {
        "params": {
          "amount": "The amount of debt-token to burn.",
          "recipient": "The recipient of the credit."
        }
      },
      "configureLiquidationLimit(address,uint256,uint256)": {
        "params": {
          "blocks": "The number of blocks determining the recovery rate of the liquidation limit of the underlying-token.",
          "maximum": "The maximum liquidation limit for the underlying-token.",
          "underlyingToken": "The underlying-token to configure."
        }
      },
      "configureMintingLimit(uint256,uint256)": {
        "params": {
          "maximum": "The maximum minting limit for the Alchemist.",
          "rate": "The number of blocks determining the recovery rate of the minting limit."
        }
      },
      "configureRepayLimit(address,uint256,uint256)": {
        "params": {
          "blocks": "The number of blocks determining the recovery rate of the repay limit of the underlying-token.",
          "maximum": "The maximum repay limit for the underlying-token.",
          "underlyingToken": "The underlying-token to configure."
        }
      },
      "deposit(address,uint256,address)": {
        "params": {
          "amount": "The amount of yield-tokens to deposit.",
          "recipient": "The owner of the CDP that will receive the resulting shares.",
          "yieldToken": "The yield-token to deposit."
        }
      },
      "depositUnderlying(address,uint256,address,bytes)": {
        "params": {
          "amount": "The amount of the target underlying-token to deposit.",
          "data": "A packet of bytes sent to the `wrap` function of the yield-token-adapter.  The format of these bytes is dependent on the `deposit` function (or similar) of the target yield-token.",
          "recipient": "The owner of the CDP that will receive the resulting shares.",
          "yieldToken": "The yield-token that accepts the target underlying-token."
        }
      },
      "disableUnderlyingToken(address)": {
        "params": {
          "underlyingToken": "The underlying-token to disable."
        }
      },
      "disableWhitelist()": {
        "details": "De-activates the whitelist."
      },
      "disableYieldToken(address)": {
        "params": {
          "yieldToken": "The yield-token to disable."
        }
      },
      "donate(address,uint256)": {
        "params": {
          "amount": "The amount of debt-tokens to burn.",
          "yieldToken": "The target yield-token."
        }
      },
      "enableUnderlyingToken(address)": {
        "params": {
          "underlyingToken": "The underlying-token to enable."
        }
      },
      "enableWhitelist()": {
        "details": "Activates the whitelist."
      },
      "enableYieldToken(address)": {
        "params": {
          "yieldToken": "The yield-token to enable."
        }
      },
      "getSupportedUnderlyingTokens()": {
        "details": "The order of the entries returned by this function is not guaranteed to be consistent between calls.",
        "returns": {
          "_0": "the supported underlying tokens."
        }
      },
      "getSupportedYieldTokens()": {
        "details": "The order of the entries returned by this function is not guaranteed to be consistent between calls.",
        "returns": {
          "_0": "the supported yield tokens."
        }
      },
      "getUnderlyingTokenParameters(address)": {
        "params": {
          "underlyingToken": "the address of the underlying token."
        },
        "returns": {
          "conversionFactor": "the scaling factor used to convert the token into units of the decimal token.",
          "decimals": "     the number of decimals that the token has.",
          "enabled": "      a flag indicating if the token is enabled."
        }
      },
      "getYieldTokenParameters(address)": {
        "params": {
          "yieldToken": "the address of the yield token."
        },
        "returns": {
          "accruedWeight": "  The accured weight of shares of the yield-token.",
          "adapter": "        The adapter for the underlying-token.",
          "balance": "        The amount of yield-tokens held by the Alchemist.",
          "decimals": "       The amount of decimals the yield-token has.",
          "enabled": "        A flag indicating if the yield-token is enabled.",
          "expectedValue": "  The expected amount of underlying-tokens that the Alchemist would receive from redeeming its balance of yield-token.",
          "maximumLoss": "    The maximum loss that the yield-token can experience before being automatically disabled.",
          "totalShares": "    The total amount of shares for of the yield-token.",
          "underlyingToken": "The underlying-token."
        }
      },
      "harvest(address,bytes)": {
        "params": {
          "params": "A packet of bytes sent to the `unwrap` function of the yield-token-adapter.  The format of these bytes is dependent on the `withdraw` function (or similar) of the target yield-token.",
          "yieldToken": "The target yield-token."
        }
      },
      "isSupportedUnderlyingToken(address)": {
        "params": {
          "underlyingToken": "the token to check."
        },
        "returns": {
          "_0": "if the token is supported."
        }
      },
      "isSupportedYieldToken(address)": {
        "params": {
          "yieldToken": "the token to check."
        },
        "returns": {
          "_0": "if the token is supported."
        }
      },
      "liquidate(address,uint256,bytes)": {
        "params": {
          "params": "A packet of bytes sent to the `unwrap` function of the yield-token-adapter.  The format of these bytes is dependent on the `withdraw` function (or similar) of the target yield-token.",
          "shares": "The amount of shares to liquidate.",
          "yieldToken": "The yield-token to liquidate."
        }
      },
      "mint(uint256,address)": {
        "params": {
          "amount": "The amount of debt-token to mint.",
          "recipient": "The recipient of the minted debt-token."
        }
      },
      "mintAllowance(address,address)": {
        "params": {
          "owner": "the owner of a position in alchemix that has delegated credit.",
          "spender": "the account which has been delegated credit."
        },
        "returns": {
          "_0": "the amount of tokens the account that has been delegated credit can mint."
        }
      },
      "mintFrom(address,uint256,address)": {
        "params": {
          "amount": "The amount of debt-token to mint.",
          "owner": "The owner of the CDP.",
          "recipient": "The recipient of the minted debt-token."
        }
      },
      "multicall(bytes[])": {
        "details": "The `msg.value` should not be trusted for any method callable from multicall.",
        "params": {
          "data": "The encoded function data for each of the calls to make to this contract"
        },
        "returns": {
          "results": "The results from each of the calls passed in via data"
        }
      },
      "permitMint(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "the deadline timestamp by which the call must be mined for the approve to work.",
          "owner": "the account that is being approved.",
          "r": "must produce valid secp256k1 signature from the holder along with `v` and `s`.",
          "s": "must produce valid secp256k1 signature from the holder along with `r` and `v`.",
          "spender": "the account which is being permitted to spend.",
          "v": "must produce valid secp256k1 signature from the holder along with `r` and `s`.",
          "value": "the amount to permit the spender to spend on behalf of the owner."
        }
      },
      "permitWithdraw(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "the deadline timestamp by which the call must be mined for the approve to work.",
          "owner": "the account that is being approved.",
          "r": "must produce valid secp256k1 signature from the holder along with `v` and `s`.",
          "s": "must produce valid secp256k1 signature from the holder along with `r` and `v`.",
          "v": "must produce valid secp256k1 signature from the holder along with `r` and `s`.",
          "value": "the amount to permit the spender to spend on behalf of the owner.",
          "withdrawer": "the account which is being permitted to swithdraw."
        }
      },
      "poke(address)": {
        "params": {
          "owner": "The owner of the CDP."
        }
      },
      "positions(address,address)": {
        "params": {
          "owner": "The CDP owner.",
          "yieldToken": "The yield-token."
        },
        "returns": {
          "balance": "          The amount of shares of the yield-token in the CDP.",
          "lastAccruedWeight": "The last-accrued-weight of the yield-token in the CDP."
        }
      },
      "removeFromWhitelist(address)": {
        "details": "Adds an contract to the whitelist.",
        "params": {
          "account": "the contract to remove from the whitelist."
        }
      },
      "repay(address,uint256,address)": {
        "params": {
          "amount": "The amount of underlying-token to send for debt repayment (also the amount of debt repaid).",
          "recipient": "The owner of the CDP that will receive the credit.",
          "underlyingToken": "The underlying-token used to repay."
        }
      },
      "setMaximumLoss(address,uint256)": {
        "details": "There are two types of loss of value for yield bearing assets: temporary or permanent. The system will      restrict actions which are sensitive to both forms of loss. For example, deposits must be restricted      when an excessive loss is encountered to prevent users from having their collateral harvested from them.      While the user would receive credit, which then could be exchanged for value equal to the collateral      that was harvested from them, it is seen as a negative user experience because the value of their      collateral should have been higher than what was originally recorded when they made their deposit.",
        "params": {
          "value": "the value to set the maximum loss to. This is in units of basis points.",
          "yieldToken": "the address of the yield bearing token."
        }
      },
      "setMinimumCollateralization(uint256)": {
        "params": {
          "value": "The new minimum collateralization ratio."
        }
      },
      "setPendingAdmin(address)": {
        "details": "This is the first step in the 2-step process of setting a new administrator. After this function is called,      the pending administrator will then need to call `acceptAdmin` to complete the process.",
        "params": {
          "value": "the address to set the pending admin to."
        }
      },
      "setProtocolFee(uint256)": {
        "params": {
          "value": "the value to set the protocol fee to. This is in units of basis points."
        }
      },
      "setProtocolFeeReceiver(address)": {
        "params": {
          "value": "the address to set the protocol fee receiver to."
        }
      },
      "setTransmuter(address)": {
        "params": {
          "value": "The address of the transmuter."
        }
      },
      "snap(address)": {
        "params": {
          "yieldToken": "The target yield-token to snap."
        }
      },
      "underlyingTokensPerShare(address)": {
        "params": {
          "yieldToken": "the token to check."
        },
        "returns": {
          "_0": "the rate of the underlying tokens per share."
        }
      },
      "withdraw(address,uint256,address)": {
        "params": {
          "recipient": "The recipient of the yield-tokens that are withdrawn.",
          "shares": "The number of shares to withdraw.",
          "yieldToken": "The yield-token to withdraw."
        }
      },
      "withdrawAllowance(address,address)": {
        "params": {
          "owner": "the owner of a position in alchemix.",
          "spender": "the account which has been permitted to withdraw."
        },
        "returns": {
          "_0": "the amount of tokens the account that has been permitted to withdraw can withdraw."
        }
      },
      "withdrawFrom(address,address,uint256,address)": {
        "params": {
          "owner": "The owner of the CDP",
          "recipient": "The recipient of the yield-tokens that are withdrawn.",
          "shares": "The number of shares to withdraw.",
          "token": "The yield-token to withdraw."
        }
      },
      "withdrawUnderlying(address,uint256,address,bytes)": {
        "params": {
          "data": "A packet of bytes sent to the `unwrap` function of the yield-token-adapter.  The format of these bytes is dependent on the `withdraw` function (or similar) of the target yield-token.",
          "recipient": "The recipient of the underlying-tokens that are withdrawn.",
          "shares": "The number of shares to withdraw.",
          "yieldToken": "The yield-token that can be redeemed for the target underlying-token."
        }
      },
      "withdrawUnderlyingFrom(address,address,uint256,address,bytes)": {
        "params": {
          "data": "A packet of bytes sent to the `unwrap` function of the yield-token-adapter.  The format of these bytes is dependent on the `withdraw` function (or similar) of the target yield-token.",
          "owner": "The owner of hte CDP",
          "recipient": "The recipient of the underlying-tokens that are withdrawn.",
          "shares": "The number of shares to withdraw.",
          "token": "The yield-token that can be redeemed for the target underlying-token."
        }
      },
      "yieldTokensPerShare(address)": {
        "params": {
          "yieldToken": "the yield-token to check."
        },
        "returns": {
          "_0": "the rate of the yield tokens per share."
        }
      }
    },
    "stateVariables": {
      "PERMIT_MINT_TYPEHASH": {
        "return": "the permit mint typehash.",
        "returns": {
          "_0": "the permit mint typehash."
        }
      },
      "PERMIT_WITHDRAW_TYPEHASH": {
        "return": "the permit withdraw typehash.",
        "returns": {
          "_0": "the permit withdraw typehash."
        }
      },
      "_accounts": {
        "details": "Accounts mapped by the address that owns them."
      },
      "_mintingLimiter": {
        "details": "A linear growth function that limits the amount of debt-token minted."
      },
      "_supportedUnderlyingTokens": {
        "details": "An iterable set of the underlying tokens that are supported by the system."
      },
      "_supportedYieldTokens": {
        "details": "An iterable set of the yield tokens that are supported by the system."
      },
      "_underlyingTokens": {
        "details": "Underlying token parameters mapped by token address."
      },
      "_yieldTokens": {
        "details": "Yield token parameters mapped by token address."
      },
      "admin": {
        "return": "the admin.",
        "returns": {
          "_0": "the admin."
        }
      },
      "debtToken": {
        "return": "The address of the debt-token.",
        "returns": {
          "_0": "The address of the debt-token."
        }
      },
      "keepers": {
        "return": "the true or false.",
        "returns": {
          "_0": "the true or false."
        }
      },
      "minimumCollateralization": {
        "details": "The value returned is a 18 decimal fixed point integer.",
        "return": "the minimum collateralization.",
        "returns": {
          "_0": "the minimum collateralization."
        }
      },
      "nonces": {
        "details": "This is used to prevent replay attacks. All permit schemes share the same nonce.",
        "params": {
          "account": "the account to get the nonce of."
        },
        "return": "the nonce.",
        "returns": {
          "_0": "the nonce."
        }
      },
      "pendingAdmin": {
        "return": "the pending administrator.",
        "returns": {
          "_0": "the pending administrator."
        }
      },
      "protocolFee": {
        "return": "the protocol fee.",
        "returns": {
          "_0": "the protocol fee."
        }
      },
      "protocolFeeReceiver": {
        "return": "the protocol fee receiver.",
        "returns": {
          "_0": "the protocol fee receiver."
        }
      },
      "sentinels": {
        "return": "the true or false.",
        "returns": {
          "_0": "the true or false."
        }
      },
      "transmuter": {
        "return": "the transmuter.",
        "returns": {
          "_0": "the transmuter."
        }
      }
    },
    "title": "AlchemistV2",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidSignature()": [
        {
          "notice": "An error which is thrown when an invalid signature is given."
        }
      ],
      "LockAlreadyClaimed()": [
        {
          "notice": "An error which is thrown when a lock is attempted to be claimed before it has been freed."
        }
      ],
      "SignatureDeadlineExceeded()": [
        {
          "notice": "An error which is thrown when a permit signature deadline is exceeded."
        }
      ]
    },
    "events": {
      "AddUnderlyingToken(address)": {
        "notice": "Emitted when an underlying-token is added to the Alchemist."
      },
      "AddYieldToken(address,address)": {
        "notice": "Emitted when a yield-token is added to the Alchemist."
      },
      "AdminUpdated(address)": {
        "notice": "Emitted when the pendingAdmin accepts the admin role."
      },
      "ApproveMint(address,address,uint256)": {
        "notice": "Emitted when a CDP owner approves a spender to mint debt from their CDP."
      },
      "ApproveWithdraw(address,address,uint256)": {
        "notice": "Emitted when a CDP owner approves a withdrawer to withdraw collateral from their CDP."
      },
      "Burn(address,uint256,address)": {
        "notice": "Emitted when debt-tokens are burned to repay debt."
      },
      "Deposit(address,address,uint256,address)": {
        "notice": "Emitted when a user deposits funds (yield-tokens or underlying-tokens) into a CDP."
      },
      "Donate(address,address,uint256)": {
        "notice": "Emitted when a user donates credit (via burning debt-tokens) to a yield-token."
      },
      "Harvest(address,bytes)": {
        "notice": "Emitted when a yield-token is successfully harvested."
      },
      "KeeperAdded(address)": {
        "notice": "Emitted when a keeper is added."
      },
      "KeeperRemoved(address)": {
        "notice": "Emitted when a keeper is removed."
      },
      "Liquidate(address,address,uint256)": {
        "notice": "Emitted when a user liquidates shares from their CDP."
      },
      "LiquidationLimitUpdated(address,uint256,uint256)": {
        "notice": "Emitted when a liquidation limiter is updated."
      },
      "MaximumLossUpdated(address,uint256)": {
        "notice": "Emitted when a yield-token's maximum loss is updated."
      },
      "MinimumCollateralizationUpdated(uint256)": {
        "notice": "Emitted when the minimum collateralization ratio is updated."
      },
      "Mint(address,uint256,address)": {
        "notice": "Emitted when debt-tokens are minted."
      },
      "MintingLimitUpdated(uint256,uint256)": {
        "notice": "Emitted when an underyling-token's minting limit is updated."
      },
      "PendingAdminUpdated(address)": {
        "notice": "Emitted when the admin updates the pendingAdmin."
      },
      "ProtocolFeeReceiverUpdated(address)": {
        "notice": "Emitted when the protocol fee receiver is updated."
      },
      "ProtocolFeeUpdated(uint256)": {
        "notice": "Emitted when the protocol fee is updated."
      },
      "Repay(address,address,uint256,address)": {
        "notice": "Emitted when underlying-tokens are used to repay a CDP's debt."
      },
      "RepayLimitUpdated(address,uint256,uint256)": {
        "notice": "Emitted when a repay limiter is updated."
      },
      "SentinelAdded(address)": {
        "notice": "Emitted when a sentinel is added."
      },
      "SentinelRemoved(address)": {
        "notice": "Emitted when a sentinel is removed."
      },
      "Snap(address,uint256)": {
        "notice": "Emitted when a yield-token's expected value is snapped to the current value."
      },
      "TransmuterUpdated(address)": {
        "notice": "Emitted with the address of the Transmuter is updated."
      },
      "UnderlyingTokenDisabled(address)": {
        "notice": "Emitted when an underlying-token is disabled in the Alchemist."
      },
      "UnderlyingTokenEnabled(address)": {
        "notice": "Emitted when an underlying-token is enabled in the Alchemist."
      },
      "Withdraw(address,address,uint256,address)": {
        "notice": "Emitted when a user withdraws funds (yield-tokens or underlying-tokens) from a CDP."
      },
      "YieldTokenDisabled(address)": {
        "notice": "Emitted when a yield-token is disabled in the Alchemist."
      },
      "YieldTokenEnabled(address)": {
        "notice": "Emitted when a yield-token is enabled in the Alchemist."
      }
    },
    "kind": "user",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "notice": "Calculates the EIP-712 domain separator used in permits."
      },
      "MAX_BPS()": {
        "notice": "The maximum precision of percentage calculations."
      },
      "PERMIT_MINT_TYPEHASH()": {
        "notice": "Gets the type hash used in the permit minting signature verification."
      },
      "PERMIT_WITHDRAW_TYPEHASH()": {
        "notice": "Gets the type hash used in the permit withdrawing signature verification."
      },
      "acceptAdmin()": {
        "notice": "Accepts the role of administrator."
      },
      "accounts(address)": {
        "notice": "Gets the debt and deposited tokens of an account."
      },
      "addUnderlyingToken(address,(uint256,uint256,uint256,uint256))": {
        "notice": "Add an underlying-token to the list of supported underlying-tokens."
      },
      "addYieldToken(address,(address,uint256,uint256))": {
        "notice": "Add a yield-token to the list of supported yield-tokens."
      },
      "admin()": {
        "notice": "Gets the admin of the Alchemist."
      },
      "approveMint(address,uint256)": {
        "notice": "Approve an address to mint debt from the CDP owned by msg.sender; This function is intented to be used as a way to delegate a user's credit to a third party, likely another lego."
      },
      "approveWithdraw(address,uint256)": {
        "notice": "Approve an address to withdraw collateral from the CDP owned by msg.sender; This function is intented to be used as a way to delegate a user's collatearl to a third party, likely another lego."
      },
      "burn(uint256,address)": {
        "notice": "Burn debt-token to pay back debt in the CDP owned by recipient."
      },
      "configureLiquidationLimit(address,uint256,uint256)": {
        "notice": "Configure a liquidation limiter."
      },
      "configureMintingLimit(uint256,uint256)": {
        "notice": "Configure the minting limiter."
      },
      "configureRepayLimit(address,uint256,uint256)": {
        "notice": "Configure a repay limiter."
      },
      "debtToken()": {
        "notice": "Returns the address of the debt-token used by the Alchemist."
      },
      "deposit(address,uint256,address)": {
        "notice": "Deposit a yield-token into a user's CDP."
      },
      "depositUnderlying(address,uint256,address,bytes)": {
        "notice": "Deposit an underlying-token into a user's CDP."
      },
      "disableUnderlyingToken(address)": {
        "notice": "Disable an underlying-token."
      },
      "disableYieldToken(address)": {
        "notice": "Disable a yield-token."
      },
      "donate(address,uint256)": {
        "notice": "Donate credit weight to a target yield-token by burning debt-tokens."
      },
      "enableUnderlyingToken(address)": {
        "notice": "Enable an underlying-token."
      },
      "enableYieldToken(address)": {
        "notice": "Enable a yield-token."
      },
      "getSupportedUnderlyingTokens()": {
        "notice": "Gets the supported underlying tokens."
      },
      "getSupportedYieldTokens()": {
        "notice": "Gets the supported yield tokens."
      },
      "getUnderlyingTokenParameters(address)": {
        "notice": "Gets parameters for an underlying token."
      },
      "getYieldTokenParameters(address)": {
        "notice": "Get the parameters and state of a yield-token."
      },
      "harvest(address,bytes)": {
        "notice": "Harvest any pending yield from the target yield-token."
      },
      "isSupportedUnderlyingToken(address)": {
        "notice": "Gets if an underlying token is supported."
      },
      "isSupportedYieldToken(address)": {
        "notice": "Gets if a yield token is supported."
      },
      "keepers(address)": {
        "notice": "Checks if an address is a keeper."
      },
      "liquidate(address,uint256,bytes)": {
        "notice": "Liquidate funds from the CDP owned by msg.sender."
      },
      "minimumCollateralization()": {
        "notice": "Gets the minimum collateralization that the system supports. Collateralization is determined by taking the total value of collateral that a user has deposited into their account and dividing it by the debt that they have taken out."
      },
      "mint(uint256,address)": {
        "notice": "Mint debt from the CDP owned by msg.sender."
      },
      "mintAllowance(address,address)": {
        "notice": "Gets the amount of tokens an account that has been delegated credit can mint."
      },
      "mintFrom(address,uint256,address)": {
        "notice": "Mint debt from the CDP owned by owner."
      },
      "multicall(bytes[])": {
        "notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
      },
      "nonces(address)": {
        "notice": "Gets the current permit nonce of `account`."
      },
      "pendingAdmin()": {
        "notice": "Gets the pending administrator of the Alchemist."
      },
      "permitMint(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Approves `spender` to spend `value` tokens on the behalf of `owner`.. The permit message should be signed off-chain by the owner of the position and the resulting v, r, and s parameters are used to verify the approval signature."
      },
      "permitWithdraw(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Approves `withdrawer` to withdraw `value` tokens on the behalf of `owner`.. The permit message should be signed off-chain by the owner of the position and the resulting v, r, and s parameters are used to verify the approval signature."
      },
      "poke(address)": {
        "notice": "Sync the weights of all yieldTokens in a user's CDP. "
      },
      "positions(address,address)": {
        "notice": "Gets the balance and lastAccruedWeight of a given yield-token in a user's CDP"
      },
      "protocolFee()": {
        "notice": "Gets the protocol fee."
      },
      "protocolFeeReceiver()": {
        "notice": "Gets the protocol fee receiver."
      },
      "repay(address,uint256,address)": {
        "notice": "Repay debt with an underlying-token."
      },
      "sentinels(address)": {
        "notice": "Checks if an address is a sentinel."
      },
      "setMaximumLoss(address,uint256)": {
        "notice": "Sets the maximum loss that a yield bearing token will permit before restricting certain actions."
      },
      "setMinimumCollateralization(uint256)": {
        "notice": "Set the minimum collateralization ratio for the debt-token."
      },
      "setPendingAdmin(address)": {
        "notice": "Sets the pending administrator."
      },
      "setProtocolFee(uint256)": {
        "notice": "Sets the fee that the protocol will take from harvests."
      },
      "setProtocolFeeReceiver(address)": {
        "notice": "Sets the address which will receive protocol fees."
      },
      "setTransmuter(address)": {
        "notice": "Set the address of the transmuter. The address set here will likely be a TransmuterBuffer contract, and not the Transmuter itself, but the Alchemist does not know nor does it care."
      },
      "snap(address)": {
        "notice": "Snap the expected value of a token to the current value. This function would only be used in the event of a loss in the target yield-token. For example, say a third-party vault experiences a 50% loss.  The expected value (amount of underlying-tokens) of the yield-tokens being held by the Alchemist would be 2X the real value that those yield-tokens could be redeemed for.  The `snap` function gives governance a way to realize those losses so that users can continue using the strategy as normal."
      },
      "transmuter()": {
        "notice": "Gets the transmuter."
      },
      "underlyingTokensPerShare(address)": {
        "notice": "Gets the rate of the underlying tokens per share."
      },
      "withdraw(address,uint256,address)": {
        "notice": "Withdraw a yield-token from the CDP owned by msg.sender."
      },
      "withdrawAllowance(address,address)": {
        "notice": "Gets the amount of tokens an account has been permitted can withdraw."
      },
      "withdrawFrom(address,address,uint256,address)": {
        "notice": "Withdraw a yield-token from the CDP owned by owner."
      },
      "withdrawUnderlying(address,uint256,address,bytes)": {
        "notice": "Withdraw an underlying-token from the CDP owned by msg.sender."
      },
      "withdrawUnderlyingFrom(address,address,uint256,address,bytes)": {
        "notice": "Withdraw an underlying-token from the CDP owned by owner."
      },
      "yieldTokensPerShare(address)": {
        "notice": "Gets the rate of the yield tokens per share."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10926,
        "contract": "contracts/AlchemistV2.sol:AlchemistV2",
        "label": "_lockState",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7378,
        "contract": "contracts/AlchemistV2.sol:AlchemistV2",
        "label": "whitelistActive",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 7383,
        "contract": "contracts/AlchemistV2.sol:AlchemistV2",
        "label": "whitelist",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3468,
        "contract": "contracts/AlchemistV2.sol:AlchemistV2",
        "label": "admin",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3472,
        "contract": "contracts/AlchemistV2.sol:AlchemistV2",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3478,
        "contract": "contracts/AlchemistV2.sol:AlchemistV2",
        "label": "sentinels",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3484,
        "contract": "contracts/AlchemistV2.sol:AlchemistV2",
        "label": "keepers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3488,
        "contract": "contracts/AlchemistV2.sol:AlchemistV2",
        "label": "transmuter",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3492,
        "contract": "contracts/AlchemistV2.sol:AlchemistV2",
        "label": "minimumCollateralization",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3496,
        "contract": "contracts/AlchemistV2.sol:AlchemistV2",
        "label": "protocolFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3500,
        "contract": "contracts/AlchemistV2.sol:AlchemistV2",
        "label": "protocolFeeReceiver",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3516,
        "contract": "contracts/AlchemistV2.sol:AlchemistV2",
        "label": "nonces",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3520,
        "contract": "contracts/AlchemistV2.sol:AlchemistV2",
        "label": "_mintingLimiter",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(LinearGrowthLimiter)13932_storage"
      },
      {
        "astId": 3526,
        "contract": "contracts/AlchemistV2.sol:AlchemistV2",
        "label": "_accounts",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(Account)3460_storage)"
      },
      {
        "astId": 3532,
        "contract": "contracts/AlchemistV2.sol:AlchemistV2",
        "label": "_underlyingTokens",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(UnderlyingTokenParams)3403_storage)"
      },
      {
        "astId": 3538,
        "contract": "contracts/AlchemistV2.sol:AlchemistV2",
        "label": "_yieldTokens",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_struct(YieldTokenParams)3433_storage)"
      },
      {
        "astId": 3542,
        "contract": "contracts/AlchemistV2.sol:AlchemistV2",
        "label": "_supportedUnderlyingTokens",
        "offset": 0,
        "slot": "19",
        "type": "t_struct(AddressSet)14304_storage"
      },
      {
        "astId": 3546,
        "contract": "contracts/AlchemistV2.sol:AlchemistV2",
        "label": "_supportedYieldTokens",
        "offset": 0,
        "slot": "21",
        "type": "t_struct(AddressSet)14304_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Account)3460_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AlchemistV2.Account)",
        "numberOfBytes": "32",
        "value": "t_struct(Account)3460_storage"
      },
      "t_mapping(t_address,t_struct(UnderlyingTokenParams)3403_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AlchemistV2.UnderlyingTokenParams)",
        "numberOfBytes": "32",
        "value": "t_struct(UnderlyingTokenParams)3403_storage"
      },
      "t_mapping(t_address,t_struct(YieldTokenParams)3433_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AlchemistV2.YieldTokenParams)",
        "numberOfBytes": "32",
        "value": "t_struct(YieldTokenParams)3433_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Account)3460_storage": {
        "encoding": "inplace",
        "label": "struct AlchemistV2.Account",
        "members": [
          {
            "astId": 3435,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "debt",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 3440,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "balances",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 3445,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "lastAccruedWeights",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 3449,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "depositedTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(AddressSet)14304_storage"
          },
          {
            "astId": 3454,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "mintAllowances",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 3459,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "withdrawAllowances",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(AddressSet)14304_storage": {
        "encoding": "inplace",
        "label": "struct Sets.AddressSet",
        "members": [
          {
            "astId": 14299,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 14303,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LinearGrowthLimiter)13932_storage": {
        "encoding": "inplace",
        "label": "struct Limiters.LinearGrowthLimiter",
        "members": [
          {
            "astId": 13922,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "maximum",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13925,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13928,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "lastValue",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13931,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "lastBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UnderlyingTokenParams)3403_storage": {
        "encoding": "inplace",
        "label": "struct AlchemistV2.UnderlyingTokenParams",
        "members": [
          {
            "astId": 3388,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "decimals",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3391,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "conversionFactor",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3395,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "repayLimiter",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(LinearGrowthLimiter)13932_storage"
          },
          {
            "astId": 3399,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "liquidationLimiter",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(LinearGrowthLimiter)13932_storage"
          },
          {
            "astId": 3402,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "enabled",
            "offset": 0,
            "slot": "10",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(YieldTokenParams)3433_storage": {
        "encoding": "inplace",
        "label": "struct AlchemistV2.YieldTokenParams",
        "members": [
          {
            "astId": 3405,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "decimals",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3408,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "underlyingToken",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3411,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "adapter",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3414,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "maximumLoss",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3417,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "maximumExpectedValue",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3420,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "balance",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3423,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3426,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "expectedValue",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3429,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "accruedWeight",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 3432,
            "contract": "contracts/AlchemistV2.sol:AlchemistV2",
            "label": "enabled",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
